<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Huangzl&#39;s blog</title>
  
  <subtitle>Learning by sharing</subtitle>
  <link href="http://home.hzlssb.com/atom.xml" rel="self"/>
  
  <link href="http://home.hzlssb.com/"/>
  <updated>2023-10-27T06:56:09.259Z</updated>
  <id>http://home.hzlssb.com/</id>
  
  <author>
    <name>Huangzl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Webpack 性能优化-2</title>
    <link href="http://home.hzlssb.com/2023/10/27/Webpack-optimization-2/"/>
    <id>http://home.hzlssb.com/2023/10/27/Webpack-optimization-2/</id>
    <published>2023-10-27T02:28:04.000Z</published>
    <updated>2023-10-27T06:56:09.259Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="性能优化-js-css代码压缩">性能优化 - JS-CSS代码压缩</span></h2><ul><li>Terser是一个JavaScript的解释（Parser）、Mangler（绞肉机）/Compressor（压缩机）的工具集；</li><li>早期我们会使用 uglify-js来压缩、丑化我们的JavaScript代码，但是目前已经不再维护，并且不支持ES6+的语法；</li><li>Terser是从 uglify-es fork 过来的，并且保留它原来的大部分API以及适配 uglify-es和uglify-js@3等；</li></ul><p><a href="https://github.com/terser/terser">webpack-terser</a></p><h3><span id="javascript-代码压缩">JavaScript 代码压缩</span></h3><p>Webpack 提供了<code>terser-webpack-plugin</code> 插件进行代码优化和压缩。</p><p>在production模式下，默认就是使用TerserPlugin来处理代码。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'terser-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 配置其他Webpack选项...</span>  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="css-代码压缩">CSS 代码压缩</span></h3><p>除了JavaScript代码，CSS代码也可以通过Webpack进行压缩。使用<code>css-minimizer-webpack-plugin</code> 进行压缩CSS代码。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> CssMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'css-minimizer-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 配置其他Webpack选项...</span>  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token keyword">new</span> <span class="token class-name">CssMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// 可以继续添加其他压缩插件...</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="webpack实现tree-shaking">webpack实现Tree Shaking</span></h3><p>tree shaking 是一个术语，通常用于描述移除 JavaScript 上下文中的未引用代码(dead-code)。</p><h1><span id="webpack-实现-tree-shaking">Webpack 实现 Tree Shaking</span></h1><p>在现代的前端开发中，代码体积优化是一个关键的议题。Tree Shaking 是一种用于消除未引用代码的优化技术，它可以帮助我们剔除项目中未使用的 JavaScript 模块，从而减小打包后的文件体积。Webpack 提供了内置的支持，使得 Tree Shaking 在项目中变得非常容易实现。</p><h2><span id="开启-es-模块化">开启 ES 模块化</span></h2><p>首先，确保你的 JavaScript 代码采用了 ES 模块化的方式，因为Webpack 的 Tree Shaking 功能仅对 ES 模块有效。你可以在项目中使用 <code>import</code> 和 <code>export</code> 语法来定义模块。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// math.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">cube</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="webpack-配置">Webpack 配置</span></h2><p>在 Webpack 的配置文件中，确保以下几点设置，以启用 Tree Shaking：</p><p>将 <code>mode</code> 设置为 <code>'production'</code>，Webpack 会自动启用相关的优化，包括 Tree Shaking。</p><h3><span id="js实现tree-shaking">JS实现Tree Shaking</span></h3><p>webpack实现Tree Shaking采用了两种不同的方案：</p><ul><li>usedExports：通过标记某些函数是否被使用，之后通过Terser来进行优化的；</li><li>sideEffects：跳过整个模块/文件，直接查看该文件是否有副作用；</li></ul><h4><span id="使用usedexports实现tree-sharking">使用usedExports实现Tree Sharking</span></h4><p>配置模式为production</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span>  <span class="token comment">// ...其他配置</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置optimization里面的usedExports</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span> <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token literal-property property">usedExports</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="使用sideeffect实现tree-sharking">使用sideEffect实现Tree Sharking</span></h4><p>在package.json中设置sideEffects的值：</p><ul><li><p>如果我们将sideEffects设置为false，就是告知webpack可以安全的删除未用到的exports；</p></li><li><p>如果有一些我们希望保留，可以设置为数组；</p></li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"your-project"</span><span class="token punctuation">,</span>  <span class="token property">"sideEffects"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/some-side-effectful-file.js"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://zhuanlan.zhihu.com/p/40052192">Webpack 中的 sideEffects </a></p><h4><span id="解释-tree-shaking-和-sideeffects">解释 tree shaking 和 sideEffects</span></h4><p><code>sideEffects</code> 和 <code>usedExports</code>（更多被认为是 tree shaking）是两种不同的优化方式。</p><p><code>sideEffects</code> 更为有效 是因为它允许跳过整个模块/文件和整个文件子树。</p><p><code>usedExports</code> 依赖于 <code>terser</code> 去检测语句中的副作用。它是一个 <code>JavaScript</code> 任务而且没有像 <code>sideEffects</code> 一样简单直接。而且它不能跳转子树/依赖由于细则中说副作用需要被评估。尽管导出函数能运作如常，但 <code>React</code> 框架的高阶函数（HOC）在这种情况下是会出问题的。</p><h3><span id="css实现treeshaking">CSS实现TreeShaking</span></h3><p>CSS的Tree Shaking需要借助于一些其他的插件；</p><p>在早期的时候，我们会使用PurifyCss插件来完成CSS的tree shaking，但是目前该库已经不再维护了（最新更新也是在4年前 了）；</p><p>目前我们可以使用另外一个库来完成CSS的Tree Shaking：PurgeCSS，也是一个帮助我们删除未使用的CSS的工具；</p><h2><span id="webpack对文件压缩">Webpack对文件压缩</span></h2><h3><span id="什么是http压缩">什么是HTTP压缩</span></h3><p>HTTP压缩是一种内置在 服务器 和 客户端 之间的，以改进传输速度和带宽利用率的方式；<br>HTTP压缩的流程什么呢？<br>第一步：HTTP数据在服务器发送前就已经被压缩了；（可以在webpack中完成）<br>第二步：兼容的浏览器在向服务器发送请求时，会告知服务器自己支持哪些压缩格式；<br>第三步：服务器在浏览器支持的压缩格式下，直接返回对应的压缩后的文件，并且在响应头中告知浏览器；</p><h3><span id="目前的流行压缩格式">目前的流行压缩格式</span></h3><p>目前的压缩格式非常的多：<br>compress – UNIX的“compress”程序的方法（历史性原因，不推荐大多数应用使用，应该使用gzip或deflate）；<br>deflate – 基于deflate算法（定义于RFC 1951）的压缩，使用zlib数据格式封装；<br>gzip – GNU zip格式（定义于RFC 1952），是目前使用比较广泛的压缩算法；<br>br – 一种新的开源压缩算法，专为HTTP内容的编码而设计；</p><h3><span id="webpack配置文件压缩">Webpack配置文件压缩</span></h3><p>webpack中相当于是实现了HTTP压缩的第一步操作，我们可以使用CompressionPlugin。</p><p>第一步，安装CompressionPlugin：</p><pre class="line-numbers language-none"><code class="language-none">npm install compression-webpack-plugin -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二步，使用CompressionPlugin即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js(\?.*)?$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;性能优化-js-css代码压缩&quot;&gt;性能优化 - JS-CSS代码压缩&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Terser是一个JavaScript的解释（Parser）、Mangler（绞肉机）/Compressor（压缩机）的工具集；&lt;/li&gt;
</summary>
      
    
    
    
    <category term="webpack" scheme="http://home.hzlssb.com/categories/webpack/"/>
    
    
    <category term="webpack" scheme="http://home.hzlssb.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack Performance Optimization-2</title>
    <link href="http://home.hzlssb.com/2023/10/27/en/Webpack-optimization-2/"/>
    <id>http://home.hzlssb.com/2023/10/27/en/Webpack-optimization-2/</id>
    <published>2023-10-27T02:28:04.000Z</published>
    <updated>2023-10-27T06:55:52.708Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="performance-optimization-js-css-code-minification">Performance Optimization - JS-CSS Code Minification</span></h2><ul><li>Terser is a toolset for JavaScript parsing, mangling, and compressing.</li><li>In the early days, we used <code>uglify-js</code> to minify and uglify our JavaScript code. However, it is no longer maintained and does not support ES6+ syntax.</li><li>Terser is a fork of <code>uglify-es</code> and retains most of its original APIs, compatible with <code>uglify-es</code> and <code>uglify-js@3</code>, etc.</li></ul><p><a href="https://github.com/terser/terser">webpack-terser</a></p><h3><span id="javascript-code-minification">JavaScript Code Minification</span></h3><p>Webpack provides the <code>terser-webpack-plugin</code> plugin for code optimization and minification.</p><p>In production mode, TerserPlugin is used by default for code processing.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'terser-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Configure other Webpack options...</span>  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="css-code-minification">CSS Code Minification</span></h3><p>Apart from JavaScript code, CSS code can also be minified using Webpack. Use <code>css-minimizer-webpack-plugin</code> to compress CSS code.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> CssMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'css-minimizer-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Configure other Webpack options...</span>  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token keyword">new</span> <span class="token class-name">CssMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// You can continue adding other compression plugins...</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="tree-shaking-implementation-in-webpack">Tree Shaking Implementation in Webpack</span></h3><p>Tree shaking is a term commonly used to describe the removal of dead code in JavaScript context.</p><h1><span id="tree-shaking-in-webpack">Tree Shaking in Webpack</span></h1><p>In modern front-end development, optimizing code size is a crucial topic. Tree shaking is an optimization technique used to eliminate unused JavaScript modules in a project, reducing the size of the bundled files. Webpack provides built-in support, making it easy to implement tree shaking in projects.</p><h2><span id="enable-es-module-syntax">Enable ES Module Syntax</span></h2><p>First, ensure your JavaScript code follows ES module syntax, as Webpack’s tree shaking feature only works with ES modules. Use <code>import</code> and <code>export</code> syntax to define modules in your project.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// math.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">cube</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="webpack-configuration">Webpack Configuration</span></h2><p>In the Webpack configuration file, ensure the following settings to enable tree shaking:</p><p>Set <code>mode</code> to <code>'production'</code>. Webpack will automatically enable related optimizations, including tree shaking.</p><h3><span id="implementing-tree-shaking-for-javascript">Implementing Tree Shaking for JavaScript</span></h3><p>Webpack implements tree shaking using two different approaches:</p><ul><li><code>usedExports</code>: Marks certain functions as used, and later optimizes them with Terser.</li><li><code>sideEffects</code>: Skips entire modules/files and checks if the file has side effects.</li></ul><h4><span id="using-usedexports-to-implement-tree-shaking">Using <code>usedExports</code> to Implement Tree Shaking</span></h4><p>Set the mode to production:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span>  <span class="token comment">// ...other configurations</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Configure <code>usedExports</code> in the optimization section:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span> <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token literal-property property">usedExports</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="using-sideeffects-to-implement-tree-shaking">Using <code>sideEffects</code> to Implement Tree Shaking</span></h4><p>Set the <code>sideEffects</code> field in <code>package.json</code>:</p><ul><li>Set it to <code>false</code> to inform Webpack that it can safely remove unused exports.</li><li>If there are specific files you want to keep, set it as an array.</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"your-project"</span><span class="token punctuation">,</span>  <span class="token property">"sideEffects"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/some-side-effectful-file.js"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://zhuanlan.zhihu.com/p/40052192">Webpack Side Effects</a></p><h4><span id="understanding-tree-shaking-and-sideeffects">Understanding Tree Shaking and <code>sideEffects</code></span></h4><p><code>sideEffects</code> and <code>usedExports</code> (more commonly considered tree shaking) are two different optimization techniques.</p><p><code>sideEffects</code> is more efficient as it allows skipping entire modules/files and their entire subtree.</p><p><code>usedExports</code> depends on <code>terser</code> to detect side effects in statements. It’s a more complex JavaScript task and is not as straightforward as <code>sideEffects</code>. Also, it cannot skip subtrees/dependencies because side effects need to be evaluated. While exported functions work as usual, higher-order functions (HOC) in the React framework can have issues in this scenario.</p><h3><span id="css-tree-shaking-implementation">CSS Tree Shaking Implementation</span></h3><p>For CSS tree shaking, additional plugins are required.</p><p>In the past, <code>PurifyCss</code> plugin was used for CSS tree shaking, but it’s no longer maintained (last update was 4 years ago).</p><p>A different library, <code>PurgeCSS</code>, can now be used for CSS tree shaking, helping remove unused CSS.</p><h2><span id="file-compression-in-webpack">File Compression in Webpack</span></h2><h3><span id="what-is-http-compression">What is HTTP Compression</span></h3><p>HTTP compression is a technique used between servers and clients to improve transmission speed and bandwidth utilization.<br>The process of HTTP compression is as follows:</p><ol><li>Data is compressed on the server before being sent. (Can be done in Webpack)</li><li>Compatible browsers inform the server about supported compression formats during requests.</li><li>The server returns the corresponding compressed file to the browser, indicating it in the response headers.</li></ol><h3><span id="popular-compression-formats">Popular Compression Formats</span></h3><p>There are several popular compression formats:</p><ul><li><code>compress</code>: Method used by UNIX’s “compress” program (historical reasons, not recommended for most applications, use gzip or deflate instead).</li><li><code>deflate</code>: Compression based on the deflate algorithm (defined in RFC 1951) and encapsulated in zlib data format.</li><li><code>gzip</code>: GNU zip format (defined in RFC 1952), widely used compression algorithm.</li><li><code>br</code>: A new open-source compression algorithm designed specifically for HTTP content encoding.</li></ul><h3><span id="webpack-configuration-for-file-compression">Webpack Configuration for File Compression</span></h3><p>Webpack essentially performs the first step of HTTP compression. You can use the <code>CompressionPlugin</code> for this purpose.</p><p>Step 1: Install <code>CompressionPlugin</code>:</p><pre class="line-numbers language-none"><code class="language-none">npm install compression-webpack-plugin -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Step 2: Use <code>CompressionPlugin</code> in your Webpack configuration:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js(\?.*)?$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;performance-optimization-js-css-code-minification&quot;&gt;Performance Optimization - JS-CSS Code Minification&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Te</summary>
      
    
    
    
    <category term="webpack" scheme="http://home.hzlssb.com/categories/webpack/"/>
    
    
    <category term="webpack" scheme="http://home.hzlssb.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>pack-tool-preview</title>
    <link href="http://home.hzlssb.com/2023/10/27/pack-tool-preview/"/>
    <id>http://home.hzlssb.com/2023/10/27/pack-tool-preview/</id>
    <published>2023-10-26T16:06:01.000Z</published>
    <updated>2023-10-26T16:11:03.777Z</updated>
    
    <content type="html"><![CDATA[<p>试了试把真实项目从 Vite 迁移到 Rspack，Build 速度从 125 秒缩短到了 17 秒，开发中刷新页面的速度也提升了 64 %，不过 HMR 时间比 Vite 慢多了。</p><p>如果开发过程中触发 HMR 比较多，而刷新页面比较少，Vite 还是有开发体验的优势。如果是复杂项目，刷新页面更常用，那 Rspack 的开发体验反而会更好。</p><p><img src="/img/pack-tool-preview/preview.jfif" alt="对比"></p><p>前端构建的工具实在是太多了，rolldown、rollup、Rspack、Vite……</p><p>先提前插个眼</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;试了试把真实项目从 Vite 迁移到 Rspack，Build 速度从 125 秒缩短到了 17 秒，开发中刷新页面的速度也提升了 64 %，不过 HMR 时间比 Vite 慢多了。&lt;/p&gt;
&lt;p&gt;如果开发过程中触发 HMR 比较多，而刷新页面比较少，Vite 还是有开发体</summary>
      
    
    
    
    <category term="Build" scheme="http://home.hzlssb.com/categories/Build/"/>
    
    
    <category term="Build" scheme="http://home.hzlssb.com/tags/Build/"/>
    
  </entry>
  
  <entry>
    <title>pack-tool-preview</title>
    <link href="http://home.hzlssb.com/2023/10/27/en/pack-tool-preview/"/>
    <id>http://home.hzlssb.com/2023/10/27/en/pack-tool-preview/</id>
    <published>2023-10-26T16:06:01.000Z</published>
    <updated>2023-10-26T16:11:59.487Z</updated>
    
    <content type="html"><![CDATA[<p>I tried migrating a real project from Vite to Rspack. The build time reduced from 125 seconds to 17 seconds, and the page refresh speed during development increased by 64%. However, the HMR (Hot Module Replacement) in Rspack is much slower compared to Vite.</p><p>If you frequently trigger HMR during development and refresh the page less often, Vite still offers a better development experience. For complex projects where refreshing the page is more common, Rspack provides a better development experience.</p><p><img src="/img/pack-tool-preview/preview.jfif" alt="Comparison"></p><p>There are so many frontend build tools out there: RollDown, Rollup, Rspack, Vite…</p><p>Just a sneak peek; stay tuned for the detailed comparison.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I tried migrating a real project from Vite to Rspack. The build time reduced from 125 seconds to 17 seconds, and the page refresh speed d</summary>
      
    
    
    
    <category term="Build" scheme="http://home.hzlssb.com/categories/Build/"/>
    
    
    <category term="Build" scheme="http://home.hzlssb.com/tags/Build/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 性能优化-1</title>
    <link href="http://home.hzlssb.com/2023/10/26/Webpack-optimization-1/"/>
    <id>http://home.hzlssb.com/2023/10/26/Webpack-optimization-1/</id>
    <published>2023-10-26T13:34:18.000Z</published>
    <updated>2023-10-27T02:27:21.753Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>先来说说为什么要优化？当然如果你的项目很小，构建很快，其实不需要特别关注性能方面的问题。</p><p>但是随着项目涉及到的页面越来越多，功能和业务代码也会越来越多，相应的 <code>webpack</code> 的构建时间也会越来越久，这个时候我们就不得不考虑性能优化的事情了。</p><p><code>webpack</code> 的性能优化较多，我们考虑从两方面入手：<br>优化一：打包后的结果，上线时的性能优化。（比如分包处理、减小包体积、CDN服务器等）<br>优化二：优化打包速度，开发或者构建时优化打包速度。（比如 <code>exclude</code> 、<code>cache-loader</code>等）</p><p>因为这个上线时的性能是直接影响到用户使用体验的，而构建时间与我们的日常开发是密切相关，当我们本地开发启动 <code>devServer</code> 或者 <code>build</code> 的时候，如果时间过长，会大大降低我们的工作效率。</p><h2><span id="性能优化-代码分离">性能优化 - 代码分离</span></h2><p>代码分离（Code Splitting）是 <code>webpack</code> 一个非常重要的特性：</p><p>它主要的目的是将代码分离到不同的 <code>bundle</code> 中，之后我们可以按需加载，或者并行加载这些文件；<br>比如默认情况下，所有的 <code>JavaScript</code> 代码（业务代码、第三方依赖、暂时没有用到的模块）在首页全部都加载，就会影响首页的加载速度；<br>代码分离可以分出更小的 <code>bundle</code> ，以及控制资源加载优先级，提供代码的加载性能；</p><p>Webpack中常用的代码分离有三种：</p><ul><li><strong>入口起点：使用entry配置手动分离代码</strong>；</li><li><strong>防止重复：使用Entry Dependencies或者SplitChunksPlugin去重和分离代码；</strong></li><li><strong>动态导入：通过模块的内联函数调用来分离代码；</strong></li></ul><h3><span id="入口起点优化-entry-dependencies入口依赖">入口起点优化-Entry Dependencies(入口依赖)</span></h3><p>当项目拥有多个入口点（entry points）时，可能会遇到一些重复依赖的问题。某些模块可能在多个入口点中被引用，导致这些模块被重复打包，增加了最终输出文件的体积。<br>dependon-shared模块解决重复依赖</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">page1</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">'./src/page1.js'</span><span class="token punctuation">,</span>      <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">'shared'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">page2</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">'./src/page2.js'</span><span class="token punctuation">,</span>      <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">'shared'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">shared</span><span class="token operator">:</span> <span class="token string">'./src/shared.js'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'[name].bundle.js'</span><span class="token punctuation">,</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">'/dist'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="动态导入dynamic-import">动态导入(dynamic import)</span></h3><p>动态导入是一种在Webpack中实现按需加载（Lazy Loading）的技术，允许在运行时异步加载模块，而不是在应用初始化时就把所有模块打包到一个大文件中。可以提高应用的初始加载速度，并且减小了初始包的体积。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'[name].bundle.js'</span><span class="token punctuation">,</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token comment">// 添加你的Loader规则</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述配置中，通过 <code>optimization.splitChunks</code> 进行代码分割，它的 <code>chunks: 'all'</code> 选项表示对所有模块进行代码分割。</p><p>然后，在代码中使用 <code>import()</code> 函数进行动态导入：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在需要的地方使用动态导入</span><span class="token keyword">const</span> <span class="token function-variable function">loadModule</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./Module'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loadModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">module</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 使用加载的模块</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Webpack会将使用 <code>import()</code> 函数引入的模块进行代码分割，生成单独的文件。<br>在运行时，这些文件会在需要的时候异步加载。</p><h3><span id="自定义分包-splitchunks">自定义分包-SplitChunks</span></h3><p>分包（code splitting）是一种优化策略，它允许将代码分割成小块，使得应用在加载时能够更快地显示内容。</p><p>Webpack提供了多种分包的模式，其中一种是使用<code>SplitChunksPlugin</code>插件来实现的，这个模式叫做<code>splitChunks</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...其他配置</span>  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>      <span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span> <span class="token comment">// 模块的最小体积</span>      <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 模块的最小被引用次数</span>      <span class="token literal-property property">maxAsyncRequests</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 按需加载时的最大并行请求数</span>      <span class="token literal-property property">maxInitialRequests</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// 入口点的最大并行请求数</span>      <span class="token literal-property property">automaticNameDelimiter</span><span class="token operator">:</span> <span class="token string">'~'</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">vendors</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\/]node_modules[\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>          <span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>          <span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://webpack.docschina.org/plugins/split-chunks-plugin">webpack-split-chunks-plugin</a></p><h2><span id="性能优化-cdn">性能优化-CDN</span></h2><p>CDN称之为内容分发网络（Content Delivery Network或Content Distribution Network，缩写：CDN）， 它是指通过相互连接的网络系统，利用最靠近每个用户的服务器； 更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户； 来提供高性能、可扩展性及低成本的网络内容传递给用户；</p><p>在开发中，我们使用CDN主要是两种方式：</p><ul><li>打包的所有静态资源，放到CDN服务器， 用户所有资源都是通过CDN服务器加载的；</li><li>一些第三方资源放到CDN服务器上；</li></ul><p>使用CDN（Content Delivery Network，内容分发网络）是一种非常有效的性能优化策略，特别是在Webpack中。CDN可以加速网站的加载速度，减轻服务器负担，并提高用户体验。以下是如何在Webpack中配置和使用CDN的方法：</p><h3><span id="将第三方库引入cdn">将第三方库引入CDN</span></h3><p>将你的项目中用到的第三方库（例如React、Vue、jQuery等）引入CDN。可以选择在HTML文件中直接引入CDN链接：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/react@版本号/dist/react.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/react-dom@版本号/dist/react-dom.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="在webpack中配置externals">在Webpack中配置externals</span></h3><p>在Webpack的配置中使用externals字段，告诉Webpack哪些模块是外部引入的，不需要打包。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...其他配置</span>  <span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">react</span><span class="token operator">:</span> <span class="token string">'React'</span><span class="token punctuation">,</span>    <span class="token string-property property">'react-dom'</span><span class="token operator">:</span> <span class="token string">'ReactDOM'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在HTML文件中通过script标签引入CDN：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/react@版本号/dist/react.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/react-dom@版本号/dist/react-dom.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="配置cdn的publicpath">配置CDN的publicPath</span></h3><p>在Webpack的output字段中配置publicPath，指定在引入资源时使用的URL前缀，通常设置为CDN的地址：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...其他配置</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...其他output配置</span>    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">'https://cdn.example.com/'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样在Webpack构建时，所有的资源引用路径都会加上CDN的地址前缀。</p><h2><span id="性能优化-提取css文件">性能优化-提取css文件</span></h2><p>将CSS文件从JavaScript打包文件中提取出来是一种常见的性能优化策略。这样做的好处是可以减小JavaScript文件的体积，加快页面加载速度，并且使浏览器能够并行下载CSS和JavaScript文件，提高加载性能。在Webpack中，你可以使用<code>mini-css-extract-plugin</code>插件来实现CSS文件的提取。</p><h3><span id="配置webpack">配置Webpack</span></h3><p>在Webpack配置文件中引入<code>mini-css-extract-plugin</code>插件，然后配置<code>module.rules</code>来处理CSS文件。</p>   <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...其他配置</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token comment">// 可以加入其他的CSS处理loader，比如postcss-loader和sass-loader</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'styles.css'</span><span class="token punctuation">,</span> <span class="token comment">// 提取出的CSS文件的文件名</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="引入css文件">引入CSS文件</span></h3><p>在JavaScript文件或者入口文件中引入CSS文件：</p>   <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'./styles.css'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者在HTML文件中使用link标签引入提取出来的CSS文件：</p>   <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>styles.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="性能优化-打包文件命名hashcontenthashchunkhash">性能优化-打包文件命名(Hash,ContentHash,ChunkHash)</span></h2><p>在Webpack中，打包文件的命名是一个重要的性能优化策略。合适的命名方案可以确保浏览器能够正确地缓存文件，避免不必要的网络请求，提高应用的加载速度。以下是三种常见的打包文件命名方式：Hash、ContentHash 和 ChunkHash。</p><h3><span id="hash哈希">Hash（哈希）</span></h3><p>Hash 是根据文件内容生成的哈希值，当文件内容发生改变时，其对应的 Hash 值也会改变。在Webpack中，可以使用 <code>[hash]</code> 占位符来表示 Hash 值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'bundle.[hash].js'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="contenthash内容哈希">ContentHash（内容哈希）</span></h3><p>ContentHash 是根据文件内容生成的哈希值，但是不同于 Hash 的是，ContentHash 只会受到文件内容的影响，不会受到文件名或路径等其他因素的影响。在Webpack中，可以使用 <code>[contenthash]</code> 占位符来表示 ContentHash 值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'bundle.[contenthash].js'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="chunkhash块哈希">ChunkHash（块哈希）</span></h3><p>ChunkHash 是根据模块内容生成的哈希值，不同模块的内容不同，它们的 ChunkHash 值也会不同。在Webpack中，可以使用 <code>[chunkhash]</code> 占位符来表示 ChunkHash 值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'[name].[chunkhash].js'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="性能优化-webpack实现tree-shaking">性能优化-webpack实现Tree Shaking</span></h2><p>JavaScript的Tree Shaking：</p><p>对JavaScript进行Tree Shaking是源自打包工具rollup（后面我们也会讲的构建工具）；</p><p>这是因为Tree Shaking依赖于ES Module的静态语法分析（不执行任何的代码，可以明确知道模块的依赖关系）；</p><p>webpack2正式内置支持了ES2015模块，和检测未使用模块的能力；</p><p>在webpack4正式扩展了这个能力，并且通过 package.json的 sideEffects属性作为标记，告知webpack在编译时，哪里文 件可以安全的删除掉；</p><p>webpack5中，也提供了对部分CommonJS的tree shaking的支持；</p><p><a href="https://github.com/webpack/changelog-v5#commonjs-tree-shaking">commonjs-tree-shaking</a></p><h3><span id="js实现tree-shaking">JS实现Tree Shaking</span></h3><p>webpack实现Tree Shaking采用了两种不同的方案：</p><ul><li>usedExports：通过标记某些函数是否被使用，之后通过Terser来进行优化的；</li><li>sideEffects：跳过整个模块/文件，直接查看该文件是否有副作用；</li></ul><h3><span id="css进行tree-shaking">CSS进行Tree Shaking</span></h3><p>CSS的Tree Shaking需要借助于一些其他的插件；</p><p>在早期的时候，我们使用PurifyCss插件来完成CSS的tree shaking，但是目前该库已经不再维护；</p><p>目前我们可以使用另外一个库来完成CSS的Tree Shaking：PurgeCSS，也是一个帮助我们删除未使用的CSS的工具: PurgeCss</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;先来说说为什么要优化？当然如果你的项目很小，构建很快，其实不需要特别关注性能方面的问题。&lt;/p&gt;
&lt;p&gt;但是随着项目涉及到的页面越来越多，功能和业务代码也会越来越多，相应的 &lt;code&gt;webpack&lt;/co</summary>
      
    
    
    
    <category term="webpack" scheme="http://home.hzlssb.com/categories/webpack/"/>
    
    
    <category term="webpack" scheme="http://home.hzlssb.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack Performance Optimization-1</title>
    <link href="http://home.hzlssb.com/2023/10/26/en/Webpack-optimization-1/"/>
    <id>http://home.hzlssb.com/2023/10/26/en/Webpack-optimization-1/</id>
    <published>2023-10-26T13:34:18.000Z</published>
    <updated>2023-10-27T02:27:12.920Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="introduction">Introduction</span></h2><p>Let’s talk about why optimization is necessary. If your project is small and builds quickly, you might not need to worry too much about performance optimization. However, as your project grows with more pages, features, and business logic, the build time of webpack, the underlying build tool, also increases. At this point, optimizing performance becomes crucial.</p><p>Webpack offers various avenues for performance optimization, which can be broadly categorized into two areas:</p><p>Optimization One: Optimizing the built result for production, focusing on performance during deployment (e.g., code splitting, reducing bundle size, using CDN servers, etc.).<br>Optimization Two: Optimizing build speed for development or production build, enhancing the speed of the build process (e.g., using exclusion, cache loaders, etc.).<br>The performance during production directly affects user experience, whereas build time is closely related to developers’ daily workflow. If the local development server or production build takes too long, it significantly hampers productivity.</p><h2><span id="performance-optimization-code-splitting">Performance Optimization - Code Splitting</span></h2><p>Code splitting is a critical feature in webpack:</p><p>Its primary purpose is to separate code into different bundles, which can be loaded on demand or in parallel.<br>By default, all JavaScript code (business logic, third-party dependencies, and modules not immediately used) is loaded on the initial page load, impacting the loading speed.<br>Code splitting allows creating smaller bundles and controlling resource loading priorities, thereby enhancing code loading performance.</p><p>Webpack provides three common approaches to code splitting:</p><ul><li><strong>Entry Points: Manually splitting code using entry configuration</strong></li><li><strong>Preventing Duplication: Avoiding duplicate code using Entry Dependencies or SplitChunksPlugin</strong></li><li><strong>Dynamic Imports: Splitting code using inline functions in modules</strong></li></ul><h3><span id="optimizing-entry-points-entry-dependencies">Optimizing Entry Points - Entry Dependencies</span></h3><p>When a project has multiple entry points, there might be issues with duplicate dependencies. Some modules might be referenced in multiple entry points, causing redundancy in the final output, increasing the output file size.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">page1</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">'./src/page1.js'</span><span class="token punctuation">,</span>      <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">'shared'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">page2</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">'./src/page2.js'</span><span class="token punctuation">,</span>      <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">'shared'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">shared</span><span class="token operator">:</span> <span class="token string">'./src/shared.js'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'[name].bundle.js'</span><span class="token punctuation">,</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">'/dist'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="dynamic-imports">Dynamic Imports</span></h3><p>Dynamic imports are a technique in webpack for lazy loading, allowing modules to load asynchronously at runtime instead of bundling all modules into a large initial file. This approach improves the initial loading speed and reduces the initial bundle size.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'[name].bundle.js'</span><span class="token punctuation">,</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token comment">// Add your loader rules here</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In the above configuration, code splitting is achieved using <code>optimization.splitChunks</code> with the option <code>chunks: 'all'</code>.</p><p>Then, dynamic imports can be used in the code like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Dynamically import modules where needed</span><span class="token keyword">const</span> <span class="token function-variable function">loadModule</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./Module'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loadModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">module</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Use the loaded module</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Webpack will split the modules imported using <code>import()</code> into separate files. These files will be loaded asynchronously when needed during runtime.</p><h3><span id="custom-bundle-splitting-splitchunks">Custom Bundle Splitting - SplitChunks</span></h3><p>Bundle splitting is an optimization strategy that allows breaking down code into smaller pieces, enabling faster content display during loading.</p><p>Webpack provides various strategies for bundle splitting, one of which involves using the <code>SplitChunksPlugin</code> plugin. This strategy is known as <code>splitChunks</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...other configurations</span>  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>      <span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span> <span class="token comment">// Minimum size of the module before splitting</span>      <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// Minimum number of times a module should be duplicated before splitting</span>      <span class="token literal-property property">maxAsyncRequests</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// Maximum number of parallel requests when loading modules on demand</span>      <span class="token literal-property property">maxInitialRequests</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// Maximum number of parallel requests at an entry point</span>      <span class="token literal-property property">automaticNameDelimiter</span><span class="token operator">:</span> <span class="token string">'~'</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">vendors</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\/]node_modules[\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>          <span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>          <span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>For more information, refer to the <a href="https://webpack.js.org/plugins/split-chunks-plugin/">webpack-split-chunks-plugin documentation</a>.</p><hr><h2><span id="performance-optimization-cdn">Performance Optimization - CDN</span></h2><p>CDN, or Content Delivery Network, refers to a network of interconnected servers strategically placed to deliver content to users efficiently. It ensures faster and more reliable delivery of resources such as music, images, videos, applications, and other files by utilizing servers closest to each user, providing high performance, scalability, and low-cost content delivery.</p><p>In development, CDN is typically used in two ways:</p><ul><li>All static resources are bundled and stored on a CDN server, and users load resources exclusively through the CDN.</li><li>Some third-party resources are hosted on CDN servers.</li></ul><p>Utilizing a Content Delivery Network (CDN) is a highly effective performance optimization strategy, especially within Webpack. CDN accelerates website loading speed, reduces server load, and enhances user experience. Here’s how you can configure and use CDN in Webpack:</p><h3><span id="using-cdn-for-third-party-libraries">Using CDN for Third-Party Libraries</span></h3><p>Integrate third-party libraries used in your project (such as React, Vue, jQuery, etc.) through CDN links directly in the HTML file:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/react@version/dist/react.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/react-dom@version/dist/react-dom.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="configuring-externals-in-webpack">Configuring Externals in Webpack</span></h3><p>In your Webpack configuration, utilize the <code>externals</code> field to inform Webpack about externally referenced modules that shouldn’t be bundled:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...other configurations</span>  <span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">react</span><span class="token operator">:</span> <span class="token string">'React'</span><span class="token punctuation">,</span>    <span class="token string-property property">'react-dom'</span><span class="token operator">:</span> <span class="token string">'ReactDOM'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Then, include the CDN links in the HTML file using script tags:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/react@version/dist/react.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/react-dom@version/dist/react-dom.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="configuring-cdns-publicpath">Configuring CDN’s publicPath</span></h3><p>In the Webpack <code>output</code> field, set the <code>publicPath</code> to specify the URL prefix for resource imports, typically set to the CDN’s address:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...other configurations</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...other output configurations</span>    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">'https://cdn.example.com/'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This way, during Webpack build, all resource paths will be prefixed with the CDN’s address.</p><h2><span id="performance-optimization-extracting-css-files">Performance Optimization - Extracting CSS Files</span></h2><p>Extracting CSS files from JavaScript bundles is a common performance optimization strategy. This approach reduces the size of JavaScript files, speeds up page loading, and allows browsers to download CSS and JavaScript files in parallel, enhancing loading performance. In Webpack, you can achieve this using the <code>mini-css-extract-plugin</code> plugin.</p><h3><span id="webpack-configuration">Webpack Configuration</span></h3><p>In your Webpack configuration file, include the <code>mini-css-extract-plugin</code> plugin and configure the <code>module.rules</code> to handle CSS files:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...other configurations</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token comment">// Additional CSS loaders like postcss-loader and sass-loader can be added here</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'styles.css'</span><span class="token punctuation">,</span> <span class="token comment">// Filename for the extracted CSS file</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="including-css-files">Including CSS Files</span></h3><p>In your JavaScript files or entry point file, import the CSS file:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'./styles.css'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Alternatively, in the HTML file, use the link tag to include the extracted CSS file:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>styles.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="performance-optimization-bundling-file-naming-hash-contenthash-chunkhash">Performance Optimization - Bundling File Naming (Hash, ContentHash, ChunkHash)</span></h2><p>In Webpack, how files are named during bundling is a crucial performance optimization strategy. Proper naming ensures that browsers can cache files correctly, avoiding unnecessary network requests and improving application loading speed. Here are three common bundling file naming techniques: Hash, ContentHash, and ChunkHash.</p><h3><span id="hash">Hash</span></h3><p>Hash is generated based on file content. When file content changes, its corresponding hash value also changes. In Webpack, you can use the <code>[hash]</code> placeholder to represent the hash value.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'bundle.[hash].js'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="contenthash">ContentHash</span></h3><p>ContentHash is generated based on file content as well, but unlike Hash, it’s solely influenced by file content and remains unaffected by file name or path changes. In Webpack, you can use the <code>[contenthash]</code> placeholder to represent the ContentHash value.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'bundle.[contenthash].js'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="chunkhash">ChunkHash</span></h3><p>ChunkHash is generated based on module content. Different module contents result in different ChunkHash values. In Webpack, you can use the <code>[chunkhash]</code> placeholder to represent the ChunkHash value.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'[name].[chunkhash].js'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="performance-optimization-implementing-tree-shaking-in-webpack">Performance Optimization - Implementing Tree Shaking in Webpack</span></h2><p>JavaScript Tree Shaking:</p><p>Tree Shaking in JavaScript originates from the rollup bundler, a build tool. It relies on the static syntax analysis of ES Modules (no code execution) to determine module dependencies.</p><p>Webpack 2 introduced native support for ES2015 modules, enhancing tree shaking capabilities. Webpack 4 extended this ability and introduced the <code>sideEffects</code> property in package.json to indicate which files have no side effects, allowing webpack to safely remove unused code.</p><p>In Webpack 5, partial CommonJS tree shaking support was introduced.</p><p><a href="https://github.com/webpack/changelog-v5#commonjs-tree-shaking">CommonJS Tree Shaking</a></p><h3><span id="implementing-tree-shaking-in-javascript">Implementing Tree Shaking in JavaScript</span></h3><p>Webpack implements Tree Shaking through two methods:</p><ul><li><strong>usedExports:</strong> Marking certain functions as used and optimizing them using Terser.</li><li><strong>sideEffects:</strong> Skipping entire modules/files and checking if they have side effects.</li></ul><h3><span id="tree-shaking-for-css">Tree Shaking for CSS</span></h3><p>Tree Shaking for CSS involves using additional plugins. While PurifyCss was used previously, it’s no longer maintained. An alternative is PurgeCSS, a tool for removing unused CSS.</p><hr><p><strong>Note:</strong> This translation includes placeholder strings like <code>[hash]</code>, <code>[contenthash]</code>, and <code>[chunkhash]</code> to represent dynamic values. Please replace these placeholders with appropriate values based on your specific use case.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;introduction&quot;&gt;Introduction&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Let’s talk about why optimization is necessary. If your project is small and builds </summary>
      
    
    
    
    <category term="webpack" scheme="http://home.hzlssb.com/categories/webpack/"/>
    
    
    <category term="webpack" scheme="http://home.hzlssb.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>輕鬆理解 Ajax 與跨來源請求</title>
    <link href="http://home.hzlssb.com/2017/08/27/ajax-and-cors/"/>
    <id>http://home.hzlssb.com/2017/08/27/ajax-and-cors/</id>
    <published>2017-08-27T14:12:00.000Z</published>
    <updated>2023-10-15T08:40:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>一般來說在學習寫網頁的時候，最先碰到的會是 HTML 與 CSS，負責把版面刻出來以及美化版面，當基礎打穩之後，會開始學習 JavaScript，試著做出一點互動性的效果。而「互動」除了使用者跟瀏覽器的互動以外，別忘了還有 Client 端跟 Server 端的互動，也就是必須要學會從瀏覽器用 JavaScript 跟後端 Server 拿資料，否則你的網頁資料都只能是寫死的。</p><p>這篇的主要預設讀者是網頁前端的初學者，希望能讓本來不太理解怎麼跟 Server 交換資料或是怎麼串 APi 的讀者看完之後，能夠更了解該怎麼跟後端串接。</p><span id="more"></span><h2><span id="先從舉例開始">先從舉例開始</span></h2><p>在開始之前，我們可以先想想一個問題：</p><blockquote><p>為什麼前端必須跟後端交換資料？</p></blockquote><p>其實這跟你做的網頁類型有關，假如說你今天做的是一個官方網站，很可能整個網站都是靜態的，只要 HTML 跟 CSS 就可以了，並不需要跟後端 Server 拿資料。</p><p>那我們先假設今天要做的是一個可以瀏覽現在 Twitch 實況列表的網頁好了，如下圖。</p><p><img src="/img/ajax/twitch.png" alt></p><p>如果這個網頁不跟後端拿資料，就代表說網頁的內容都是固定的，無論什麼時候看都一樣。可是這樣的話就不對了嘛，因為這個網頁的目標是顯示出「現在有在開實況的頻道」，所以內容是會跟著改變的。</p><p>既然會跟著改變，就必須不斷的去更新資料，從 Server 那邊拿資料回來，接著在前端處理過後顯示。</p><p>已經確認有拿資料的必要性之後，就可以問自己兩個問題：</p><ol><li>要跟誰拿資料？</li><li>要怎麼拿資料？</li></ol><p>第一個問題，很明顯的就是跟 Twitch，因為 Twitch 才有你要的這些資料嘛！</p><p>那第二個問題，要怎麼拿資料呢？就必須透過 Twitch API 了。</p><h2><span id="api">API</span></h2><p>什麼是 API？你可能已經聽過很多次這個名詞，但還是不知道是什麼。先來講講它的全名吧，它的全名是「Application Programming Interface」，中文翻作應用程式介面。</p><p>你可能會想說這是什麼鬼東西，怎麼中文英文我都看不懂在幹嘛。但其實這幾個字裡面，最重要的是「介面」兩個字。</p><p>介面是什麼？介面就是拿來串接用的，我舉一個例子你就知道了。</p><p>電腦上不是有一個 USB 插槽嗎？然後你只要是看到市面上有賣 USB 隨身碟的，都可以買來以後插到 USB 插槽，你的電腦就可以讀取得到。你有想過為什麼嗎？明明就是不同廠商做的東西，可是卻都可以讀得到、都可以插到 USB 插槽裡面。</p><p>因為有一項標準叫做 USB 介面，當這套標準訂出來以後，所有廠商只要按照這一套標準來開發，就可以保證能夠連接電腦跟 USB 隨身碟。</p><p>API 也是這樣，只是變成程式跟程式之間的串接。例如說今天我寫程式需要讀取檔案好了，我要怎麼讀取檔案？讀取檔案是作業系統提供的功能，因此我可以去串接「讀取檔案的 API」，就可以在我的程式裡面也使用這個功能了。</p><p>再多舉幾個例子你可能會更有感覺。</p><p>例如說今天我想要讓我的網頁能夠用 Facebook 登入，那要怎麼辦？我就要去串接「Facebook 提供的 API」，就等於說是 Facebook 向外提供給大家的一套介面、一套標準，任何想要接入 Facebook 服務的開發者們，都可以遵循著那套規範拿到自己想要的資料，這個東西就叫做 API。</p><p>或是你可能今天是一個飯店管理系統的開發者，你們公司做了一套給飯店用的 ERP，可以管理飯店的訂房狀態等等，就能知道說現在有哪些房間是空的。</p><p>而這些資料如果只有自己用太可惜了，於是公司決定把這些資料提供給大型訂房網站，在那些網站上能夠即時顯示這間飯店的房間狀況。所以就必須交換資料，你要提供一個「查詢房間情形的 API」給其他網站，讓他們能夠去串接，才能獲得這些資訊。</p><p>講到這邊，大家應該對 API 已經有一些 sense 了，我再多舉幾個例子：</p><ol><li>我想要抓到 flickr 上面的照片，所以我要去串接 flickr 的 API</li><li>Google 要開放讓其他 App 也能用 Google 登入驗證，所以 Google 要提供「Google 登入 API」</li><li>我要抓 Twitch 上面現在有哪些頻道，所以要串 Twitch API</li></ol><h2><span id="api-documentation">API Documentation</span></h2><p>既然已經知道 API 是什麼了，也知道要串接 API，那下一個問題就是「那要怎麼串呢？」</p><p>剛剛前面有提過檔案存取的例子，其實這個比較像是呼叫作業系統或是程式語言的函式庫提供的 Function，而這些 Function 你通常都可以在官方文件上查到更詳細的說明，例如說 Node.js 的讀取檔案：</p><p><img src="/img/ajax/fs.png" alt></p><p>（來源：<a href="https://nodejs.org/api/fs.html#fs_fs_readdir_path_options_callback%EF%BC%89">https://nodejs.org/api/fs.html#fs_fs_readdir_path_options_callback）</a></p><p>上面就有寫說你應該呼叫哪一個 Function，應該傳入哪些參數。</p><p>API 的串接也是一樣，一定要有文件你才知道怎麼串，不然根本串不起來，因為你連要傳什麼參數都不知道。</p><p>我們可以先來看看<a href="https://dev.twitch.tv/docs/v5/guides/using-the-twitch-api/">Twitch API 文件</a>是怎麼寫的。</p><p>裡面說明了你必須要有一個<code>Client ID</code>，然後 API Root 的 URL 是 <code>https://api.twitch.tv/kraken</code> 等等，這些都是與 API 相關的基本資訊。如果你在左側欄隨便點一個 API，會看到個別 API 的詳細資訊：</p><p><img src="/img/ajax/twitch2.png" alt></p><p>這邊就有寫說網址是什麼，你應該傳的參數是什麼等等，下面還有附上參考範例，這就是一個很完整的 API 文件。</p><p>通常在寫網頁的時候，我們都會直接講 API，但其實我們指的是 Web API，也就是透過網路來傳輸的 API。那有沒有非 Web API 呢？有，像我們前面提到的跟作業系統要讀檔的 API，就都是在本機底下執行的，沒有透過任何網路。</p><p>不過這其實也不用太在意，反正大家都習慣講 API，聽得懂就好。</p><p>現在有了 API 文件，我們就有了所有我們需要的資訊。以上面這個 Twitch 的例子來講，我們只要能夠發送 Request 到<code>https://api.twitch.tv/kraken/games/top?client_id=xxx</code>，Twitch 就會傳回目前最熱門的遊戲列表。</p><p>我們已經把問題的範圍一步步給縮小了，一開始是「要怎麼跟 Twitch 拿資料」，現在則更細的切分為：「要怎麼利用 JavaScript 發送 Reuqest」</p><h2><span id="ajax">Ajax</span></h2><p>要在瀏覽器上面發送 Request，必須應用到一種技術叫做 Ajax，全名是「Asynchronous JavaScript and XML」，重點在於<code>Asynchronous</code>這個單字，非同步。</p><p>在講什麼是非同步之前，就要先來提一下什麼是同步。你原本寫的 JavaScript 就幾乎都是同步執行的。意思是他執行到某一行的時候，會等這行執行完畢，才執行到下一行，確保執行順序。</p><p>也就是說下面這段程式碼，最後一行需要等很長一段時間才能執行到：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">10000000</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 做一些耗時的操作</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 等很久才被執行到</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'done'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看起來滿有道理的，程式本來不就是一行一行執行的嗎？可是如果今天牽涉到網路操作的話，大家可以思考看看下面這個例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 假設有個發送 Request 的函式叫做 sendRequest</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token string">'https://api.twitch.tv/kraken/games/top?client_id=xxx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 等很久才被執行到</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>當 JavaScript 執行到<code>sendRequest</code>的時候，由於是同步的，就會等待 Response 回來才繼續做事。換句話說，在 Response 還沒回來之前，整個 JavaScript 引擎是不會執行任何東西的！很可怕對吧，你點任何有牽涉到 JavaScript 的東西，都不會有反應，因為 JavaScript 還在等 Response 回來。</p><p>所以呢，像是這種已經預期到可能非常耗時間，非常不穩定的操作，就不能用同步的方式來執行，而是要用非同步。</p><p>非同步是什麼意思呢？就是執行完之後就不管它了，不等結果回來就繼續執行下一行：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 假設有個發送 Request 的函式叫做 sendRequest</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token string">'https://api.twitch.tv/kraken/games/top?client_id=xxx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 上面 Request 發送完之後就執行到這一行，所以 result 不會有東西</span><span class="token comment">// 因為 Response 根本沒有回來</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這邊需要特別注意的是「非同步的 Function 不能直接透過 return 把結果傳回來」，為什麼？因為像上面這個例子，它發送 Request 之後就會執行到下一行了，這個時候根本就還沒有 Response，是要回傳什麼？</p><p>那怎麼辦呢？先聽我舉個很常見的小例子吧！</p><p>我之前在新加坡的 Food Court 吃飯的時候，那邊每一張桌子上面都會有桌號。你去點餐的時候，只要跟老闆講說你坐哪一桌，等餐點完成之後老闆就會自己主動送過來。</p><p>所以我不需要站在店家門口等，我只要在位子上繼續坐我的事情，反正餐點好了之後老闆會送過來。</p><p>非同步的概念也是這樣，我發送 Request 之後（我點餐之後），我不用等 Response 回來（不用等老闆做好），可以繼續做自己的事，等<br>Response 回來之後（等餐點做好之後），會自己幫我把結果送過來（老闆會自己送過來）。</p><p>在點餐的例子中，老闆可以透過桌號知道應該把資料送到哪邊，那在 JavaScript 裡面呢？可以透過 Function！而這個 Function，我們就稱作 Callback Function，回呼函式。</p><p>當非同步的操作完成時，就可以呼叫這個 Function，並且把資料帶進來。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 假設有個發送 Request 的函式叫做 sendRequest</span><span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token string">'https://api.twitch.tv/kraken/games/top?client_id=xxx'</span><span class="token punctuation">,</span> callMe<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">callMe</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 或者寫成匿名函式</span><span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token string">'https://api.twitch.tv/kraken/games/top?client_id=xxx'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>現在你就知道為什麼網路的操作是非同步，以及什麼是 callback function 了。</p><h2><span id="xmlhttprequest">XMLHttpRequest</span></h2><p>方才提到 Ajax、非同步以及 callback function 的概念，但還是沒講到要怎麼發送 Request，只寫了一個假的<code>sendRequest</code>函式當作參考而已。</p><p>要發送 Request 的話，就要透過瀏覽器幫我們準備好的一個物件，叫做<code>XMLHttpRequest</code>，範例程式碼如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.twitch.tv/kraken/games/top?client_id=xxx</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Success!</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的<code>request.onload</code>其實就是在指定說當資料回來的時候，要用哪一個 function 去處理。</p><p>有了上面這一段程式碼之後，你終於大功告成，終於可以串接 Twitch API，從那邊拿資料下來了！真是可喜可賀，從此之後，你就跟「串接 API」這個技能過著幸福快樂的生活…</p><p>才怪。</p><h2><span id="same-origin-policy">Same Origin Policy</span></h2><p>正當你以為自己已經對串接 API 駕輕就熟，想說去串接別的 API 試試看好了的時候，才發現一串就出問題了：</p><p><img src="/img/ajax/cors1.png" alt></p><pre class="line-numbers language-none"><code class="language-none">XMLHttpRequest cannot load http:&#x2F;&#x2F;odata.tn.edu.tw&#x2F;ebookapi&#x2F;api&#x2F;getOdataJH&#x2F;?level&#x3D;all. No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;null&#39; is therefore not allowed access.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>咦？為什麼會有這個錯誤呢？</p><p>其實是瀏覽器因為安全性的考量，有一個東西叫做<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Same_origin_policy_for_JavaScript">同源政策</a>，Same-origin policy。</p><p>意思就是說如果你現在這個網站的跟你要呼叫的 API 的網站「不同源」的時候，瀏覽器一樣會幫你發 Request，但是會把 Response 給擋下來，不讓你的 JavaScript 拿到並且傳回錯誤。</p><p>什麼是不同源呢？其實你想簡單一點，只要是 Domain 不一樣就是不同源，或者是一個用<code>http</code>一個用<code>https</code>也是不同源，端口號不一樣也是不同源。</p><p>所以如果你是接別人 API 的話，大多數情形都是不同源的。</p><p>這邊我想再強調一點，「你的 Request 還是有發出去的」，而且瀏覽器也「確實有收到 Response」，重點是「瀏覽器因為同源政策，不把結果傳回給你的 JavaScript」。如果沒有瀏覽器的話其實就沒有這些問題，你愛發給誰就發給誰，不管怎樣都拿得到 Response。</p><p>好，既然剛剛說了不同源會被擋下來，那 Twitch API 不是也不同源嗎，是怎麼串接成功的？</p><h2><span id="cors">CORS</span></h2><p>大家都知道其實在不同源之間互相傳輸資料是很常有的事情，像我們串接 Twitch API 就是，我們怎麼可能跟 Twitch API 在同一個 Domain 底下呢？</p><p>因此，同源政策的確是規範非同源就被擋下來，但與此同時其實又有另外一個規範，是說：「如果你想在不同 origin 之間傳輸資料的話，你應該怎麼做」，這規範就叫做 CORS。</p><p>CORS，全名為 Cross-Origin Resource Sharing，跨來源資源共用。</p><p>這套規範跟你說，如果你想開啟跨來源 HTTP 請求的話，Server 必須在 Response 的 Header 裡面加上<code>Access-Control-Allow-Origin</code>。</p><p>這個字段你應該不陌生才對，覺得陌生的可以拉回去上面看，剛剛的錯誤訊息其實就有講到這一個 Header。</p><p>當瀏覽器收到 Response 之後，會先檢查<code>Access-Control-Allow-Origin</code>裡面的內容，如果裡面有包含現在這個發起 Request 的 Origin 的話，就會允許通過，讓程式順利接收到 Response。</p><p>如果你打開 Devtool 仔細看一開始我們發給 Twitch 的 Request，你會發現 Response 的 Header 大概是長這樣：</p><pre class="line-numbers language-none"><code class="language-none">Content-Type: application&#x2F;jsonContent-Length: 71Connection: keep-aliveServer: nginxAccess-Control-Allow-Origin: *Cache-Control: no-cache, no-store, must-revalidate, privateExpires: 0Pragma: no-cacheTwitch-Trace-Id: e316ddcf2fa38a659fa95af9012c9358X-Ctxlog-Logid: 1-5920052c-446a91950e3abed21a360bd5Timing-Allow-Origin: https:&#x2F;&#x2F;www.twitch.tv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重點是這一行：<code>Access-Control-Allow-Origin: *</code>，星號就代表萬用字元，意思是任何一個 Origin 都接受。所以當瀏覽器接收到這個 Response 之後，比對目前的 Origin 符合<code>*</code>這個規則，檢驗通過，允許我們接受跨來源請求的回應。</p><p>除了這個 Header 以外，其實還有其他的可以用，例如說<code>Access-Control-Allow-Headers</code>跟<code>Access-Control-Allow-Methods</code>，就可以定義接受哪些 Request Header 以及接受哪些 Method。</p><p>總結一下，如果你想要發起跨來源 HTTP 請求並且順利收到回應的話，需要確保 Server 端有加上<code>Access-Control-Allow-Origin</code>，不然 Response 會被瀏覽器給擋下來並且顯示出錯誤訊息。</p><h2><span id="preflight-request">Preflight Request</span></h2><p>還記得 Twitch 的 API 文件嗎？裡面需要帶一個<code>client-id</code>的參數，而文件裡面寫說你可以帶在 GET 的參數上面，也可以帶在 Header 裡，我們來試試看帶在 Header 裡會怎樣吧！打開 Devtool，你會看到一個神奇的現象：</p><p><img src="/img/ajax/cors2.png" alt></p><p>咦？我明明只發了一個 Request，怎麼變兩個了？而且第一個的 Method 居然是<code>OPTIONS</code>。只是多加了一個 Header 就多了一個 Request，是為什麼呢？</p><p>其實這又跟上面講的 CORS 有關了，CORS 把 Request 分成兩種，一種是簡單請求（simple requests）。什麼是簡單請求呢？其實定義有滿長一串的，我認為有需要用到的時候再看就好，但總之如果你沒有加任何自定義的 Header，而且又是 GET 的話，絕對是簡單請求（這個夠簡單了吧）</p><p>反之呢，如果你有加一些自定義的 Header，例如說我們剛剛加的<code>Client-ID</code>，這個 Request 就絕對不是簡單請求。</p><p>（定義可參考：<a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Access_control_CORS#%E7%B0%A1%E5%96%AE%E8%AB%8B%E6%B1%82">MDN: 簡單請求</a>）</p><p>從上述分類可知，我們剛剛發起的 Request 因為有帶了 Custom header，所以不會是簡單請求，那為什麼會多一個 Request 呢？</p><p>這一個 Request 叫做 Preflight Request，中文翻作「預檢請求」，因為非簡單請求可能會帶有一些使用者資料，因此會先透過 Preflight Request 去確認後續的請求能否送出。</p><p>如果這個 Preflight Request 沒有過的話，真的 Request 也就不會發送了，這就是預檢請求的目的。</p><p>我舉一個例子，你就會知道為什麼需要這個 Preflight Request 了。</p><p>假設今天某個 Server 提供了一個 API 網址叫做：<code>https://example.com/data/16</code>，你只要對它發送 GET，就能夠拿到 id 是 16 的資料，只要對它發送 DELETE，就可以把這筆資料刪除。</p><p>如果今天沒有 Preflight Request 這個機制的話，我就可以在隨便一個 Domain 的網頁上面發送一個 DELETE 的 Request 給這個 API。剛剛我有強調說瀏覽器的 CORS 機制，還是會幫你發送 Request，但只是 Response 被瀏覽器擋住而已。</p><p>因此呢，儘管沒有 Response，但是 Server 端的確收到了這個 Request，因此就會把這筆資料給刪除。</p><p>如果有 Preflight Request 的話，在發送出去收到結果的時候，就會知道這個 API 並沒有提供 CORS，因此真的 DELETE 請求就不會送出，到這邊就結束了。</p><p>先用一個 OPTIONS 的請求去確認之後的 Request 能不能送出，這就是 Preflight Request 的目的。</p><h2><span id="jsonp">JSONP</span></h2><p>最後來講一下 JSONP，這是跨來源請求除了 CORS 以外的另外一種方法，全名叫做：JSON with Padding。</p><p>還記得一開始提到的同源政策吧？仔細思考一下會發現，其實有些東西是不受同源政策限制的，例如說<code>&lt;script&gt;</code>這個 Tag，我們不是常常引用 CDN 或是 Google Analytics 之類的第三方套件嗎？網址都是其他 Domain 的，但是卻能正常載入。</p><p>JSONP 就是利用<code>&lt;script&gt;</code>的這個特性來達成跨來源請求的。</p><p>今天先想像你有一段 HTML 長這樣：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">'test'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很好懂的一段程式碼，我就不多做解釋了。那如果今天把上面那一段換成一串網址呢？</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://another-origin.com/api/games<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果<code>https://another-origin.com/api/games</code>這個網址返回的內容就是剛剛的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那我不就一樣可以拿到資料了嗎？而且這些資料還是 Server 端控制的，所以 Server 可以給我任何資料。但是這樣用全域變數其實不太好，我們可以借用剛剛的 Callback Function 的概念，改成這樣：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token function">receiveData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">'test'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">function</span> <span class="token function">receiveData</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以 JSONP 是什麼？JSONP 其實就是透過上面這種形式，利用<code>&lt;script&gt;</code>裡面放資料，透過指定好的 function 把資料給帶回去。你只要把第一段的<code>&lt;script&gt;</code>那邊想成是 Server 的回傳值，你就可以理解了。</p><p>實務上在操作 JSONP 的時候，Server 通常會提供一個<code>callback</code>的參數讓 client 端帶過去。Twitch API 有提供 JSONP 的版本，我們可以直接來看範例：</p><p>URL: <code>https://api.twitch.tv/kraken/games/top?client_id=xxx&amp;callback=aaa&amp;limit=1</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">"_total"</span><span class="token operator">:</span><span class="token number">1069</span><span class="token punctuation">,</span><span class="token string-property property">"_links"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"self"</span><span class="token operator">:</span><span class="token string">"https://api.twitch.tv/kraken/games/top?limit=1"</span><span class="token punctuation">,</span><span class="token string-property property">"next"</span><span class="token operator">:</span><span class="token string">"https://api.twitch.tv/kraken/games/top?limit=1\u0026offset=1"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"top"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string-property property">"game"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"name"</span><span class="token operator">:</span><span class="token string">"Dota 2"</span><span class="token punctuation">,</span><span class="token string-property property">"popularity"</span><span class="token operator">:</span><span class="token number">63361</span><span class="token punctuation">,</span><span class="token string-property property">"_id"</span><span class="token operator">:</span><span class="token number">29595</span><span class="token punctuation">,</span><span class="token string-property property">"giantbomb_id"</span><span class="token operator">:</span><span class="token number">32887</span><span class="token punctuation">,</span><span class="token string-property property">"box"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"large"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-boxart/Dota%202-272x380.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"medium"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-boxart/Dota%202-136x190.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"small"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-boxart/Dota%202-52x72.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"template"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-boxart/Dota%202-&#123;width&#125;x&#123;height&#125;.jpg"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"logo"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"large"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-logoart/Dota%202-240x144.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"medium"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-logoart/Dota%202-120x72.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"small"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-logoart/Dota%202-60x36.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"template"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-logoart/Dota%202-&#123;width&#125;x&#123;height&#125;.jpg"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"_links"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"localized_name"</span><span class="token operator">:</span><span class="token string">"Dota 2"</span><span class="token punctuation">,</span><span class="token string-property property">"locale"</span><span class="token operator">:</span><span class="token string">"zh-tw"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"viewers"</span><span class="token operator">:</span><span class="token number">65243</span><span class="token punctuation">,</span><span class="token string-property property">"channels"</span><span class="token operator">:</span><span class="token number">373</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>URL: <code>https://api.twitch.tv/kraken/games/top?client_id=xxx&amp;callback=receiveData&amp;limit=1</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">receiveData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">"_total"</span><span class="token operator">:</span><span class="token number">1067</span><span class="token punctuation">,</span><span class="token string-property property">"_links"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"self"</span><span class="token operator">:</span><span class="token string">"https://api.twitch.tv/kraken/games/top?limit=1"</span><span class="token punctuation">,</span><span class="token string-property property">"next"</span><span class="token operator">:</span><span class="token string">"https://api.twitch.tv/kraken/games/top?limit=1\u0026offset=1"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"top"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string-property property">"game"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"name"</span><span class="token operator">:</span><span class="token string">"Dota 2"</span><span class="token punctuation">,</span><span class="token string-property property">"popularity"</span><span class="token operator">:</span><span class="token number">63361</span><span class="token punctuation">,</span><span class="token string-property property">"_id"</span><span class="token operator">:</span><span class="token number">29595</span><span class="token punctuation">,</span><span class="token string-property property">"giantbomb_id"</span><span class="token operator">:</span><span class="token number">32887</span><span class="token punctuation">,</span><span class="token string-property property">"box"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"large"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-boxart/Dota%202-272x380.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"medium"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-boxart/Dota%202-136x190.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"small"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-boxart/Dota%202-52x72.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"template"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-boxart/Dota%202-&#123;width&#125;x&#123;height&#125;.jpg"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"logo"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"large"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-logoart/Dota%202-240x144.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"medium"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-logoart/Dota%202-120x72.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"small"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-logoart/Dota%202-60x36.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"template"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-logoart/Dota%202-&#123;width&#125;x&#123;height&#125;.jpg"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"_links"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"localized_name"</span><span class="token operator">:</span><span class="token string">"Dota 2"</span><span class="token punctuation">,</span><span class="token string-property property">"locale"</span><span class="token operator">:</span><span class="token string">"zh-tw"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"viewers"</span><span class="token operator">:</span><span class="token number">65622</span><span class="token punctuation">,</span><span class="token string-property property">"channels"</span><span class="token operator">:</span><span class="token number">376</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有發現了嗎？它就是透過你帶過去的<code>callback</code>這個參數當作函式名稱，把 JavaScript 物件整個傳到 Function 裡面，你就可以在 Function 裡面拿到資料。</p><p>結合起來會變這樣：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://api.twitch.tv/kraken/games/top?client_id=xxx&amp;callback=receiveData&amp;limit=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">function</span> <span class="token function">receiveData</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用 JSONP，也可以存取跨來源的資料。但 JSONP 的缺點就是你要帶的那些參數永遠都只能用附加在網址上的方式（GET）帶過去，沒辦法用 POST。</p><p>如果能用 CORS 的話，還是應該優先考慮 CORS。</p><h2><span id="總結">總結</span></h2><p>今天這篇文章的內容就是從抓資料這件事情開始，一步步告訴你應該去哪裡抓？應該怎麼抓？用 API 抓，那什麼是 API？怎麼在 JavaScript 裡面呼叫 Web API？怎麼樣存取跨來源的資料？</p><p>一般來說，跟前端抓資料有關的東西我基本上都提到了，不過有個遺珠之憾是沒有提到<a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</a>，這是比較新的標準，也是拿來抓資料用的，MDN 上面的介紹是：</p><blockquote><p>The Fetch API provides an interface for fetching resources (including across the network). It will seem familiar to anyone who has used XMLHttpRequest, but the new API provides a more powerful and flexible feature set.</p></blockquote><p>有興趣的讀者們可以自己去看一下。</p><p>希望大家看完這篇之後，會更了解怎麼樣串接後端 API，以及串接的時候可能會碰到哪些困難。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;一般來說在學習寫網頁的時候，最先碰到的會是 HTML 與 CSS，負責把版面刻出來以及美化版面，當基礎打穩之後，會開始學習 JavaScript，試著做出一點互動性的效果。而「互動」除了使用者跟瀏覽器的互動以外，別忘了還有 Client 端跟 Server 端的互動，也就是必須要學會從瀏覽器用 JavaScript 跟後端 Server 拿資料，否則你的網頁資料都只能是寫死的。&lt;/p&gt;
&lt;p&gt;這篇的主要預設讀者是網頁前端的初學者，希望能讓本來不太理解怎麼跟 Server 交換資料或是怎麼串 APi 的讀者看完之後，能夠更了解該怎麼跟後端串接。&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="http://home.hzlssb.com/categories/Front-end/"/>
    
    
    <category term="Ajax" scheme="http://home.hzlssb.com/tags/Ajax/"/>
    
    <category term="JavaScript" scheme="http://home.hzlssb.com/tags/JavaScript/"/>
    
    <category term="Front-end" scheme="http://home.hzlssb.com/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>Understanding Ajax and Cross-Origin Requests Easily</title>
    <link href="http://home.hzlssb.com/2017/08/27/en/ajax-and-cors/"/>
    <id>http://home.hzlssb.com/2017/08/27/en/ajax-and-cors/</id>
    <published>2017-08-27T14:12:00.000Z</published>
    <updated>2023-10-15T08:40:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="introduction">Introduction</span></h2><p>When learning to write web pages, you usually start with HTML and CSS, which are responsible for creating and beautifying the layout. Once you have a solid foundation, you start learning JavaScript to create interactive effects. In addition to user and browser interactions, don’t forget about the interaction between the client and server, which means you must learn how to use JavaScript to retrieve data from the backend server. Otherwise, your web page data will be static.</p><p>The main target audience of this article is beginners in web front-end development. I hope that after reading this article, readers who do not understand how to exchange data with the server or how to connect to APIs can have a better understanding of how to connect to the backend.</p><span id="more"></span><h2><span id="lets-start-with-an-example">Let’s start with an example</span></h2><p>Before we begin, let’s consider a question:</p><blockquote><p>Why does the front-end need to exchange data with the backend?</p></blockquote><p>Actually, this depends on the type of web page you are creating. If you are creating an official website, the entire website is likely to be static, and only HTML and CSS are required, without the need to retrieve data from the backend server.</p><p>Let’s assume that today we want to create a web page that can browse the current Twitch live stream list, as shown below.</p><p><img src="/img/ajax/twitch.png" alt></p><p>If this web page does not retrieve data from the backend, it means that the content of the web page is fixed and will remain the same no matter when it is viewed. However, this is not correct because the goal of this web page is to display “channels that are currently live,” so the content will change accordingly.</p><p>Since the content will change, we must continuously update the data, retrieve data from the server, and then display it after processing it on the front-end.</p><p>After confirming the need to retrieve data, we can ask ourselves two questions:</p><ol><li>Who do we retrieve data from?</li><li>How do we retrieve data?</li></ol><p>The answer to the first question is obviously Twitch because Twitch has the data we need!</p><p>As for the second question, we must use the Twitch API.</p><h2><span id="api">API</span></h2><p>What is an API? You may have heard this term many times, but still don’t know what it means. Let’s start with its full name, which is “Application Programming Interface.”</p><p>You may wonder what this is and why I can’t understand it in both Chinese and English. But actually, the most important thing in these few words is the word “interface.”</p><p>What is an interface? An interface is used for connection. I’ll give you an example.</p><p>Isn’t there a USB slot on your computer? As long as you see USB flash drives on the market, you can buy them and plug them into the USB slot, and your computer can read them. Have you ever wondered why? Although they are made by different manufacturers, they can all be read and plugged into the USB slot.</p><p>This is because there is a standard called the USB interface. After this standard was established, as long as all manufacturers develop according to this standard, they can ensure that they can connect to the computer and USB flash drives.</p><p>API is the same, but it becomes a connection between programs. For example, if I need to read a file in my program, how do I read it? Reading files is a function provided by the operating system, so I can connect to the “read file API” and use this function in my program.</p><p>I’ll give you a few more examples. Suppose I want to allow my web page to log in with Facebook. What should I do? I need to connect to the “Facebook API,” which is a set of standards provided by Facebook to everyone who wants to access Facebook services. Any developer who wants to access Facebook services can follow these standards to obtain the data they want. This thing is called an API.</p><p>Or maybe you are a developer of a hotel management system today, and your company has developed an ERP for hotels, which can manage the booking status of hotels and so on, and can know which rooms are empty now.</p><p>If you only use this data yourself, it would be a pity. Therefore, the company decided to provide this data to large booking websites, which can display the room status of this hotel in real-time on those websites. Therefore, data exchange is necessary, and you need to provide a “query room status API” to other websites so that they can connect to it and obtain this information.</p><p>By now, you should have some sense of what an API is. Let me give you a few more examples:</p><ol><li>I want to retrieve photos from Flickr, so I need to connect to the Flickr API.</li><li>Google wants to allow other apps to log in and authenticate with Google, so Google needs to provide the “Google login API.”</li><li>I want to retrieve the channels currently available on Twitch, so I need to connect to the Twitch API.</li></ol><h2><span id="api-documentation">API Documentation</span></h2><p>Now that we know what an API is and that we need to connect to it, the next question is “how do we connect?”</p><p>Earlier, we mentioned an example of file access. This is actually more like calling a function provided by the operating system or a programming language library. You can usually find more detailed information about these functions in the official documentation, such as reading files in Node.js:</p><p><img src="/img/ajax/fs.png" alt></p><p>(Source: <a href="https://nodejs.org/api/fs.html#fs_fs_readdir_path_options_callback">https://nodejs.org/api/fs.html#fs_fs_readdir_path_options_callback</a>)</p><p>Above, it is written which function you should call and what parameters you should pass in.</p><p>API integration is the same. You must have documentation to know how to integrate, otherwise you cannot integrate at all because you don’t even know what parameters to pass.</p><p>Let’s take a look at how the <a href="https://dev.twitch.tv/docs/v5/guides/using-the-twitch-api/">Twitch API documentation</a> is written.</p><p>It explains that you must have a <code>Client ID</code>, and the API Root URL is <code>https://api.twitch.tv/kraken</code>, etc. These are basic information related to the API. If you click on any API in the left column, you will see detailed information about each API:</p><p><img src="/img/ajax/twitch2.png" alt></p><p>Here, it is written what the URL is, what parameters you should pass, etc. There are also reference examples below, which is a very complete API documentation.</p><p>Usually, when writing web pages, we directly talk about APIs, but actually we are referring to Web APIs, which are APIs transmitted through the network. Are there non-Web APIs? Yes, like the file reading API we mentioned earlier, they are all executed locally on the computer without going through any network.</p><p>But this doesn’t really matter, everyone is used to talking about APIs, as long as they can understand it.</p><p>Now that we have the API documentation, we have all the information we need. Using the Twitch example above, as long as we can send a request to <code>https://api.twitch.tv/kraken/games/top?client_id=xxx</code> through JavaScript, Twitch will return the current list of the most popular games.</p><p>We have narrowed down the scope of the problem step by step. At first, it was “how to get data from Twitch”, and now it is divided into: “how to use JavaScript to send a request”.</p><h2><span id="ajax">Ajax</span></h2><p>To send a request on the browser, you must use a technology called Ajax, which stands for “Asynchronous JavaScript and XML”, with the emphasis on the word “Asynchronous”.</p><p>Before talking about what is asynchronous, let’s first mention what is synchronous. Almost all JavaScript you originally wrote is executed synchronously. This means that when it executes to a certain line, it will wait for this line to finish executing before executing the next line, ensuring the execution order.</p><p>That is to say, the last line of the following code needs to wait for a long time to be executed:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">10000000</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Do some time-consuming operations</span><span class="token punctuation">&#125;</span>  <span class="token comment">// Executed after a long time</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'done'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It looks reasonable. Isn’t the program executed line by line? But if it involves network operations, everyone can think about the following example:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Assuming there is a function called sendRequest to send a request</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token string">'https://api.twitch.tv/kraken/games/top?client_id=xxx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Executed after a long time</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>When JavaScript executes <code>sendRequest</code>, because it is synchronous, it will wait for the response to come back before continuing to do anything. In other words, before the response comes back, the entire JavaScript engine will not execute anything! It’s scary, isn’t it? You click on anything related to JavaScript, and there is no response because JavaScript is still waiting for the response.</p><p>Therefore, for operations that are expected to be very time-consuming and unstable, synchronous execution cannot be used, but asynchronous execution must be used.</p><p>What does asynchronous mean? It means that after it is executed, it will not be taken care of, and it will continue to execute the next line without waiting for the result to come back:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Assuming there is a function called sendRequest to send a request</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token string">'https://api.twitch.tv/kraken/games/top?client_id=xxx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// The above request is executed, and then it executes to this line, so result will not have anything</span><span class="token comment">// because the response has not returned yet</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Please note that “asynchronous functions cannot directly return results through return”. Why? Because, as in the example above, after sending a request, the next line will be executed, and at this time, there is no response yet. What should be returned?</p><p>So what should we do? Let me give you a very common example!</p><p>When I was eating in a food court in Singapore, there was a table number on each table. When you order, just tell the boss which table you are sitting at, and the boss will deliver it to you after the meal is ready.</p><p>So I don’t need to stand at the door of the store and wait. I just continue to sit on my own things. Anyway, the boss will deliver it to me after the meal is ready.</p><p>The concept of asynchronous is also like this. After I send a request (after I order), I don’t need to wait for the response to come back (I don’t need to wait for the boss to finish), I can continue to do my own thing. After the response comes back (after the meal is ready), it will help me deliver the result (the boss will deliver it by himself).</p><p>In the ordering example, the boss can know where to send the data through the table number. What about in JavaScript? Through Function! And this function, we call it a Callback Function, a callback function.</p><p>When the asynchronous operation is completed, this function can be called and the data can be brought in.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Assuming there is a function called sendRequest to send a request</span><span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token string">'https://api.twitch.tv/kraken/games/top?client_id=xxx'</span><span class="token punctuation">,</span> callMe<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">callMe</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// Or write it as an anonymous function</span><span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token string">'https://api.twitch.tv/kraken/games/top?client_id=xxx'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Now you know why network operations are asynchronous and what callback functions are.</p><h2><span id="xmlhttprequest">XMLHttpRequest</span></h2><p>Just mentioned the concepts of Ajax, asynchronous, and callback functions, but didn’t say how to send a request, just wrote a fake <code>sendRequest</code> function as a reference.</p><p>To send a request, we need to use an object prepared by the browser called <code>XMLHttpRequest</code>. The sample code is as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.twitch.tv/kraken/games/top?client_id=xxx</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Success!</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <code>request.onload</code> above actually specifies which function to use to handle the data when it comes back.</p><p>With the above code, you have finally succeeded and can finally connect to the Twitch API and get data from there! It’s really gratifying. From now on, you will live a happy life with the skill of “connecting to the API”…</p><p>Not really.</p><h2><span id="same-origin-policy">Same Origin Policy</span></h2><p>Just when you thought you were already familiar with connecting to APIs and wanted to try connecting to other APIs, you found that a problem occurred with just one line:</p><p><img src="/img/ajax/cors1.png" alt></p><pre class="line-numbers language-none"><code class="language-none">XMLHttpRequest cannot load http:&#x2F;&#x2F;odata.tn.edu.tw&#x2F;ebookapi&#x2F;api&#x2F;getOdataJH&#x2F;?level&#x3D;all. No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;null&#39; is therefore not allowed access.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Huh? Why is there this error?</p><p>In fact, for security reasons, the browser has something called the Same-origin policy.</p><p>This means that if the website you are currently on and the API website you want to call are “different sources”, the browser will still help you send the request, but it will block the response, preventing your JavaScript from receiving it and returning an error.</p><p>What is a different source? Simply put, if the domain is different, it is a different source, or if one uses <code>http</code> and the other uses <code>https</code>, or if the port numbers are different, it is also a different source.</p><p>So if you are using someone else’s API, in most cases it will be a different source.</p><p>I want to emphasize here that “your request is still sent”, and the browser “does receive the response”, but the key point is that “due to the same-origin policy, the browser does not pass the result back to your JavaScript”. If there is no browser, there is actually no such problem. You can send it to whoever you want and get the response no matter what.</p><p>Okay, since we just said that different sources will be blocked, how did we successfully connect to the Twitch API?</p><h2><span id="cors">CORS</span></h2><p>As we all know, it is very common to transfer data between different sources, just like we connect to the Twitch API. How can we be under the same domain as the Twitch API?</p><p>Therefore, the same-origin policy does regulate that non-same-origin requests will be blocked, but at the same time, there is another regulation that says: “If you want to transfer data between different origins, what should you do?” This regulation is called CORS.</p><p>CORS, short for Cross-Origin Resource Sharing, is a cross-origin resource sharing protocol.</p><p>This protocol tells you that if you want to open cross-origin HTTP requests, the server must add <code>Access-Control-Allow-Origin</code> to the response header.</p><p>You should be familiar with this field. If you feel unfamiliar, you can go back and look at the error message just now, which actually mentioned this header.</p><p>After the browser receives the response, it will first check the content of <code>Access-Control-Allow-Origin</code>. If it contains the origin of the request that is currently being initiated, it will allow it to pass and allow the program to receive the response smoothly.</p><p>If you carefully check the request we sent to Twitch in the beginning, you will find that the header of the response is roughly like this:</p><pre class="line-numbers language-none"><code class="language-none">Content-Type: application&#x2F;jsonContent-Length: 71Connection: keep-aliveServer: nginxAccess-Control-Allow-Origin: *Cache-Control: no-cache, no-store, must-revalidate, privateExpires: 0Pragma: no-cacheTwitch-Trace-Id: e316ddcf2fa38a659fa95af9012c9358X-Ctxlog-Logid: 1-5920052c-446a91950e3abed21a360bd5Timing-Allow-Origin: https:&#x2F;&#x2F;www.twitch.tv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The key point is this line: <code>Access-Control-Allow-Origin: *</code>, where the asterisk represents a wildcard character, meaning that any origin is accepted. Therefore, when the browser receives this response, it compares the current origin with the <code>*</code> rule, passes the verification, and allows us to accept the response of the cross-origin request.</p><p>In addition to this header, there are actually others that can be used, such as <code>Access-Control-Allow-Headers</code> and <code>Access-Control-Allow-Methods</code>, which can define which request headers and methods are accepted.</p><p>To sum up, if you want to initiate a cross-origin HTTP request and receive a response smoothly, you need to ensure that the server side has added <code>Access-Control-Allow-Origin</code>, otherwise the response will be blocked by the browser and an error message will be displayed.</p><h2><span id="preflight-request">Preflight Request</span></h2><p>Do you still remember Twitch’s API documentation? It requires a <code>client-id</code> parameter, and the document says that you can pass it in the GET parameter or in the header. Let’s try passing it in the header! Open Devtool, and you will see a magical phenomenon:</p><p><img src="/img/ajax/cors2.png" alt></p><p>Huh? I clearly only sent one request, why did it become two? And the method of the first one is actually <code>OPTIONS</code>. Why did adding one header result in an extra request?</p><p>In fact, this is also related to CORS mentioned above. CORS divides requests into two types, one is a simple request. What is a simple request? There is actually a long definition, which I think you can read when you need it. But in short, if you don’t add any custom headers, and it’s a GET request, it’s definitely a simple request (isn’t this simple enough?).</p><p>On the contrary, if you add some custom headers, such as the <code>Client-ID</code> we just added, this request is definitely not a simple request.</p><p>(Definition reference: <a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Access_control_CORS#%E7%B0%A1%E5%96%AE%E8%AB%8B%E6%B1%82">MDN: Simple Request</a>)</p><p>From the above classification, we know that the request we just initiated is not a simple request because it has a custom header. So why is there an extra request?</p><p>This request is called a Preflight Request, which is used to confirm whether subsequent requests can be sent because non-simple requests may contain some user data.</p><p>If this Preflight Request fails, the real request will not be sent, which is the purpose of the Preflight Request.</p><p>Let me give you an example, and you will know why this Preflight Request is needed.</p><p>Assuming that a server provides an API URL called: <code>https://example.com/data/16</code>, you can get the data with id 16 by sending a GET request to it, and you can delete this data by sending a DELETE request to it.</p><p>If there is no Preflight Request mechanism, I can send a DELETE request to this API on any web page of any domain. As I emphasized earlier, the browser’s CORS mechanism will still help you send the request, but only the response will be blocked by the browser.</p><p>Therefore, even though there is no response, the server did receive this request, so it will delete this data.</p><p>If there is a Preflight Request, when receiving the result of the request, it will know that this API does not provide CORS, so the real DELETE request will not be sent, and it will end here.</p><p>The purpose of the Preflight Request is to use an OPTIONS request to confirm whether the subsequent request can be sent.</p><h2><span id="jsonp">JSONP</span></h2><p>Finally, let’s talk about JSONP, which is another method for cross-origin requests besides CORS, called JSON with Padding.</p><p>Do you remember the same-origin policy mentioned at the beginning? If you think about it carefully, you will find that some things are not restricted by the same-origin policy, such as the <code>&lt;script&gt;</code> tag. Don’t we often refer to third-party packages such as CDN or Google Analytics on web pages? The URLs are all from other domains, but they can be loaded normally.</p><p>JSONP uses this feature of <code>&lt;script&gt;</code> to achieve cross-origin requests.</p><p>Imagine you have an HTML like this:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">'test'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It’s a very easy-to-understand piece of code, so I won’t explain it much. What if you replace the above code with a URL?</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://another-origin.com/api/games<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>If the content returned by <code>https://another-origin.com/api/games</code> is the same as before:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Then can’t I get the data in the same way? And these data are still controlled by the server, so the server can give me any data. But using global variables like this is not very good. We can use the concept of Callback Function just mentioned and change it to this:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token function">receiveData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">'test'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">function</span> <span class="token function">receiveData</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>So what is JSONP? JSONP actually uses the above format to put data in <code>&lt;script&gt;</code> and bring the data back through the specified function. If you think of the first <code>&lt;script&gt;</code> as the server’s return value, you will understand.</p><p>In practice, when operating JSONP, the server usually provides a <code>callback</code> parameter for the client to bring over. The Twitch API provides a JSONP version, and we can directly look at the example.</p><p>URL: <code>https://api.twitch.tv/kraken/games/top?client_id=xxx&amp;callback=aaa&amp;limit=1</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">"_total"</span><span class="token operator">:</span><span class="token number">1069</span><span class="token punctuation">,</span><span class="token string-property property">"_links"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"self"</span><span class="token operator">:</span><span class="token string">"https://api.twitch.tv/kraken/games/top?limit=1"</span><span class="token punctuation">,</span><span class="token string-property property">"next"</span><span class="token operator">:</span><span class="token string">"https://api.twitch.tv/kraken/games/top?limit=1\u0026offset=1"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"top"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string-property property">"game"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"name"</span><span class="token operator">:</span><span class="token string">"Dota 2"</span><span class="token punctuation">,</span><span class="token string-property property">"popularity"</span><span class="token operator">:</span><span class="token number">63361</span><span class="token punctuation">,</span><span class="token string-property property">"_id"</span><span class="token operator">:</span><span class="token number">29595</span><span class="token punctuation">,</span><span class="token string-property property">"giantbomb_id"</span><span class="token operator">:</span><span class="token number">32887</span><span class="token punctuation">,</span><span class="token string-property property">"box"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"large"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-boxart/Dota%202-272x380.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"medium"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-boxart/Dota%202-136x190.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"small"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-boxart/Dota%202-52x72.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"template"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-boxart/Dota%202-&#123;width&#125;x&#123;height&#125;.jpg"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"logo"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"large"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-logoart/Dota%202-240x144.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"medium"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-logoart/Dota%202-120x72.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"small"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-logoart/Dota%202-60x36.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"template"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-logoart/Dota%202-&#123;width&#125;x&#123;height&#125;.jpg"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"_links"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"localized_name"</span><span class="token operator">:</span><span class="token string">"Dota 2"</span><span class="token punctuation">,</span><span class="token string-property property">"locale"</span><span class="token operator">:</span><span class="token string">"zh-tw"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"viewers"</span><span class="token operator">:</span><span class="token number">65243</span><span class="token punctuation">,</span><span class="token string-property property">"channels"</span><span class="token operator">:</span><span class="token number">373</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>URL: <code>https://api.twitch.tv/kraken/games/top?client_id=xxx&amp;callback=receiveData&amp;limit=1</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">receiveData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">"_total"</span><span class="token operator">:</span><span class="token number">1067</span><span class="token punctuation">,</span><span class="token string-property property">"_links"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"self"</span><span class="token operator">:</span><span class="token string">"https://api.twitch.tv/kraken/games/top?limit=1"</span><span class="token punctuation">,</span><span class="token string-property property">"next"</span><span class="token operator">:</span><span class="token string">"https://api.twitch.tv/kraken/games/top?limit=1\u0026offset=1"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"top"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string-property property">"game"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"name"</span><span class="token operator">:</span><span class="token string">"Dota 2"</span><span class="token punctuation">,</span><span class="token string-property property">"popularity"</span><span class="token operator">:</span><span class="token number">63361</span><span class="token punctuation">,</span><span class="token string-property property">"_id"</span><span class="token operator">:</span><span class="token number">29595</span><span class="token punctuation">,</span><span class="token string-property property">"giantbomb_id"</span><span class="token operator">:</span><span class="token number">32887</span><span class="token punctuation">,</span><span class="token string-property property">"box"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"large"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-boxart/Dota%202-272x380.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"medium"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-boxart/Dota%202-136x190.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"small"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-boxart/Dota%202-52x72.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"template"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-boxart/Dota%202-&#123;width&#125;x&#123;height&#125;.jpg"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"logo"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"large"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-logoart/Dota%202-240x144.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"medium"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-logoart/Dota%202-120x72.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"small"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-logoart/Dota%202-60x36.jpg"</span><span class="token punctuation">,</span><span class="token string-property property">"template"</span><span class="token operator">:</span><span class="token string">"https://static-cdn.jtvnw.net/ttv-logoart/Dota%202-&#123;width&#125;x&#123;height&#125;.jpg"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"_links"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"localized_name"</span><span class="token operator">:</span><span class="token string">"Dota 2"</span><span class="token punctuation">,</span><span class="token string-property property">"locale"</span><span class="token operator">:</span><span class="token string">"zh-tw"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"viewers"</span><span class="token operator">:</span><span class="token number">65622</span><span class="token punctuation">,</span><span class="token string-property property">"channels"</span><span class="token operator">:</span><span class="token number">376</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Have you noticed? It passes the <code>callback</code> parameter you brought over as the function name and passes the entire JavaScript object to the Function, so you can get the data inside the Function.</p><p>Combined, it would look like this:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://api.twitch.tv/kraken/games/top?client_id=xxx&amp;callback=receiveData&amp;limit=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">function</span> <span class="token function">receiveData</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using JSONP, you can also access cross-origin data. However, the disadvantage of JSONP is that the parameters you need to pass can only be passed through the URL in a GET request, and cannot be passed through a POST request.</p><p>If CORS can be used, it should be prioritized over JSONP.</p><h2><span id="summary">Summary</span></h2><p>The content of this article starts with the process of fetching data and tells you step by step where to fetch it and how to fetch it. If you want to fetch data using an API, what is an API? How to call Web API in JavaScript? How to access cross-origin data?</p><p>Generally speaking, I have mentioned everything related to fetching data with the front-end, but there is a regret that I did not mention the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</a>, which is a newer standard used to fetch data. The introduction on MDN is:</p><blockquote><p>The Fetch API provides an interface for fetching resources (including across the network). It will seem familiar to anyone who has used XMLHttpRequest, but the new API provides a more powerful and flexible feature set.</p></blockquote><p>Interested readers can check it out for themselves.</p><p>I hope that after reading this article, you will have a better understanding of how to connect to the back-end API and the difficulties you may encounter when connecting.</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;When learning to write web pages, you usually start with HTML and CSS, which are responsible for creating and beautifying the layout. Once you have a solid foundation, you start learning JavaScript to create interactive effects. In addition to user and browser interactions, don’t forget about the interaction between the client and server, which means you must learn how to use JavaScript to retrieve data from the backend server. Otherwise, your web page data will be static.&lt;/p&gt;
&lt;p&gt;The main target audience of this article is beginners in web front-end development. I hope that after reading this article, readers who do not understand how to exchange data with the server or how to connect to APIs can have a better understanding of how to connect to the backend.&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="http://home.hzlssb.com/categories/Front-end/"/>
    
    
    <category term="Ajax" scheme="http://home.hzlssb.com/tags/Ajax/"/>
    
    <category term="JavaScript" scheme="http://home.hzlssb.com/tags/JavaScript/"/>
    
    <category term="Front-end" scheme="http://home.hzlssb.com/tags/Front-end/"/>
    
  </entry>
  
</feed>
