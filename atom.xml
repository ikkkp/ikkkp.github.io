<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Huangzl&#39;s blog</title>
  
  <subtitle>Learning by sharing</subtitle>
  <link href="https://ikkkp.github.io/atom.xml" rel="self"/>
  
  <link href="https://ikkkp.github.io/"/>
  <updated>2024-02-28T02:10:30.087Z</updated>
  <id>https://ikkkp.github.io/</id>
  
  <author>
    <name>Huangzl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FE-interview-guide</title>
    <link href="https://ikkkp.github.io/2024/02/28/FE-interview-guide/"/>
    <id>https://ikkkp.github.io/2024/02/28/FE-interview-guide/</id>
    <published>2024-02-28T02:04:38.000Z</published>
    <updated>2024-02-28T02:10:30.087Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="codewave">CodeWave</span></h1><p>CodeWave: 汇集开发者线下技术会议的导航，链接你与技术界的最新动态和机遇。</p><h2><span id="技术会议主页">技术会议主页</span></h2><h3><span id="国内">国内</span></h3><ul><li><p><a href="http://www.thegiac.com/index.php">GIAC全球互联网架构大会</a> - 集中探讨互联网架构的发展趋势，邀请业内顶尖的架构师分享他们的经验和见解。</p></li><li><p><a href="https://qcon.infoq.cn/">QCon全球软件开发大会</a> - 聚焦软件开发的最新趋势和技术，旨在为软件开发者提供一个学习和交流的平台。</p></li><li><p><a href="https://d2.alibabatech.com/">D2 终端技术大会</a> - 由阿里巴巴主办，专注于前端及移动开发领域的技术创新和实践交流。</p></li><li><p><a href="https://conf.juejin.cn/">稀土开发者大会</a> - 面向广大开发者，分享最前沿的技术动态和开发经验。</p></li><li><p><a href="https://gmtc.infoq.cn/">GMTC全球大前端技术大会</a> - 聚焦大前端领域的最新技术和应用实践，旨在推动前端技术的创新和发展。</p></li><li><p><a href="https://sz2019.archsummit.com/">ArchSummit全球架构师峰会</a> - 针对软件架构领域，邀请知名架构师分享架构设计的最佳实践和经验。</p></li><li><p><a href="https://www.zaozao.run/">前端早早聊大会</a> - 一个面向前端社区的分享和交流平台，旨在促进前端技术和经验的分享。</p></li><li><p><a href="https://node.fequan.com/">VueConf</a> - 面向Vue.js社区的开发者和爱好者，分享Vue.js的最新进展和应用案例。</p></li><li><p><a href="http://cssconf.org/">CssConf</a> - 集中探讨CSS相关的技术、工具和最佳实践，旨在推动CSS技术的发展。</p></li><li><p><a href="https://www.w3.org/2023/06/china-web-forum/">Web前沿技术论坛</a> - 由W3C主办，探讨Web技术的最新标准和发展趋势。</p></li><li><p><a href="http://www.csdisummit.com/">中国软件研发管理行业技术峰会</a> - 聚焦软件研发管理领域，分享管理实践和创新方法。</p></li><li><p><a href="https://devopschina.org/">中国DevOps社区</a>, <a href="https://www.hdb.com/u/bqaf3u.html">近期活动</a> - 专注于DevOps文化和实践的推广，组织相关的活动和交流。</p></li><li><p><a href="https://meetup.elasticsearch.cn/event/index.html">Elastic Meetup - Elastic 官方中文社区定期举办的线下交流活动</a> - 面向Elasticsearch用户和开发者的交流活动，分享使用经验和最佳实践。</p></li><li><p><a href="https://jsworldconference.com/">JS World</a> - 世界上最大的 JavaScript 会议，涵盖 JavaScript 的各个方面，邀请业界知名公司和组织的演讲嘉宾，提供技术更新和案例研究。最近一次举办于 2024.2.28。</p></li><li><p><a href="https://vuejs.amsterdam/">VueJS Amsterdam</a> - 规模最大的 Vue 会议，汇集全球参与者，与 Vue 创作者和维护者互动，建立联系并获得终生难忘的体验。最近一次举办于 2024.2.28。</p></li><li><p><a href="https://us.vuejs.org/">VueConf US</a> - Vue.js 社区组织的年度会议，由 Vue.js 创建者和核心团队主持，聚集全球 Vue.js 开发者和爱好者，分享最新技术和经验。最近一次举办于 2023.5.24。</p></li><li><p><a href="https://reactsummit.com/">React Summit</a>, <a href="https://reactsummit.us/">React Summit US</a> - 全球最大的 React 会议，汇集 React 开发者、工程师和专家，分享 React 相关的技术和行业动态。最近一次举办于 2023.5.24 和 2023.11.13。</p></li><li><p><a href="https://reactlive.nl/">React Live</a> - 与 500 名 React 开发人员一起参加一天的 React 庆典，深入探讨 React 相关的最新主题。最近一次举办于 2023.9.29。</p></li><li><p><a href="https://devworldconference.com/">DEV WORLD</a> - 全球排名第一的开发者大会，提供与 7500 名开发人员面对面交流的机会，涵盖多个技术领域。最近一次举办于 2024.2.29。</p></li><li><p><a href="https://viteconf.org/23/">Vite Conf</a> - 沉浸式互动在线活动，面向前端团队，探讨使用 Vite 构建下一代网络。最近一次举办于 2023.10.5。</p></li><li><p><a href="https://cssday.nl/2023">CSS Day</a> - 高级 CSS 会议，提供轻松氛围和深入的讨论。最近一次举办于 2024.6.8。</p></li><li><p><a href="https://www.fequan.com/">FEday</a> </p></li><li><p><a href="https://www.react-next.com/">ReactNext</a> - 以色列最大的 React 框架会议，汇集本地和国际演讲者，分享高级主题。最近一次举办于 2024.6.24。</p></li><li><p><a href="https://jsheroes.io/">JSHeroes</a> - 非营利性社区组织的会议，汇集全球 JS 和 Web&#x2F;前端开发爱好者，提供演讲和网络活动。最近一次举办于 2024.5.23。</p></li><li><p><a href="https://javascript-conference.com/munich/">iJS</a> - 国际 JavaScript 大会，关注 JavaScript 的最新趋势和变革。最近一次举办于 2023.10.23。</p></li><li><p><a href="https://ng-conf.org/">ng-conf</a> - Angular 社区最大规模的年度技术峰会，邀请知名演讲嘉宾分享 Angular 相关经验和最佳实践。最近一次举办于 2023.6.14。</p></li><li><p><a href="https://www.bagevent.com/event/gops2023">GOPS 2023全球运维大会</a> - 全球运维领域的年度大会，聚焦于最新的运维技术和实践。</p></li><li><p><a href="https://dtcc.it168.com/">DTCC 中国数据库技术大会</a> - 专注于数据库技术的交流和分享，汇集众多数据库领域的专家和技术爱好者。</p></li><li><p><a href="https://www.bagevent.com/event/8384949">Gdevops 全球敏捷运维峰会</a> - 探讨敏捷运维的最佳实践和前沿技术，旨在提高运维效率和质量。</p></li><li><p><a href="https://archsummit.infoq.cn/2024/shenzhen">ArchSummit 全球架构师峰会</a> - 集结全球顶尖架构师，分享架构设计的最新理念和技术。</p></li><li><p><a href>KubeCon + CloudNativeCon</a> - Kubernetes和云原生社区的年度聚会，分享云原生技术的最新进展。</p></li><li><p><a href="http://pm-summit.org/modao">2019产品经理大会</a> - 针对产品经理的专业大会，探讨产品管理的理念、工具和最佳实践。</p></li><li><p><a href="https://wot.51cto.com/act/wot2023/shenzhen/">WOT 全球人工智能技术峰会</a> - 聚焦人工智能技术的前沿进展，汇集AI领域的研究者和实践者。</p></li><li><p><a href="https://nsc.skdlabs.com/">NSC中国网络安全大会</a> - 专注于网络安全领域的交流和分享，旨在提升网络安全意识和技能。</p></li><li><p><a href="https://www.bagevent.com/event/2414051">DOIS 2019运维开发国际峰会</a> - 探讨运维与开发的融合，促进DevOps文化和实践的发展。</p></li><li><p><a href="https://gtlc.infoq.cn/2021/shanghai">GTLC全球技术领导力大会</a> - 聚焦技术领导力的培养和发展，为技术领导者提供交流和学习的平台。</p></li></ul><h2><span id="活动发布平台">活动发布平台</span></h2><ul><li><a href="https://hopin.com/explore">hopin</a></li><li><a href="https://www.meetup.com/">Meetup: We are what we do</a></li><li><a href="https://www.eventbrite.com/">Eventbrite - Discover Great Events or Create Your Own &amp; Sell Tickets</a></li><li><a href="https://cloud.tencent.com/developer/salon">腾讯云+社区沙龙</a></li><li><a href="http://www.huodongxing.com/">活动行-可以多留意这里</a></li><li><a href="https://segmentfault.com/events">segmentfault-活动</a></li><li><a href="https://juejin.im/events/all">掘金-活动</a></li><li><a href="https://www.huodongjia.com/">活动家</a> ，有<a href="https://doc.huodongjia.com/">会议PPT区</a></li><li><a href="https://www.bagevent.com/">百格活动</a></li><li><a href="https://opentalk.upyun.com/">又拍云OpenTalk</a></li><li><a href="https://www.hdb.com/">互动吧</a></li><li><a href="https://yoopay.cn/collect/search/event">友付活动票务</a></li></ul><h2><span id="组织">组织</span></h2><ul><li><a href="https://linuxfoundation.cn/">Linux基金会</a></li><li><a href="https://www.cncf.io/">云原生软件基金会 CNCF </a></li><li><a href="https://github.com/d2forum">D2 前端技术论坛 - 阿里经济体前端委员会主办的面向全球前端领域的技术论坛 </a></li></ul><h2><span id="相关资源推荐">相关资源推荐</span></h2><ul><li><a href="https://github.com/SpringCloud/spring-cloud-document">SpringCloud中国社区 2017-2018活动汇总</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;codewave&quot;&gt;CodeWave&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;CodeWave: 汇集开发者线下技术会议的导航，链接你与技术界的最新动态和机遇。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;技术会议主页&quot;&gt;技术会议主页&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;sp</summary>
      
    
    
    
    <category term="Security" scheme="https://ikkkp.github.io/categories/Security/"/>
    
    
    <category term="Security" scheme="https://ikkkp.github.io/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>FE-interview-guide</title>
    <link href="https://ikkkp.github.io/2024/02/28/en/FE-interview-guide/"/>
    <id>https://ikkkp.github.io/2024/02/28/en/FE-interview-guide/</id>
    <published>2024-02-28T02:04:38.000Z</published>
    <updated>2024-02-28T02:10:28.357Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="codewave">CodeWave</span></h1><p>CodeWave: A navigation hub for offline developer conferences, connecting you to the latest trends and opportunities in the tech world.</p><h2><span id="conference-homepages">Conference Homepages</span></h2><h3><span id="domestic">Domestic</span></h3><ul><li><p><a href="http://www.thegiac.com/index.php">GIAC Global Internet Architecture Conference</a> - Focuses on the trends in internet architecture, inviting top architects in the industry to share their experiences and insights.</p></li><li><p><a href="https://qcon.infoq.cn/">QCon Global Software Development Conference</a> - Focuses on the latest trends and technologies in software development, providing a platform for developers to learn and exchange ideas.</p></li><li><p><a href="https://d2.alibabatech.com/">D2 Front-end Technology Conference</a> - Organized by Alibaba, focusing on technological innovation and practical exchange in the field of front-end and mobile development.</p></li><li><p><a href="https://conf.juejin.cn/">Rare Earth Developers Conference</a> - Aimed at a wide range of developers, sharing the latest tech trends and development experiences.</p></li><li><p><a href="https://gmtc.infoq.cn/">GMTC Global Front-end Technology Conference</a> - Focuses on the latest technologies and practical applications in the front-end domain, aiming to promote innovation and development in front-end technologies.</p></li><li><p><a href="https://sz2019.archsummit.com/">ArchSummit Global Architect Summit</a> - For the software architecture domain, inviting renowned architects to share best practices and experiences in architecture design.</p></li><li><p><a href="https://www.zaozao.run/">Early Morning Chat Conference</a> - A platform for sharing and exchange aimed at the front-end community, promoting the sharing of front-end technologies and experiences.</p></li><li><p><a href="https://node.fequan.com/">VueConf</a> - Aimed at developers and enthusiasts of the Vue.js community, sharing the latest developments and application cases of Vue.js.</p></li><li><p><a href="http://cssconf.org/">CssConf</a> - Focuses on CSS-related technologies, tools, and best practices, aiming to promote the development of CSS technology.</p></li><li><p><a href="https://www.w3.org/2023/06/china-web-forum/">Web Frontier Technology Forum</a> - Organized by W3C, discussing the latest standards and trends in Web technology.</p></li><li><p><a href="http://www.csdisummit.com/">China Software R&amp;D Management Industry Technology Summit</a> - Focused on the software R&amp;D management domain, sharing management practices and innovative methods.</p></li><li><p><a href="https://devopschina.org/">China DevOps Community</a>, <a href="https://www.hdb.com/u/bqaf3u.html">Recent Activities</a> - Dedicated to promoting DevOps culture and practices, organizing related activities and exchanges.</p></li><li><p><a href="https://meetup.elasticsearch.cn/event/index.html">Elastic Meetup - Regular offline exchange events organized by the Elastic official Chinese community</a> - For Elasticsearch users and developers, sharing experiences and best practices.</p></li><li><p><a href="https://jsworldconference.com/">JS World</a> - The world’s largest JavaScript conference, covering all aspects of JavaScript, inviting speakers from well-known companies and organizations, providing technical updates and case studies. The most recent event was held on 2024.2.28.</p></li><li><p><a href="https://vuejs.amsterdam/">VueJS Amsterdam</a> - The largest Vue conference, gathering global participants, interacting with Vue creators and maintainers, establishing connections and gaining unforgettable experiences. The most recent event was held on 2024.2.28.</p></li><li><p><a href="https://us.vuejs.org/">VueConf US</a> - An annual conference organized by the Vue.js community, hosted by the creator and core team of Vue.js, gathering Vue.js developers and enthusiasts from around the world, sharing the latest technologies and experiences. The most recent event was held on 2023.5.24.</p></li><li><p><a href="https://reactsummit.com/">React Summit</a>, <a href="https://reactsummit.us/">React Summit US</a> - The largest React conference in the world, gathering React developers, engineers, and experts to share technology and industry trends related to React. The most recent events were held on 2023.5.24 and 2023.11.13.</p></li><li><p><a href="https://reactlive.nl/">React Live</a> - Join 500 React developers for a day of celebration of React, diving deep into the latest topics related to React. The most recent event was held on 2023.9.29.</p></li><li><p><a href="https://devworldconference.com/">DEV WORLD</a> - Ranked as the world’s number one developers conference, offering the opportunity to interact face-to-face with 7500 developers, covering multiple technology areas. The most recent event was held on 2024.2.29.</p></li><li><p><a href="https://viteconf.org/23/">Vite Conf</a> - An immersive interactive online event for front-end teams, exploring the construction of the next generation of the web using Vite. The most recent event was held on</p></li><li><p><a href="https://cssday.nl/2023">CSS Day</a> - An advanced CSS conference providing a relaxed atmosphere and in-depth discussions. Last held on June 8, 2024.</p></li><li><p><a href="https://www.fequan.com/">FEday</a></p></li><li><p><a href="https://www.react-next.com/">ReactNext</a> - The largest React framework conference in Israel, bringing together local and international speakers to share advanced topics. Last held on June 24, 2024.</p></li><li><p><a href="https://jsheroes.io/">JSHeroes</a> - A non-profit community-organized conference that brings together JS and Web&#x2F;Frontend development enthusiasts from around the world for talks and networking events. Last held on May 23, 2024.</p></li><li><p><a href="https://javascript-conference.com/munich/">iJS</a> - An international JavaScript conference focusing on the latest trends and changes in JavaScript. Last held on October 23, 2023.</p></li><li><p><a href="https://ng-conf.org/">ng-conf</a> - The largest annual tech summit of the Angular community, inviting well-known speakers to share experiences and best practices related to Angular. Last held on June 14, 2023.</p></li><li><p><a href="https://www.bagevent.com/event/gops2023">GOPS 2023 Global Operations Conference</a> - The annual conference in the global operations field, focusing on the latest operations technologies and practices.</p></li><li><p><a href="https://dtcc.it168.com/">DTCC China Database Technology Conference</a> - Focused on the exchange and sharing of database technology, bringing together many experts and enthusiasts in the database field.</p></li><li><p><a href="https://www.bagevent.com/event/8384949">Gdevops Global Agile Operations Summit</a> - Discussing best practices and cutting-edge technologies in agile operations, aimed at improving operational efficiency and quality.</p></li><li><p><a href="https://archsummit.infoq.cn/2024/shenzhen">ArchSummit Global Architect Summit</a> - Bringing together top architects from around the world to share the latest concepts and technologies in architectural design.</p></li><li><p><a href>KubeCon + CloudNativeCon</a> - The annual gathering of the Kubernetes and cloud-native communities, sharing the latest advancements in cloud-native technologies.</p></li><li><p><a href="http://pm-summit.org/modao">2019 Product Manager Conference</a> - A professional conference for product managers, discussing the philosophy, tools, and best practices of product management.</p></li><li><p><a href="https://wot.51cto.com/act/wot2023/shenzhen/">WOT Global Artificial Intelligence Technology Summit</a> - Focusing on the forefront of artificial intelligence technology, bringing together researchers and practitioners in the AI field.</p></li><li><p><a href="https://nsc.skdlabs.com/">NSC China Network Security Conference</a> - Focused on the exchange and sharing in the field of network security, aimed at enhancing network security awareness and skills.</p></li><li><p><a href="https://www.bagevent.com/event/2414051">DOIS 2019 Operations and Development International Summit</a> - Discussing the integration of operations and development to promote the development of DevOps culture and practices.</p></li><li><p><a href="https://gtlc.infoq.cn/2021/shanghai">GTLC Global Technology Leadership Conference</a> - Focusing on the cultivation and development of technology leadership, providing a platform for technology leaders to exchange and learn.</p></li></ul><h2><span id="event-publishing-platforms">Event Publishing Platforms</span></h2><ul><li><a href="https://hopin.com/explore">hopin</a></li><li><a href="https://www.meetup.com/">Meetup: We are what we do</a></li><li><a href="https://www.eventbrite.com/">Eventbrite - Discover Great Events or Create Your Own &amp; Sell Tickets</a></li><li><a href="https://cloud.tencent.com/developer/salon">Tencent Cloud+ Community Salon</a></li><li><a href="http://www.huodongxing.com/">EventXing - Worth paying attention to</a></li><li><a href="https://segmentfault.com/events">segmentfault - Events</a></li><li><a href="https://juejin.im/events/all">Juejin - Events</a></li><li><a href="https://www.huodongjia.com/">EventHome</a>, with a <a href="https://doc.huodongjia.com/">Conference PPT Section</a></li><li><a href="https://www.bagevent.com/">Bagevent</a></li><li><a href="https://opentalk.upyun.com/">Upyun OpenTalk</a></li><li><a href="https://www.hdb.com/">Interactive Bar</a></li><li><a href="https://yoopay.cn/collect/search/event">Yoopay Event Ticketing</a></li></ul><h2><span id="organizations">Organizations</span></h2><ul><li><a href="https://linuxfoundation.cn/">Linux Foundation</a></li><li><a href="https://www.cncf.io/">Cloud Native Computing Foundation CNCF</a></li><li><a href="https://github.com/d2forum">D2 Front-end Technology Forum - Hosted by the Alibaba Economy Body Front-end Committee, aimed at the global front-end field</a></li></ul><h2><span id="recommended-resources">Recommended Resources</span></h2><ul><li><a href="https://github.com/SpringCloud/spring-cloud-document">SpringCloud China Community 2017-2018 Events Summary</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;codewave&quot;&gt;CodeWave&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;CodeWave: A navigation hub for offline developer conferences, connecting you to the latest tr</summary>
      
    
    
    
    <category term="Security" scheme="https://ikkkp.github.io/categories/Security/"/>
    
    
    <category term="Security" scheme="https://ikkkp.github.io/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>产品思考与产品用户体验优化</title>
    <link href="https://ikkkp.github.io/2024/02/16/pm-post1/"/>
    <id>https://ikkkp.github.io/2024/02/16/pm-post1/</id>
    <published>2024-02-16T07:08:02.000Z</published>
    <updated>2024-02-16T07:18:07.273Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="产品用户体验优化">产品用户体验优化</span></h2><p>自己做了独立开发，最多的问题就是：怎么推广，怎么获客？」但我遇到的绝大多数的提出这个问题的人，产品都发布了，都没有过太多思考。</p><p>问题之所以发生，是因为之前的问题没有解决。站在问题链末端，很多问题是无法解决的。这就像鲁伯特之泪，拿锤子拼命砸它，不如用钳子剪断末梢。</p><p>往往解决问题的方式并不是回答问题本身，而是从上游出发解决核心矛盾。</p><p>如果你的独立产品期望快速找到100个狂热用户，通过他们快速增长，那请牢牢记住这四件事，并围绕这四件事不断向自己提问，找到解决方案：</p><p><strong>1、定位目标用户，勾勒画像，了解当下用户遇到的问题</strong><br><strong>2、提供新解决方案，确定核心功能解决核心痛点</strong><br><strong>3、包装，写广告语，做落地页</strong><br><strong>4、冷启动，找到100个狂热用户</strong></p><h2><span id="选择赛道定义目标用户">选择赛道，定义目标用户：</span></h2><ol><li>你的用户是谁？具体画像是什么样？他们兜里有钱吗？</li><li>现在这个时间点做这个事情，是最佳时间吗？有没有什么时刻，比现在更容易做？</li><li>有什么政策支持或政策风险吗？</li><li>这个产品，只能你在其中挣钱吗？怎么能让别人，也通过你的产品挣钱？</li><li>这件事只能你来做吗？你做这件事，有什么额外的优势吗？</li><li>在你产品上线后，有可以合作进行销售的现成渠道资源吗？</li><li>你觉得你的产品，是具有很直接价值感的产品吗？还是需要教育用户才能意识到产品价值的？</li><li>和你做相同事情的竞品，多吗？他们做的如何？</li><li>用户对竞品的差评里，在抱怨什么？</li></ol><h2><span id="定义产品核心功能">定义产品核心功能</span></h2><ol><li>你的产品帮助他做了什么？这个过程，他现在是怎么完成的？</li><li>现在在持续完成这个过程的人，在你的用户画像中，占比有多高？</li><li>他如果不用你，想达到相同效果，还有什么其他替代方案？效率上和用你的产品相比，能相差多少？</li><li>如果你只有一个核心功能或链路，用户为其付费，这个功能是什么？</li><li>有什么现成工具，可以帮助你快速构建这个链路吗？（或者完成初步测试）</li></ol><h2><span id="确定营销包装">确定营销包装</span></h2><ol><li>你的用户，究竟为你产品的哪个点付费？该如何凸显，才能让用户感觉这个点对他们有用？</li><li>请用一句话打动客户为你的产品付费，这句话是什么？</li><li>竞品包装的打动用户的点是什么？和你有差异化吗？</li><li>如果没有差异，竞品的劣势是什么？是否可以将它的劣势转化为你的优势？进行精准打击？用户在意这个点吗？</li></ol><h2><span id="冷启动与扩量">冷启动与扩量</span></h2><ol><li>你的目标用户在哪里聚集？</li><li>你初期如何找到他们？</li><li>你能依靠哪些资源或人，来变相触及到他们？</li><li>当他们想要找你这类产品时，最可能从哪些渠道发现？搜索的关键词是？</li><li>竞品都在哪里做广告？</li><li>最有可能帮你去卖你产品的人，是谁？</li></ol><h2><span id="天使投资选择关注技术变革和应用场景">天使投资选择：关注技术变革和应用场景</span></h2><p>如果去做天使投资，我现在会看什么类型的项目？</p><p>天使投资是最难做的，很多基金DPI都小于1，投不好基本就融不到钱了。所以如果是我，我会怎么选择？</p><p>我请教了一个朋友，朋友讲了一个技术变革周期的故事。</p><p>从上一轮苹果开始，先是科研人员有了一些成果，促使底层技术有了革命性进展。然后出现了iphone时刻。之后伴随着一路网络基础设施建设，以及一些底层开发生态的建设，把原来web时代的场景，迁移到了移动终端上。当越来越多的场景迁移完成，开始卷不动了，人们就开始去做新场景的创新，出现了抖音，拼多多这种巨头。应用侧没的卷了，就开始卷内容，无数多的人挤进去做内容创新。</p><p>这个路线，放到AI上也一样可以借鉴的。新技术变革就像GPT3.5出现时一样，前期也是在卷模型，RAG，infra，所以这种做底层基建的，是会考虑投入的。因为长期来看，生态需要它。在每个赛道总是能跑出1，2个头部并持续发展下去的。</p><p>然而目前我们还没进入旧场景迁移的时候，目测现在的应用层还远远达不到真正实用的要求，所以暂时也不会考虑投入。很可能技术的势头一到，重新做旧场景迁移，会比现在快的多。那现在创业者做的事情，往往就会成为技术债务，船大难掉头。所以目前不会投这块的项目。</p><p>我感觉大家思路都差不多，我考量的是AI应用不成熟，所以会选择做AI流量直接变现，或者toB去做服务解决方案，而不是自己做个东西。</p><p>但其实AI应用里也会拆分，往往也有底层的应用范畴。比如和infra层对接比较紧密的，抽象能力足够强以至于可以应对变化的这种项目，也是值得看的。</p><p>这个思路其实也适用于visionOS带来的空间计算变革，只是感觉visionOS才刚刚走到新技术变革—&gt;底层基础建设 这块。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;产品用户体验优化&quot;&gt;产品用户体验优化&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;自己做了独立开发，最多的问题就是：怎么推广，怎么获客？」但我遇到的绝大多数的提出这个问题的人，产品都发布了，都没有过太多思考。&lt;/p&gt;
&lt;p&gt;问题之所以发生，是因为之前的问题没有解决。站</summary>
      
    
    
    
    <category term="产品" scheme="https://ikkkp.github.io/categories/%E4%BA%A7%E5%93%81/"/>
    
    
    <category term="产品" scheme="https://ikkkp.github.io/tags/%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>Product Reflection and Product User Experience Optimization</title>
    <link href="https://ikkkp.github.io/2024/02/16/en/pm-post1/"/>
    <id>https://ikkkp.github.io/2024/02/16/en/pm-post1/</id>
    <published>2024-02-16T07:08:02.000Z</published>
    <updated>2024-02-16T07:19:07.356Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="product-user-experience-optimization">Product User Experience Optimization</span></h2><p>A common challenge in independent development is, “How to promote and acquire customers?” However, most individuals posing this question have already released their products without much prior consideration.</p><p>The reason for this issue lies in unresolved preceding problems. Standing at the end of the problem chain, many issues become unsolvable. It’s akin to the story of Rupert’s drop; pounding it with a hammer futilely is less effective than clipping its tail with pliers.</p><p>Often, the solution to a problem isn’t answering the problem itself but addressing the core contradiction from an upstream perspective.</p><p>If your independent product aims to quickly find 100 passionate users and achieve rapid growth through them, please firmly remember these four things and continually question yourself around them to find solutions:</p><p><strong>1. Define target users, outline their profiles, and understand the problems they currently face</strong><br><strong>2. Provide new solutions, identify core features to solve core pain points</strong><br><strong>3. Packaging, write ad copy, create landing pages</strong><br><strong>4. Cold start, find 100 passionate users</strong></p><h2><span id="choosing-the-track-defining-target-users">Choosing the Track, Defining Target Users:</span></h2><ol><li>Who are your users? What are their specific profiles? Do they have purchasing power?</li><li>Is now the best time to do this? Is there a time when it’s easier to do than now?</li><li>Are there any policy supports or policy risks?</li><li>Can this product only earn money for you? How can others also earn money through your product?</li><li>Is this something only you can do? What additional advantages do you have in doing this?</li><li>Are there ready-made channel resources for cooperation in sales after your product goes online?</li><li>Do you think your product is a direct value proposition product? Or does it need to educate users to realize the value of the product?</li><li>How many competitors are there doing the same thing? How are they doing?</li><li>What are users complaining about in the negative reviews of competitors?</li></ol><h2><span id="defining-product-core-features">Defining Product Core Features:</span></h2><ol><li>What does your product help users do? How do they currently complete this process?</li><li>What percentage of users in your user profile are currently continuously completing this process?</li><li>If they don’t use your product, what other alternatives are there to achieve the same effect? How much difference in efficiency compared to using your product?</li><li>If you only have one core feature or chain, for which users pay, what is that feature?</li><li>Are there any ready-made tools to help you quickly build this chain? (Or complete initial testing)</li></ol><h2><span id="determining-marketing-packaging">Determining Marketing Packaging:</span></h2><ol><li>Which point of your product do users actually pay for? How can you highlight it to make users feel it’s useful for them?</li><li>Please use a sentence to impress customers to pay for your product, what is this sentence?</li><li>What are the selling points of the competitor’s packaging? Is there differentiation with yours?</li><li>If there is no difference, what are the disadvantages of the competitor? Can you convert its disadvantages into your advantages? Carry out precise strikes? Do users care about this point?</li></ol><h2><span id="cold-start-and-expansion">Cold Start and Expansion:</span></h2><ol><li>Where do your target users gather?</li><li>How do you find them initially?</li><li>What resources or people can you rely on to indirectly reach them?</li><li>When they want to find products like yours, where are they most likely to discover from? What are the search keywords?</li><li>Where do competitors advertise?</li><li>Who is most likely to help you sell your product?</li></ol><h2><span id="angel-investment-selection-focus-on-technological-transformation-and-application-scenarios">Angel Investment Selection: Focus on Technological Transformation and Application Scenarios</span></h2><p>If I were to do angel investment, what types of projects would I consider now?</p><p>Angel investment is the hardest to do, with many fund DPIs less than 1, meaning if you don’t invest well, you basically won’t raise money. So if it were me, how would I choose?</p><p>I consulted a friend, who told me a story about a technological transformation cycle.</p><p>Starting from the previous Apple cycle, initially, there were some achievements by researchers, which led to revolutionary progress in underlying technologies. Then came the iPhone era. Following that was a series of network infrastructure construction, as well as the development of some underlying development ecosystems, migrating web-era scenes to mobile terminals. As more and more scene migrations were completed, things began to stagnate, and people started innovating in new scenes, leading to the emergence of giants like TikTok and Pinduoduo. When the application side couldn’t progress anymore, people began focusing on content, with countless individuals entering to innovate in content creation.</p><p>This trajectory can also be applied to AI. The advent of new technological changes, like when GPT3.5 appeared, initially focused on model, RAG, and infra, so those working on underlying infrastructure would be considered for investment. Because in the long run, the ecosystem needs it. In each track, there are always 1 or 2 top players who continue to develop.</p><p>However, we haven’t yet entered the period of migrating old scenes. It’s estimated that the current application layer is far from meeting the requirements of true utility. So, we won’t consider investing in this area for the time being. It’s very likely that when the technological momentum arrives, redoing the migration of old scenes will be much faster than it is now. So what entrepreneurs are doing now will often become technical debt, and it will be difficult to change course for a big ship. So, we won’t invest in projects in this area for now.</p><p>I feel that everyone’s thoughts are quite similar. What I consider is that AI applications are immature, so I would choose to directly monetize AI traffic or provide B2B service solutions, rather than creating something myself.</p><p>But in fact, AI applications can also be broken down, often with underlying application categories. For example, those closely integrated with the infra layer, with strong abstraction capabilities to adapt to changes, are also worth considering.</p><p>This line of thought also applies to the spatial computing transformation brought about by visionOS, but it feels like visionOS has just started to embark on the new technological transformation -&gt; underlying infrastructure construction.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;product-user-experience-optimization&quot;&gt;Product User Experience Optimization&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;A common challenge in independent dev</summary>
      
    
    
    
    <category term="Product" scheme="https://ikkkp.github.io/categories/Product/"/>
    
    
    <category term="Product" scheme="https://ikkkp.github.io/tags/Product/"/>
    
  </entry>
  
  <entry>
    <title>记录一次向elementUI提PR的过程</title>
    <link href="https://ikkkp.github.io/2024/02/08/elementUI-1/"/>
    <id>https://ikkkp.github.io/2024/02/08/elementUI-1/</id>
    <published>2024-02-08T01:49:54.000Z</published>
    <updated>2024-02-08T02:35:06.483Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>24年的年度目标其中就有一个是进入开源社区，而万事开头难，一开始选了VueCore和ElementUI作为我的开始，也向VueCore交了一个PR，但是没发现这个issue上一周就被修复了，所以就没了下文。</p><p>但是ElementUI的issue挺有意思的，下面我们来细说下：</p><h2><span id="问题">问题</span></h2><p>issue长这样：<a href="https://github.com/element-plus/element-plus/issues/15308">牙齿尖尖的</a></p><p>这边也贴一个SFC的链接吧：<a href="https://element-plus.run/#eyJzcmMvQXBwLnZ1ZSI6IjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIHZlcnNpb24gYXMgdnVlVmVyc2lvbiB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IEVsTWVudSwgRWxNZW51SXRlbSwgdmVyc2lvbiBhcyBlcFZlcnNpb24gfSBmcm9tICdlbGVtZW50LXBsdXMnXG5pbXBvcnQgeyBFbGVtZW50UGx1cyB9IGZyb20gJ0BlbGVtZW50LXBsdXMvaWNvbnMtdnVlJ1xuXG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8ZWwtbWVudVxuICAgIG1vZGU9XCJob3Jpem9udGFsXCJcbiAgPlxuICAgIDxlbC1tZW51LWl0ZW0gaW5kZXg9XCIxXCI+UHJvY2Vzc2luZyBDZW50ZXI8L2VsLW1lbnUtaXRlbT5cbiAgICA8ZWwtc3ViLW1lbnUgaW5kZXg9XCIyXCI+XG4gICAgICA8dGVtcGxhdGUgI3RpdGxlPldvcmtzcGFjZTwvdGVtcGxhdGU+XG4gICAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiMi0xXCI+aXRlbSBvbmU8L2VsLW1lbnUtaXRlbT5cbiAgICAgIDxlbC1tZW51LWl0ZW0gaW5kZXg9XCIyLTJcIj5pdGVtIHR3bzwvZWwtbWVudS1pdGVtPlxuICAgICAgPGVsLW1lbnUtaXRlbSBpbmRleD1cIjItM1wiPml0ZW0gdGhyZWU8L2VsLW1lbnUtaXRlbT5cbiAgICAgIDxlbC1zdWItbWVudSBpbmRleD1cIjItNFwiPlxuICAgICAgICA8dGVtcGxhdGUgI3RpdGxlPml0ZW0gZm91cjwvdGVtcGxhdGU+XG4gICAgICAgIDxlbC1tZW51LWl0ZW0gaW5kZXg9XCIyLTQtMVwiPml0ZW0gb25lPC9lbC1tZW51LWl0ZW0+XG4gICAgICAgIDxlbC1tZW51LWl0ZW0gaW5kZXg9XCIyLTQtMlwiPml0ZW0gdHdvPC9lbC1tZW51LWl0ZW0+XG4gICAgICAgIDxlbC1tZW51LWl0ZW0gaW5kZXg9XCIyLTQtM1wiPml0ZW0gdGhyZWU8L2VsLW1lbnUtaXRlbT5cbiAgICAgIDwvZWwtc3ViLW1lbnU+XG4gICAgPC9lbC1zdWItbWVudT5cbiAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiM1wiIGRpc2FibGVkPkluZm88L2VsLW1lbnUtaXRlbT5cbiAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiNFwiPk9yZGVyczQ8L2VsLW1lbnUtaXRlbT5cbiAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiNVwiPk9yZGVyczU8L2VsLW1lbnUtaXRlbT5cbiAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiNlwiPk9yZGVyczY8L2VsLW1lbnUtaXRlbT5cbiAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiN1wiPk9yZGVyczc8L2VsLW1lbnUtaXRlbT5cbiAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiOFwiPk9yZGVyczg8L2VsLW1lbnUtaXRlbT5cbiAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiOVwiPk9yZGVyczk8L2VsLW1lbnUtaXRlbT5cbiAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiMTBcIj5PcmRlcnMxMDwvZWwtbWVudS1pdGVtPlxuICAgIDxlbC1tZW51LWl0ZW0gaW5kZXg9XCIxMVwiPk9yZGVyczExPC9lbC1tZW51LWl0ZW0+XG4gICAgPGVsLW1lbnUtaXRlbSBpbmRleD1cIjEyXCI+T3JkZXJzMTI8L2VsLW1lbnUtaXRlbT5cbiAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiMTNcIj5PcmRlcnMxMzwvZWwtbWVudS1pdGVtPlxuICAgIDxlbC1tZW51LWl0ZW0gaW5kZXg9XCIxNFwiPk9yZGVyczE0PC9lbC1tZW51LWl0ZW0+XG4gICAgPGVsLW1lbnUtaXRlbSBpbmRleD1cIjE1XCI+T3JkZXJzMTU8L2VsLW1lbnUtaXRlbT5cbiAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiMTZcIj5PcmRlcnMxNjwvZWwtbWVudS1pdGVtPlxuICAgIDxlbC1tZW51LWl0ZW0gaW5kZXg9XCIxN1wiPk9yZGVyczE3PC9lbC1tZW51LWl0ZW0+XG4gICAgPGVsLW1lbnUtaXRlbSBpbmRleD1cIjE4XCI+T3JkZXJzMTg8L2VsLW1lbnUtaXRlbT5cbiAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiMTlcIj5PcmRlcnMxOTwvZWwtbWVudS1pdGVtPlxuICAgIDxlbC1tZW51LWl0ZW0gaW5kZXg9XCIyMFwiPk9yZGVyczIwPC9lbC1tZW51LWl0ZW0+XG4gICAgPGVsLW1lbnUtaXRlbSBpbmRleD1cIjIxXCI+T3JkZXJzMjE8L2VsLW1lbnUtaXRlbT5cbiAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiMjJcIj5PcmRlcnMyMjwvZWwtbWVudS1pdGVtPlxuICAgIDxlbC1tZW51LWl0ZW0gaW5kZXg9XCIyM1wiPk9yZGVyczIzPC9lbC1tZW51LWl0ZW0+XG4gICAgPGVsLW1lbnUtaXRlbSBpbmRleD1cIjI0XCI+T3JkZXJzMjQ8L2VsLW1lbnUtaXRlbT5cbiAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiMjVcIj5PcmRlcnMyNTwvZWwtbWVudS1pdGVtPlxuICAgIDxlbC1tZW51LWl0ZW0gaW5kZXg9XCIyNlwiPk9yZGVyczI2PC9lbC1tZW51LWl0ZW0+XG4gICAgPGVsLW1lbnUtaXRlbSBpbmRleD1cIjI3XCI+T3JkZXJzMjc8L2VsLW1lbnUtaXRlbT5cbiAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiMjhcIj5PcmRlcnMyODwvZWwtbWVudS1pdGVtPlxuICAgIDxlbC1tZW51LWl0ZW0gaW5kZXg9XCIyOVwiPk9yZGVyczI5PC9lbC1tZW51LWl0ZW0+XG4gICAgPGVsLW1lbnUtaXRlbSBpbmRleD1cIjMwXCI+T3JkZXJzMzA8L2VsLW1lbnUtaXRlbT5cbiAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiMzFcIj5PcmRlcnMzMTwvZWwtbWVudS1pdGVtPlxuICAgIDxlbC1tZW51LWl0ZW0gaW5kZXg9XCIzMlwiPk9yZGVyczMyPC9lbC1tZW51LWl0ZW0+XG4gICAgPGVsLW1lbnUtaXRlbSBpbmRleD1cIjMzXCI+T3JkZXJzMzM8L2VsLW1lbnUtaXRlbT5cbiAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiMzRcIj5PcmRlcnMzNDwvZWwtbWVudS1pdGVtPlxuICAgIDxlbC1tZW51LWl0ZW0gaW5kZXg9XCIzNVwiPk9yZGVyczM1PC9lbC1tZW51LWl0ZW0+XG4gICAgPGVsLW1lbnUtaXRlbSBpbmRleD1cIjM2XCI+T3JkZXJzMzY8L2VsLW1lbnUtaXRlbT5cbiAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiMzdcIj5PcmRlcnMzNzwvZWwtbWVudS1pdGVtPlxuICAgIDxlbC1tZW51LWl0ZW0gaW5kZXg9XCIzOFwiPk9yZGVyczM4PC9lbC1tZW51LWl0ZW0+XG4gICAgPGVsLW1lbnUtaXRlbSBpbmRleD1cIjM5XCI+T3JkZXJzMzk8L2VsLW1lbnUtaXRlbT5cbiAgICA8ZWwtbWVudS1pdGVtIGluZGV4PVwiNDBcIj5PcmRlcnM0MDwvZWwtbWVudS1pdGVtPlxuICA8L2VsLW1lbnU+XG5cbiAgPHA+XG4gICAgPGVsLWljb24gY29sb3I9XCJ2YXIoLS1lbC1jb2xvci1wcmltYXJ5KVwiPjxFbGVtZW50UGx1cyAvPjwvZWwtaWNvbj5cbiAgICBFbGVtZW50IFBsdXMge3sgZXBWZXJzaW9uIH19ICsgVnVlIHt7IHZ1ZVZlcnNpb24gfX1cbiAgPC9wPlxuPC90ZW1wbGF0ZT5cbiIsImltcG9ydC1tYXAuanNvbiI6IntcbiAgXCJpbXBvcnRzXCI6IHt9XG59IiwidHNjb25maWcuanNvbiI6IntcbiAgXCJjb21waWxlck9wdGlvbnNcIjoge1xuICAgIFwidGFyZ2V0XCI6IFwiRVNOZXh0XCIsXG4gICAgXCJqc3hcIjogXCJwcmVzZXJ2ZVwiLFxuICAgIFwibW9kdWxlXCI6IFwiRVNOZXh0XCIsXG4gICAgXCJtb2R1bGVSZXNvbHV0aW9uXCI6IFwiQnVuZGxlclwiLFxuICAgIFwidHlwZXNcIjogW1wiZWxlbWVudC1wbHVzL2dsb2JhbC5kLnRzXCJdLFxuICAgIFwiYWxsb3dJbXBvcnRpbmdUc0V4dGVuc2lvbnNcIjogdHJ1ZSxcbiAgICBcImFsbG93SnNcIjogdHJ1ZSxcbiAgICBcImNoZWNrSnNcIjogdHJ1ZVxuICB9LFxuICBcInZ1ZUNvbXBpbGVyT3B0aW9uc1wiOiB7XG4gICAgXCJ0YXJnZXRcIjogMy4zXG4gIH1cbn1cbiIsIl9vIjp7fX0=">SFC</a></p><p>刚看到这个issue还挺有意思的：这个bug是在菜单组件过多时，elementUI会将过长的menu进行收纳进一个展开栏中：</p><p><img src="/img/element/element-1.png" alt="elementUI"></p><p>也就是上图中的省略号那个区域</p><p>当我们hover或者click那个区域时，会弹出一个展开栏，里面包含了所有的菜单</p><p>但是这个issue的问题是，当我们点击展开栏，当菜单栏的长度过多，会导致展开栏的长度过长，页面会往下拓展，导致页面的滚动条出现，后面页面的视宽内容会被挤压。</p><p><strong>挤压不要紧，这个应该是符合预期的，因为当菜单栏过多时，我们的展开栏的长度也会变长，他就需要有地方进行拓展。</strong></p><p>但是问题是，这个组件有一个节流函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getIndexPath</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">index</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> subMenus<span class="token punctuation">.</span>value<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>indexPath<span class="token comment">// Common computer monitor FPS is 60Hz, which means 60 redraws per second. Calculation formula: 1000ms/60 ≈ 16.67ms, In order to avoid certain chance of repeated triggering when `resize`, set wait to 16.67 * 2 = 33.34</span><span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span> wait <span class="token operator">=</span> <span class="token number">33.34</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   <span class="token keyword">let</span> <span class="token literal-property property">timmer</span><span class="token operator">:</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> setTimeout<span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    timmer <span class="token operator">&amp;&amp;</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timmer<span class="token punctuation">)</span>    timmer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> isFirstTimeRender <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">const</span> <span class="token function-variable function">handleResize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>sliceIndex<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token function">calcSliceIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>   <span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    sliceIndex<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>       sliceIndex<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">calcSliceIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">// execute callback directly when first time resize to avoid shaking</span>   isFirstTimeRender <span class="token operator">?</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">debounce</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   isFirstTimeRender <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>他是这样的：当我们页面的视宽发生变化时，会触发resize事件，然后会执行handleResize函数，这个函数会计算当前的菜单栏的长度，然后会执行一个节流函数，这个节流函数会在一定的时间内，只执行一次回调函数，这个回调函数就是计算当前的菜单栏的长度，然后将这个长度赋值给sliceIndex，然后页面就会根据这个长度来进行展开栏的展开。</p><p><strong>搞笑的就来了：刚刚我们触发的滚动条，使得这个节流函数的触发，页面就开始抽搐了</strong> ，因为这个节流函数的节流时间是33.34ms，而我们的滚动条的触发频率是16.67ms，所以这个节流函数就会被频繁的触发，导致页面的抽搐。</p><h2><span id="解决">解决</span></h2><p>那么怎么solve这个问题呢：</p><p>我一开始想到的是改这个scss的样式，但是这个样式是根据菜单栏的长度来进行展开的，所以改样式是不行的。</p><p>后面我发现这个节流函数的触发应该是来解决拖动视窗时组件的销毁和重建，那么我们有必要这么频繁的触发这个节流函数吗？我们是否可以将当他改变组件数量的时候再进行触发呢？</p><p>所以在原来的代码中加了一行：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>sliceIndex<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token function">calcSliceIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个问题整体来说还算简单，但是我觉得这个问题还是挺有意思的，所以就记录下来了。</p><p>提了这个PR也让我复习了一下git的操作，以及体验到了开源项目的PR流程和规范，还是挺有意思的。</p><p>下一个阶段的小目标：向Vue和elementUI提PR，看能不能有机会进core team！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;24年的年度目标其中就有一个是进入开源社区，而万事开头难，一开始选了VueCore和ElementUI作为我的开始，也向VueCore交了一个PR，但是没发现这个issue上一周就被修复了，所以就没了下文。&lt;/</summary>
      
    
    
    
    <category term="Vue" scheme="https://ikkkp.github.io/categories/Vue/"/>
    
    <category term="ElementUI" scheme="https://ikkkp.github.io/categories/Vue/ElementUI/"/>
    
    <category term="PR" scheme="https://ikkkp.github.io/categories/Vue/ElementUI/PR/"/>
    
    
    <category term="Vue,ElementUI,PR" scheme="https://ikkkp.github.io/tags/Vue-ElementUI-PR/"/>
    
  </entry>
  
  <entry>
    <title>Documenting the Process of Submitting a PR to ElementUI</title>
    <link href="https://ikkkp.github.io/2024/02/08/en/elementUI-1/"/>
    <id>https://ikkkp.github.io/2024/02/08/en/elementUI-1/</id>
    <published>2024-02-08T01:49:54.000Z</published>
    <updated>2024-02-08T02:38:47.333Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="foreword">Foreword</span></h2><p>One of my goals for the year 24 was to engage with the open-source community, and getting started can be challenging. I chose VueCore and ElementUI as my starting points, submitting a PR to VueCore which, unfortunately, addressed an issue that had been fixed a week prior, leaving it without follow-up.</p><p>However, an interesting issue arose in ElementUI, let’s delve into the details:</p><h2><span id="the-problem">The Problem</span></h2><p>The issue looked like this: <a href="https://github.com/element-plus/element-plus/issues/15308">Sharp Teeth</a></p><p>Here is also an SFC link: <a href="https://element-plus.run/#eyJzcmMvQXBwLnZ1ZSI6IjxzY3JpcHQgc2V0dXA+IHNldHVwIGNvZGUuLi4gPC9zY3JpcHQ+IHRlbXBsYXRlIGNvZGUuLi4iLCJpbXBvcnQtbWFwLmpzb24iOiJpbXBvcnRzIG1hcC4uLiIsInRzY29uZmlnLmpzb24iOiJjb21waWxlciBvcHRpb25zLi4uIn0=">SFC</a></p><p>The bug occurs when there are numerous menu items in the component; ElementUI condenses the lengthy menu into an expandable section:</p><p><img src="/img/element/element-1.png"></p><p>As shown in the above figure, hovering over or clicking on the ellipsis area reveals an expansion panel containing all menu items.</p><p><strong>The issue arises when clicking the expansion panel</strong>: if there are too many menu items, the length of the expansion panel becomes excessively long, causing the page to extend vertically, introducing a scrollbar and compressing the view width of the content below.</p><p><strong>While the compression may be expected behavior</strong>, since the expansion panel naturally expands to accommodate more menu items, <strong>the problem lies in a throttling function</strong>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getIndexPath</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">index</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> subMenus<span class="token punctuation">.</span>value<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>indexPath<span class="token punctuation">;</span><span class="token comment">// Common computer monitor FPS is 60Hz, implying 60 redraws per second. Calculation formula: 1000ms/60 ≈ 16.67ms. To avoid potential repeated triggering during `resize`, set wait to 16.67 * 2 = 33.34ms.</span><span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span> wait <span class="token operator">=</span> <span class="token number">33.34</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> <span class="token literal-property property">timmer</span><span class="token operator">:</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> setTimeout<span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    timmer <span class="token operator">&amp;&amp;</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timmer<span class="token punctuation">)</span><span class="token punctuation">;</span>    timmer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> isFirstTimeRender <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">handleResize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>sliceIndex<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token function">calcSliceIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    sliceIndex<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      sliceIndex<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">calcSliceIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// Execute the callback directly during the first resize event to avoid shaking.</span>  isFirstTimeRender <span class="token operator">?</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">debounce</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  isFirstTimeRender <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This function is triggered when the viewport width changes, executing <code>handleResize</code>. This function calculates the current menu length and invokes a debounced function, which executes the callback only once within a specified time frame. The callback recalculates the menu length and assigns it to <code>sliceIndex</code>, thus determining the expansion state of the expansion panel.</p><p><strong>The amusingly problematic part</strong>: the scrollbar introduced triggers the throttled function so frequently that it causes the page to jitter. Since the throttling delay is 33.34ms and the scrollbar trigger frequency is around 16.67ms, the throttled function is repeatedly called, leading to the jittering effect.</p><h2><span id="solution">Solution</span></h2><p>To solve this issue:</p><p>Initially, I considered modifying the SCSS styles, but since the style adjusts based on the menu length, changing the styles wasn’t a viable solution.</p><p>I then realized that the throttling function’s purpose was likely to address the destruction and recreation of the component during window resizing. Was it necessary to invoke this function so frequently? Could we trigger it only when the number of components changes?</p><p>So, I added a line to the original code:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>sliceIndex<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token function">calcSliceIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Although this issue was relatively simple, I found it intriguing enough to document. Submitting this PR allowed me to review Git operations and experience the pull request process and standards in an open-source project, which was indeed enlightening.</p><p>Next milestone: Aim to submit PRs to Vue and ElementUI, and hopefully, contribute to the core team!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;foreword&quot;&gt;Foreword&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;One of my goals for the year 24 was to engage with the open-source community, and getting sta</summary>
      
    
    
    
    <category term="Vue" scheme="https://ikkkp.github.io/categories/Vue/"/>
    
    <category term="ElementUI" scheme="https://ikkkp.github.io/categories/Vue/ElementUI/"/>
    
    <category term="PR" scheme="https://ikkkp.github.io/categories/Vue/ElementUI/PR/"/>
    
    
    <category term="Vue,ElementUI,PR" scheme="https://ikkkp.github.io/tags/Vue-ElementUI-PR/"/>
    
  </entry>
  
  <entry>
    <title>基于Vue3和MathJax渲染的Latex富文本公式编辑器完美实践</title>
    <link href="https://ikkkp.github.io/2024/01/31/mathjax-latex/"/>
    <id>https://ikkkp.github.io/2024/01/31/mathjax-latex/</id>
    <published>2024-01-31T13:07:42.000Z</published>
    <updated>2024-02-01T00:51:47.544Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>做项目需要用到富文本编辑器，但是看了很多的富文本编辑器都很少支持公式编辑，但项目有要用到，怎么办呢？先写一个显然并不现实。于是使用<code>easy-formula-editor</code>和<code>wangeditor</code>写了一个功能小插件，是 <strong>基于Vue3和MathJax渲染的Latex富文本公式编辑器，支持零基础即可编辑公式，支持自定义编辑器配置和风格，支持二次编辑公式，支持作为插件和富文本编辑器一起使用。</strong></p><ul><li>零基础即可编辑公式</li><li>支持自定义编辑器配置和风格</li><li>支持二次编辑公式</li><li>支持作为插件和富文本编辑器一起使用</li></ul><p><img src="/img/mathjax/mathjax-1.png" alt="MathJax"></p><h2><span id="安装和使用">安装和使用</span></h2><h3><span id="npm">NPM</span></h3><pre class="line-numbers language-none"><code class="language-none">npm i easy-formula-editor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> formulaEditor <span class="token keyword">from</span> <span class="token string">"easy-formula-editor"</span><span class="token punctuation">;</span><span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">formulaEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>editor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="cdn">CDN</span></h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../dist/formula-editor.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">formulaEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  editor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="导出">导出</span></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// latex 公式</span>editor<span class="token punctuation">.</span>latex<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// html 公式</span>editor<span class="token punctuation">.</span>$textSvgElem<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="富文本编辑器菜单栏扩展">富文本编辑器菜单栏扩展</span></h2><h3><span id="注册菜单">注册菜单</span></h3><p><strong>【注意】 推荐使用全局模式来注册菜单。</strong> 如果有多个编辑器，每个编辑器的自定义菜单不一样，则使用实例的方式来注册菜单</p><h3><span id="全局模式">全局模式</span></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 菜单 key ，各个菜单不能重复</span><span class="token keyword">const</span> menuKey <span class="token operator">=</span> <span class="token string">'alertMenuKey'</span> <span class="token comment">// 注册菜单</span><span class="token constant">E</span><span class="token punctuation">.</span><span class="token function">registerMenu</span><span class="token punctuation">(</span>menuKey<span class="token punctuation">,</span> AlertMenu<span class="token punctuation">)</span><span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token string">'#div1'</span><span class="token punctuation">)</span>editor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> editor2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token string">'#div2'</span><span class="token punctuation">)</span>editor2<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="实例模式">实例模式</span></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 菜单 key ，各个菜单不能重复</span><span class="token keyword">const</span> menuKey <span class="token operator">=</span> <span class="token string">'alertMenuKey'</span> <span class="token keyword">const</span> menuKey2 <span class="token operator">=</span> <span class="token string">'alertMenuKey2'</span><span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token string">'#div1'</span><span class="token punctuation">)</span><span class="token comment">// 注册菜单</span>editor<span class="token punctuation">.</span>menus<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>menuKey<span class="token punctuation">,</span> AlertMenu<span class="token punctuation">)</span><span class="token comment">// 将菜单加入到 editor.config.menus 中    const menuKey = 'alertMenuKey' </span><span class="token comment">// 也可以通过配置 menus 调整菜单的顺序，参考【配置菜单】部分的文档    editor.config.menus.push(menuKey)</span>editor<span class="token punctuation">.</span>config<span class="token punctuation">.</span>menus <span class="token operator">=</span> editor<span class="token punctuation">.</span>config<span class="token punctuation">.</span>menus<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>menuKey<span class="token punctuation">)</span><span class="token comment">// 注册完菜单，再创建编辑器，顺序很重要！！</span>editor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> editor2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token string">'#div2'</span><span class="token punctuation">)</span>editor2<span class="token punctuation">.</span>menus<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>menuKey2<span class="token punctuation">,</span> AlertMenu<span class="token punctuation">)</span>editor2<span class="token punctuation">.</span>config<span class="token punctuation">.</span>menus<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>menuKey2<span class="token punctuation">)</span>editor2<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="实际项目结合示例">实际项目结合示例</span></h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token constant">E</span> <span class="token keyword">from</span> <span class="token string">"wangeditor"</span><span class="token punctuation">;</span><span class="token keyword">import</span> formulaEditor <span class="token keyword">from</span> <span class="token string">"easy-formula-editor"</span><span class="token punctuation">;</span><span class="token keyword">import</span> createPanelConf <span class="token keyword">from</span> <span class="token string">"./create-panel-conf"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> PanelMenu<span class="token punctuation">,</span> Panel <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token constant">E</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AlertMenu</span> <span class="token keyword">extends</span> <span class="token class-name">PanelMenu</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">editor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// data-title属性表示当鼠标悬停在该按钮上时提示该按钮的功能简述</span>    <span class="token keyword">const</span> $elem <span class="token operator">=</span> <span class="token constant">E</span><span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span>      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="w-e-menu" data-title="数学公式">        &lt;span>公式&lt;/span>      &lt;/div></span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>$elem<span class="token punctuation">,</span> editor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 菜单点击事件   */</span>  <span class="token function">clickHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> formula <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">formulaEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> conf <span class="token operator">=</span> <span class="token function">createPanelConf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">,</span> formula<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Panel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> conf<span class="token punctuation">)</span><span class="token punctuation">;</span>    panel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formula<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"#edit-content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">tryChangeActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> menuKey <span class="token operator">=</span> <span class="token string">"alertMenuKey"</span><span class="token punctuation">;</span><span class="token comment">// 注册菜单</span><span class="token constant">E</span><span class="token punctuation">.</span><span class="token function">registerMenu</span><span class="token punctuation">(</span>menuKey<span class="token punctuation">,</span> AlertMenu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token constant">E</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">&#x2F;&#x2F;create-panel-conf.tsexport default function (wangEditor, formulaEditor) &#123;    const btnOkId &#x3D; &#39;btn-ok&#39;      &#x2F;**     * 插入公式     *&#x2F;    function insertFomule() &#123;      const formula &#x3D; formulaEditor.latex.text()      &#x2F;&#x2F; 注意插入wangEditor时左右两边的空格不能去掉，不然会导致无法获取焦点      wangEditor.txt.append(&#39;&lt;p&gt;&#39;+formula+&#39;&lt;&#x2F;p&gt;&#39;)      return true    &#125;      &#x2F;&#x2F; tabs配置    const tabsConf &#x3D; [      &#123;        &#x2F;&#x2F; tab 的标题        title: &quot;插入数学公式&quot;,        &#x2F;&#x2F; 模板        tpl: &#96;&lt;div&gt;                &lt;div id&#x3D;&quot;edit-content&quot;&gt;&lt;&#x2F;div&gt;                &lt;div class&#x3D;&quot;w-e-button-container&quot;&gt;                  &lt;button type&#x3D;&quot;button&quot; id&#x3D;&quot;$&#123;btnOkId&#125;&quot; class&#x3D;&quot;right&quot;&gt;插入&lt;&#x2F;button&gt;                &lt;&#x2F;div&gt;              &lt;&#x2F;div&gt;&#96;,        &#x2F;&#x2F; 事件绑定        events: [          &#x2F;&#x2F; 插入视频          &#123;            selector: &#39;#&#39; + btnOkId,            type: &#39;click&#39;,            fn: insertFomule,            bindEnter: true,          &#125;,        ],      &#125;, &#x2F;&#x2F; tab end    ]      return &#123;        width: 660,        height: 0,        &#x2F;&#x2F; panel 中可包含多个 tab        tabs: tabsConf, &#x2F;&#x2F; tabs end      &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用上面的代码，就可以在富文本编辑器中添加一个公式编辑器的菜单了：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;formula-container&quot;&gt;    &lt;v-card elevation&#x3D;&quot;0&quot; class&#x3D;&quot;formula-card&quot; title&#x3D;&quot;输出区域&quot; subtitle&#x3D;&quot;Output&quot;&gt;      &lt;div id&#x3D;&quot;formula&quot; class&#x3D;&quot;formula-content&quot;&gt;        &#123;&#123; renderedFormula ? &#96;$$&#123;renderedFormula&#125;$&#96; : &#39;&#39; &#125;&#125;      &lt;&#x2F;div&gt;    &lt;&#x2F;v-card&gt;    &lt;div class&#x3D;&quot;editor-area&quot;&gt;      &lt;div id&#x3D;&quot;wang-editor&quot; class&#x3D;&quot;editor&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;import E from &quot;..&#x2F;utils&#x2F;formula-menu-conf&quot;;import &#123; ref, onMounted, nextTick, defineProps, watchEffect &#125; from &quot;vue&quot;;&#x2F;&#x2F; 定义propsconst props &#x3D; defineProps(&#123;  initMessage: &#123;    type: String,    default: &quot;&quot;,  &#125;&#125;);watchEffect(() &#x3D;&gt; &#123;  props.initMessage;&#125;);const editor &#x3D; ref(null);const renderedFormula &#x3D; ref(&quot;&quot;);function convert() &#123;  MathJax.texReset();  MathJax.typesetClear();  MathJax.typesetPromise();&#125;function updateFormula() &#123;  renderedFormula.value &#x3D; editor.value.txt.text();  nextTick(convert);&#125;onMounted(() &#x3D;&gt; &#123;  editor.value &#x3D; new E(&quot;#wang-editor&quot;);  editor.value.config.height &#x3D; 360;  editor.value.config.menus &#x3D; [&#39;head&#39;, &#39;bold&#39;, &#39;underline&#39;, &#39;strikeThrough&#39;,&#39;emoticon&#39;, &#39;undo&#39;, &#39;redo&#39;];  editor.value.config.onchange &#x3D; updateFormula;  editor.value.config.onchangeTimeout &#x3D; 500;  editor.value.create();  editor.value.txt.html(props.initMessage);&#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，我们的公式编辑器和富文本编辑器完美结合了，效果如下：</p><p><img src="/img/mathjax/mathjax-2.png" alt="MathJax"></p><p>贴一个wangeditor的官方文档：<a href="https://www.wangeditor.com/v4">www.wangeditor.com/v4</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;做项目需要用到富文本编辑器，但是看了很多的富文本编辑器都很少支持公式编辑，但项目有要用到，怎么办呢？先写一个显然并不现实。于是使用&lt;code&gt;easy-formula-editor&lt;/code&gt;和&lt;code&gt;w</summary>
      
    
    
    
    <category term="Vue" scheme="https://ikkkp.github.io/categories/Vue/"/>
    
    <category term="MathJax" scheme="https://ikkkp.github.io/categories/Vue/MathJax/"/>
    
    <category term="Latex" scheme="https://ikkkp.github.io/categories/Vue/MathJax/Latex/"/>
    
    
    <category term="Vue,MathJax,Latex" scheme="https://ikkkp.github.io/tags/Vue-MathJax-Latex/"/>
    
  </entry>
  
  <entry>
    <title>Perfect Implementation of a Latex Rich Text Formula Editor Based on Vue3 and MathJax Rendering</title>
    <link href="https://ikkkp.github.io/2024/01/31/en/mathjax-latex/"/>
    <id>https://ikkkp.github.io/2024/01/31/en/mathjax-latex/</id>
    <published>2024-01-31T13:07:42.000Z</published>
    <updated>2024-02-01T00:55:17.553Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="introduction">Introduction</span></h2><p>In a project, there was a need for a rich text editor with support for formula editing. However, many rich text editors lacked robust support for formula editing. To address this, I developed a small plugin using <code>easy-formula-editor</code> and <code>wangeditor</code>. It is a <strong>Latex rich text formula editor based on Vue3 and MathJax rendering. It supports easy formula editing for users with zero experience, allows customization of the editor’s configuration and style, supports re-editing of formulas, and can be used as a standalone plugin or integrated with rich text editors.</strong></p><ul><li>Easy formula editing for users with zero experience</li><li>Customizable editor configuration and style</li><li>Support for re-editing formulas</li><li>Can be used as a standalone plugin or integrated with rich text editors</li></ul><p><img src="/img/mathjax/mathjax-1.png" alt="MathJax"></p><h2><span id="installation-and-usage">Installation and Usage</span></h2><h3><span id="npm">NPM</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm i easy-formula-editor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> formulaEditor <span class="token keyword">from</span> <span class="token string">"easy-formula-editor"</span><span class="token punctuation">;</span><span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">formulaEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>editor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="cdn">CDN</span></h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../dist/formula-editor.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">formulaEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  editor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="export">Export</span></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Latex formula</span>editor<span class="token punctuation">.</span>latex<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// HTML formula</span>editor<span class="token punctuation">.</span>$textSvgElem<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="extending-rich-text-editor-menu-bar">Extending Rich Text Editor Menu Bar</span></h2><h3><span id="registering-menus">Registering Menus</span></h3><p><strong>[Note] It is recommended to use a global approach to register menus.</strong> If there are multiple editors with different custom menus, use the instance method to register menus.</p><h3><span id="global-approach">Global Approach</span></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Menu key, each menu must be unique</span><span class="token keyword">const</span> menuKey <span class="token operator">=</span> <span class="token string">'alertMenuKey'</span> <span class="token comment">// Register the menu</span><span class="token constant">E</span><span class="token punctuation">.</span><span class="token function">registerMenu</span><span class="token punctuation">(</span>menuKey<span class="token punctuation">,</span> AlertMenu<span class="token punctuation">)</span><span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token string">'#div1'</span><span class="token punctuation">)</span>editor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> editor2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token string">'#div2'</span><span class="token punctuation">)</span>editor2<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="instance-approach">Instance Approach</span></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Menu key, each menu must be unique</span><span class="token keyword">const</span> menuKey <span class="token operator">=</span> <span class="token string">'alertMenuKey'</span> <span class="token keyword">const</span> menuKey2 <span class="token operator">=</span> <span class="token string">'alertMenuKey2'</span><span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token string">'#div1'</span><span class="token punctuation">)</span><span class="token comment">// Register the menu</span>editor<span class="token punctuation">.</span>menus<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>menuKey<span class="token punctuation">,</span> AlertMenu<span class="token punctuation">)</span><span class="token comment">// Add the menu to editor.config.menus    const menuKey = 'alertMenuKey' </span><span class="token comment">// Menu order can also be adjusted through configuration, refer to the documentation on "Configuring Menus"    editor.config.menus.push(menuKey)</span>editor<span class="token punctuation">.</span>config<span class="token punctuation">.</span>menus <span class="token operator">=</span> editor<span class="token punctuation">.</span>config<span class="token punctuation">.</span>menus<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>menuKey<span class="token punctuation">)</span><span class="token comment">// After registering the menu, create the editor, order matters!!</span>editor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> editor2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token string">'#div2'</span><span class="token punctuation">)</span>editor2<span class="token punctuation">.</span>menus<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>menuKey2<span class="token punctuation">,</span> AlertMenu<span class="token punctuation">)</span>editor2<span class="token punctuation">.</span>config<span class="token punctuation">.</span>menus<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>menuKey2<span class="token punctuation">)</span>editor2<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="real-project-integration-example">Real Project Integration Example</span></h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token constant">E</span> <span class="token keyword">from</span> <span class="token string">"wangeditor"</span><span class="token punctuation">;</span><span class="token keyword">import</span> formulaEditor <span class="token keyword">from</span> <span class="token string">"easy-formula-editor"</span><span class="token punctuation">;</span><span class="token keyword">import</span> createPanelConf <span class="token keyword">from</span> <span class="token string">"./create-panel-conf"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> PanelMenu<span class="token punctuation">,</span> Panel <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token constant">E</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AlertMenu</span> <span class="token keyword">extends</span> <span class="token class-name">PanelMenu</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">editor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// The data-title attribute indicates a tooltip for the button when the mouse hovers over it</span>    <span class="token keyword">const</span> $elem <span class="token operator">=</span> <span class="token constant">E</span><span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span>      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="w-e-menu" data-title="Math Formula">        &lt;span>Formula&lt;/span>      &lt;/div></span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>$elem<span class="token punctuation">,</span> editor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * Menu click event   */</span>  <span class="token function">clickHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> formula <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">formulaEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> conf <span class="token operator">=</span> <span class="token function">createPanelConf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">,</span> formula<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Panel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> conf<span class="token punctuation">)</span><span class="token punctuation">;</span>    panel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formula<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"#edit-content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">tryChangeActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> menuKey <span class="token operator">=</span> <span class="token string">"alertMenuKey"</span><span class="token punctuation">;</span><span class="token comment">// Register the menu</span><span class="token constant">E</span><span class="token punctuation">.</span><span class="token function">registerMenu</span><span class="token punctuation">(</span>menuKey<span class="token punctuation">,</span> AlertMenu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token constant">E</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">&#x2F;&#x2F;create-panel-conf.tsexport default function (wangEditor, formulaEditor) &#123;    const btnOkId &#x3D; &#39;btn-ok&#39;      &#x2F;**     * Insert formula     *&#x2F;    function insertFomule() &#123;      const formula &#x3D; formulaEditor.latex.text()      &#x2F;&#x2F; Ensure that there are spaces on both sides when inserting into wangEditor, otherwise it may lead to focus issues      wangEditor.txt.append(&#39;&lt;p&gt;&#39;+formula+&#39;&lt;&#x2F;p&gt;&#39;)      return true    &#125;      &#x2F;&#x2F; Tabs configuration    const tabsConf &#x3D; [      &#123;        &#x2F;&#x2F; Tab title        title: &quot;Insert Math Formula&quot;,        &#x2F;&#x2F; Template        tpl: &#96;&lt;div&gt;                &lt;div id&#x3D;&quot;edit-content&quot;&gt;&lt;&#x2F;div&gt;                &lt;div class&#x3D;&quot;w-e-button-container&quot;&gt;                  &lt;button type&#x3D;&quot;button&quot; id&#x3D;&quot;$&#123;btnOkId&#125;&quot; class&#x3D;&quot;right&quot;&gt;Insert&lt;&#x2F;button&gt;                &lt;&#x2F;div&gt;              &lt;&#x2F;div&gt;&#96;,        &#x2F;&#x2F; Event bindings        events: [          &#x2F;&#x2F; Insert formula          &#123;            selector: &#39;#&#39; + btnOkId,            type: &#39;click&#39;,            fn: insertFomule,            bindEnter: true,          &#125;,        ],      &#125;, &#x2F;&#x2F; Tab end    ]      return &#123;        width: 660,        height: 0,        &#x2F;&#x2F; Panel can contain multiple tabs        tabs: tabsConf, &#x2F;&#x2F; Tabs end      &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using the above code, you can add a formula editor menu to the rich text editor:</p><pre><code class="vue">&lt;template&gt;  &lt;div class=&quot;formula-container&quot;&gt;    &lt;v-card elevation=&quot;0&quot; class=&quot;formula-card&quot; title=&quot;Output Area&quot; subtitle=&quot;Output&quot;&gt;      &lt;div id=&quot;formula&quot; class=&quot;formula-content&quot;&gt;        &#123;&#123; renderedFormula ? `$$&#123;renderedFormula&#125;$` : '' &#125;&#125;      &lt;/div&gt;    &lt;/v-card&gt;    &lt;div class=&quot;editor-area&quot;&gt;      &lt;div id=&quot;wang-editor&quot; class=&quot;editor&quot;&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import E from &quot;../utils/formula-menu-conf&quot;;import &#123; ref, onMounted, nextTick, defineProps, watchEffect &#125; from &quot;vue&quot;;// Define propsconst props = defineProps(&#123;  initMessage: &#123;    type: String,    default: &quot;&quot;,  &#125;&#125;);watchEffect(() =&gt; &#123;  props.initMessage;&#125;);const editor = ref(null);const renderedFormula = ref(&quot;&quot;);function convert() &#123;  MathJax.texReset();  MathJax.typesetClear();  MathJax.typesetPromise();&#125;function updateFormula() &#123;  renderedFormula.value = editor.value.txt.text();  nextTick(convert);&#125;onMounted(() =&gt; &#123;  editor.value = new E(&quot;#wang-editor&quot;);  editor.value.config.height = 360;  editor.value.config.menus = [&#39;head&#39;, &#39;bold&#39;, &#39;underline&#39;, &#39;strikeThrough&#39;,&#39;emoticon&#39;, &#39;undo&#39;, &#39;redo&#39;];  editor.value.config.onchange = updateFormula;  editor.value.config.onchangeTimeout = 500;  editor.value.create();  editor.value.txt.html(props.initMessage);&#125;);&lt;/script&gt;This setup allows seamless integration of the formula editor with a rich text editor, as depicted in the following image:![MathJax](/img/mathjax/mathjax-2.png)Here&#39;s a link to the official documentation for WangEditor: [www.wangeditor.com/v4](https://www.wangeditor.com/v4)Feel free to reach out if you have any further questions or need additional clarification.</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;introduction&quot;&gt;Introduction&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;In a project, there was a need for a rich text editor with support for formula editin</summary>
      
    
    
    
    <category term="Vue" scheme="https://ikkkp.github.io/categories/Vue/"/>
    
    <category term="MathJax" scheme="https://ikkkp.github.io/categories/Vue/MathJax/"/>
    
    <category term="Latex" scheme="https://ikkkp.github.io/categories/Vue/MathJax/Latex/"/>
    
    
    <category term="Vue,MathJax,Latex" scheme="https://ikkkp.github.io/tags/Vue-MathJax-Latex/"/>
    
  </entry>
  
  <entry>
    <title>React入门-第三篇</title>
    <link href="https://ikkkp.github.io/2024/01/23/react-3/"/>
    <id>https://ikkkp.github.io/2024/01/23/react-3/</id>
    <published>2024-01-23T04:36:30.000Z</published>
    <updated>2024-01-23T10:42:45.954Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>本篇主要对React的状态进行一个介绍。</p><p><strong>声明式 UI 与命令式 UI 的比较</strong></p><p>当你设计 UI 交互时，可能会去思考 UI 如何根据用户的操作而响应变化。想象一个允许用户提交一个答案的表单：</p><ul><li><p>当你向表单输入数据时，“提交”按钮会随之变成可用状态</p></li><li><p>当你点击“提交”后，表单和提交按钮都会随之变成不可用状态，并且会加载动画会随之出现</p></li><li><p>如果网络请求成功，表单会随之隐藏，同时“提交成功”的信息会随之出现</p></li><li><p>如果网络请求失败，错误信息会随之出现，同时表单又变为可用状态</p></li></ul><p><code>在 命令式编程 中，以上的过程直接告诉你如何去实现交互。你必须去根据要发生的事情写一些明确的命令去操作 UI。</code></p><p>而在Vuejs渐进式框架和React库里面都是采用的声明式编程。</p><h2><span id="声明式地考虑-ui">声明式地考虑 UI</span></h2><p>你已经从上面的例子看到如何去实现一个表单了，为了更好地理解如何在 React 中思考，一般情况下要用 React 重新实现这个 UI就要经过这几个一般步骤：</p><ol><li><p>定位你的组件中不同的视图状态</p></li><li><p>确定是什么触发了这些 state 的改变</p></li><li><p>表示内存中的 state（需要使用 useState）</p></li><li><p>删除任何不必要的 state 变量</p></li><li><p>连接事件处理函数去设置 state</p></li></ol><h2><span id="react的状态管理">React的状态管理</span></h2><p>在React中，状态管理是一个非常重要的概念，React的状态管理是通过<code>state</code>来实现的。</p><h3><span id="state">state</span></h3><p><code>state</code>是React组件中的一个内置对象，用于存储组件内部的状态。<code>state</code>是一个普通的JavaScript对象，我们可以通过<code>this.state</code>来访问它。</p><p><strong>React 会为 UI 中的组件结构构建 渲染树。</strong></p><p>当向一个组件添加状态时，那么可能会认为状态“存在”在组件内。但实际上，状态是由 React 保存的。<strong>React 通过组件在渲染树中的位置将它保存的每个状态与正确的组件关联起来。</strong></p><p>这边与Vuejs的区别是，Vue的响应式系统是与组件进行隔离开来的，而React的状态是与组件进行绑定的。</p><p><em>我们将state嵌入进React的组件里面，作为组件vnode的一部分信息，当React的state更新时，也意味着组件的信息更新，会触发组件的重新渲染。</em></p><p>如果理解了这一点，那么我们就可以很轻易的理解React的响应式是怎么工作的了，React的状态是与组件绑定的，当状态更新时，组件也会更新，这也是React的响应式系统。</p><p>我们来具体给一个例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token operator">&lt;</span>Counter <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token punctuation">&#123;</span>counter<span class="token punctuation">&#125;</span>      <span class="token punctuation">&#123;</span>counter<span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>score<span class="token punctuation">,</span> setScore<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>hover<span class="token punctuation">,</span> setHover<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> className <span class="token operator">=</span> <span class="token string">'counter'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hover<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    className <span class="token operator">+=</span> <span class="token string">' hover'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div      className<span class="token operator">=</span><span class="token punctuation">&#123;</span>className<span class="token punctuation">&#125;</span>      onPointerEnter<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setHover</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>      onPointerLeave<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setHover</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    <span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">&#123;</span>score<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setScore</span><span class="token punctuation">(</span>score <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>        加一      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是它们的树形结构的样子：</p><p><img src="/img/react/react-4.webp" alt="vue-react"></p><p>这是两个独立的 counter，因为它们在树中被渲染在了各自的位置。 一般情况下你不用去考虑这些位置来使用 React，但知道它们是如何工作会很有用。</p><p>而他们有各自的状态，因为每个组件实例都有自己的 state。 你可以在一个组件中使用多个 state 变量。当我更新了state之后，会触发组件的重新渲染，这边我们可以看到，两个counter的状态是独立的，互不影响。</p><p><strong>相同位置的相同组件会使得 state 被保留下来</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isFancy<span class="token punctuation">,</span> setIsFancy<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token punctuation">&#123;</span>isFancy <span class="token operator">?</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Counter isFancy<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>       <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Counter isFancy<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>       <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span>label<span class="token operator">></span>        <span class="token operator">&lt;</span>input          type<span class="token operator">=</span><span class="token string">"checkbox"</span>          checked<span class="token operator">=</span><span class="token punctuation">&#123;</span>isFancy<span class="token punctuation">&#125;</span>          onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">setIsFancy</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>checked<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token operator">/</span><span class="token operator">></span>        使用好看的样式      <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> isFancy <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>score<span class="token punctuation">,</span> setScore<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>hover<span class="token punctuation">,</span> setHover<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> className <span class="token operator">=</span> <span class="token string">'counter'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hover<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    className <span class="token operator">+=</span> <span class="token string">' hover'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isFancy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    className <span class="token operator">+=</span> <span class="token string">' fancy'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div      className<span class="token operator">=</span><span class="token punctuation">&#123;</span>className<span class="token punctuation">&#125;</span>      onPointerEnter<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setHover</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>      onPointerLeave<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setHover</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    <span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">&#123;</span>score<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setScore</span><span class="token punctuation">(</span>score <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>        加一      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/react/react-7.webp" alt="vue-react"></p><p>那么<strong>相同位置的不同组件会使 state 重置</strong>，这一点应该大家也能够知道为什么了。</p><p>再举一个例子：将一个<code>&lt;Counter&gt; </code>替换为一个 <code>&lt;p&gt;</code></p><p><img src="/img/react/react-5.webp" alt="vue-react"></p><p>当 Counter 变为 p 时，Counter 会被移除，同时 p 被添加。</p><p><img src="/img/react/react-6.webp" alt="vue-react"></p><p>当切换回来时，p 会被删除，而 Counter 会被添加</p><p>参考的React文档在这里：<a href="https://zh-hans.react.dev/learn/preserving-and-resetting-state">状态与渲染树中的位置相关</a></p><h2><span id="提取状态逻辑到-reducer-中">提取状态逻辑到 reducer 中</span></h2><p><strong>对于那些需要更新多个状态的组件来说，过于分散的事件处理程序可能会令人不知所措。</strong>对于这种情况，你可以在组件外部将所有状态更新逻辑合并到一个称为 <code>“reducer”</code> 的函数中。这样，事件处理程序就会变得简洁，因为它们只需要指定用户的 <code>“actions”</code>。在文件的底部，<code>reducer</code> 函数指定状态应该如何更新以响应每个 <code>action</code>！</p><p><strong>useReducer 是 React 中的一个 Hook，用于管理组件的状态逻辑。</strong><code>它提供了一种更复杂状态逻辑的组织方式，适用于那些包含多个子值或需要根据先前的状态来更新的状态。</code> useReducer 的使用方式类似于 <code>Redux</code> 中的 <code>reducer</code> 概念。</p><p>下面是 <code>useReducer</code> 的基本用法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useReducer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token comment">// reducer函数，接受当前state和action，返回新的state</span><span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string">'INCREMENT'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'DECREMENT'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">Counter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 使用useReducer，传入reducer和初始state</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token literal-property property">Count</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'INCREMENT'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>Increment<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'DECREMENT'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>Decrement<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Counter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要的步骤包括：</p><ol><li><p>定义 <code>reducer</code> 函数： 这个函数接收当前状态 <code>state</code> 和一个描述动作的 <code>action</code>，然后根据 <code>action</code> 的类型执行相应的逻辑，并返回新的状态。</p></li><li><p>初始化状态： 通过调用 <code>useReducer(reducer, initialState)</code> 来创建状态和 <code>dispatch</code> 函数。</p></li><li><p>在组件中使用状态和 <code>dispatch</code>： 通过 <code>state</code> 访问当前状态值，通过 <code>dispatch</code> 触发 <code>reducer</code> 执行。</p></li></ol><h2><span id="使用-context-进行深层数据传递">使用 Context 进行深层数据传递</span></h2><p><strong>通常，你会通过 props 将信息从父组件传递给子组件。</strong> 但是，如果要在组件树中深入传递一些 prop，或者树里的许多组件需要使用相同的 prop，那么传递 prop 可能会变得很麻烦。Context 允许父组件将一些信息提供给它下层的任何组件，不管该组件多深层也无需通过 props 逐层透传。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> createContext<span class="token punctuation">,</span> useContext<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token comment">// 创建一个Context</span><span class="token keyword">const</span> MyContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一个包含Provider和Consumer的组件</span><span class="token keyword">const</span> <span class="token function-variable function">MyProvider</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'Hello from Context'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>MyContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> setData <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>      <span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>MyContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 使用 useContext 获取Context中的值</span><span class="token keyword">const</span> <span class="token function-variable function">ChildComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> setData <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>MyContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">'Updated Context'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>Update Context<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 在应用中使用Provider包裹需要共享数据的组件</span><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>MyProvider<span class="token operator">></span>      <span class="token operator">&lt;</span>ChildComponent <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>MyProvider<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="使用-reducer-和-context-进行状态扩展">使用 Reducer 和 Context 进行状态扩展</span></h2><p>Reducer 帮助你合并组件的状态更新逻辑同时Context 帮助你将信息深入传递给其他组件。</p><p>你可以将 reducers 和 context 组合在一起使用，以管理复杂应用的状态。</p><p>基于这种想法，使用 reducer 来管理一个具有复杂状态的父组件。组件树中任何深度的其他组件都可以通过 context 读取其状态。还可以 dispatch 一些 action 来更新状态。</p><p><code>合理的使用 Reducer 和 Context 可以帮助你更好的管理状态，同时也可以让你的代码更加简洁。</code></p><p>相比于Vuejs基于Proxy的响应式系统，使用代理的方式，以及provide和inject的方式，Vuejs的状态管理是在一个单独的WeekMap里面进行管理的，当变量的状态进行改变，可以激活effect副作用函数，并进行值的更新。而React的状态管理是与组件绑定的，当状态更新时，组件也会更新，但是当我们要进行一个全局状态的管理时，就得进行在父组件里面定义。</p><p>能基于具体的情况进行React状态的定义，才能更好的进行状态的管理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;本篇主要对React的状态进行一个介绍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;声明式 UI 与命令式 UI 的比较&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当你设计 UI 交互时，可能会去思考 UI 如何根据用户的操作而响应</summary>
      
    
    
    
    <category term="React" scheme="https://ikkkp.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://ikkkp.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Getting Started with React - Part 3</title>
    <link href="https://ikkkp.github.io/2024/01/23/en/react-3/"/>
    <id>https://ikkkp.github.io/2024/01/23/en/react-3/</id>
    <published>2024-01-23T04:36:30.000Z</published>
    <updated>2024-01-23T10:46:55.961Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="preface">Preface</span></h2><p>This article mainly introduces the concept of state in React.</p><p><strong>Comparison between Declarative UI and Imperative UI</strong></p><p>When designing UI interactions, you may think about how the UI responds to changes based on user actions. Imagine a form that allows users to submit an answer:</p><ul><li><p>As you input data into the form, the “Submit” button becomes enabled.</p></li><li><p>When you click “Submit,” the form and the submit button become disabled, and a loading animation appears.</p></li><li><p>If the network request is successful, the form hides, and a “Submission Successful” message appears.</p></li><li><p>If the network request fails, an error message appears, and the form becomes enabled again.</p></li></ul><p><code>In imperative programming, the above process tells you directly how to implement the interaction. You have to write explicit commands to manipulate the UI based on what should happen.</code></p><p>Both Vue.js and React follow a declarative programming approach.</p><h2><span id="thinking-declaratively-about-ui-in-react">Thinking Declaratively About UI in React</span></h2><p>From the example above, you’ve seen how to implement a form. To better understand how to think in React, you generally need to follow these steps to reimplement this UI in React:</p><ol><li><p>Identify different view states in your component.</p></li><li><p>Determine what triggers the changes in these states.</p></li><li><p>Represent the state in memory (using <code>useState</code>).</p></li><li><p>Remove any unnecessary state variables.</p></li><li><p>Connect event handling functions to set state.</p></li></ol><h2><span id="state-management-in-react">State Management in React</span></h2><p>In React, state management is a crucial concept, and it is achieved through <code>state</code>. <code>state</code> is an internal object in a React component used to store the component’s internal state. It is a regular JavaScript object, accessible through <code>this.state</code>.</p><p><strong>React builds a render tree for the UI components.</strong></p><p>When you add state to a component, you might think that the state “exists” within the component. However, in reality, React keeps track of each state by associating it with the correct component based on its position in the render tree.</p><p>This is different from Vue.js, where the reactive system is isolated from components, while React’s state is bound to components.</p><p><em>We embed the state into React components as part of the component’s vnode information. When React’s state updates, it implies that the component’s information updates, triggering a re-render.</em></p><p>Understanding this, we can easily grasp how React’s reactivity works. React’s state is bound to components, and when the state updates, the component also updates. This is the reactive system in React.</p><p>Let’s take a specific example:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token operator">&lt;</span>Counter <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token punctuation">&#123;</span>counter<span class="token punctuation">&#125;</span>      <span class="token punctuation">&#123;</span>counter<span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>score<span class="token punctuation">,</span> setScore<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>hover<span class="token punctuation">,</span> setHover<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> className <span class="token operator">=</span> <span class="token string">'counter'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hover<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    className <span class="token operator">+=</span> <span class="token string">' hover'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div      className<span class="token operator">=</span><span class="token punctuation">&#123;</span>className<span class="token punctuation">&#125;</span>      onPointerEnter<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setHover</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>      onPointerLeave<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setHover</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    <span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">&#123;</span>score<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setScore</span><span class="token punctuation">(</span>score <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>        Add One      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The tree structure for these components looks like this:</p><p><img src="/img/react/react-4.webp" alt="vue-react"></p><p>These are two independent counters because they are rendered at their respective positions in the tree. In general, you don’t need to consider these positions when using React, but knowing how they work can be useful.</p><p>They have their own states because each component instance has its own state. You can use multiple state variables in a component. When I update the state, it triggers a re-render of the component. Here, you can see that the states of the two counters are independent and do not affect each other.</p><h2><span id="preserving-and-resetting-state-in-react">Preserving and Resetting State in React</span></h2><p><strong>Same Component at the Same Position Retains State</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isFancy<span class="token punctuation">,</span> setIsFancy<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token punctuation">&#123;</span>isFancy <span class="token operator">?</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Counter isFancy<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>       <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Counter isFancy<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>       <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span>label<span class="token operator">></span>        <span class="token operator">&lt;</span>input          type<span class="token operator">=</span><span class="token string">"checkbox"</span>          checked<span class="token operator">=</span><span class="token punctuation">&#123;</span>isFancy<span class="token punctuation">&#125;</span>          onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">setIsFancy</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>checked<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token operator">/</span><span class="token operator">></span>        Use Fancy Style      <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> isFancy <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>score<span class="token punctuation">,</span> setScore<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>hover<span class="token punctuation">,</span> setHover<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> className <span class="token operator">=</span> <span class="token string">'counter'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hover<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    className <span class="token operator">+=</span> <span class="token string">' hover'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isFancy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    className <span class="token operator">+=</span> <span class="token string">' fancy'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div      className<span class="token operator">=</span><span class="token punctuation">&#123;</span>className<span class="token punctuation">&#125;</span>      onPointerEnter<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setHover</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>      onPointerLeave<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setHover</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    <span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">&#123;</span>score<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setScore</span><span class="token punctuation">(</span>score <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>        Add One      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/react/react-7.webp" alt="vue-react"></p><p><strong>Different Components at the Same Position Reset State</strong></p><p>This is intuitive as changing components at the same position would reset the state. Consider replacing <code>&lt;Counter&gt;</code> with a <code>&lt;p&gt;</code>:</p><p><img src="/img/react/react-5.webp" alt="vue-react"></p><p>When Counter is replaced with p, Counter is removed, and p is added.</p><p><img src="/img/react/react-6.webp" alt="vue-react"></p><p>When switching back, p is removed, and Counter is added.</p><p>Reference in the React documentation: <a href="https://reactjs.org/docs/state-and-lifecycle.html#preserving-state-in-the-tree">State and Lifecycle - Preserving State in the Tree</a></p><h2><span id="extracting-state-logic-into-a-reducer">Extracting State Logic into a Reducer</span></h2><p><strong>For components requiring updates to multiple states, scattered event handlers may become overwhelming.</strong> In such cases, you can consolidate all state update logic into a function called a “reducer” outside the component. Event handlers become concise as they only need to specify user “actions.” At the bottom of the file, the <code>reducer</code> function specifies how the state should be updated in response to each action!</p><p><strong>useReducer is a React Hook for managing component state logic.</strong> <code>It provides an organized way to handle more complex state logic, suitable for those with multiple sub-values or states that need to be updated based on previous states.</code> The usage of useReducer is similar to the reducer concept in Redux.</p><p>Here’s a basic example of useReducer:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useReducer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token comment">// Reducer function, takes current state and action, returns new state</span><span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string">'INCREMENT'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'DECREMENT'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">Counter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Use useReducer, pass in reducer and initial state</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token literal-property property">Count</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'INCREMENT'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>Increment<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'DECREMENT'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>Decrement<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Counter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Key steps include:</p><ol><li><p>Define the <code>reducer</code> function: This function takes the current state <code>state</code> and an action describing the action. It then executes the corresponding logic based on the action type and returns a new state.</p></li><li><p>Initialize state: Create state and <code>dispatch</code> function by calling <code>useReducer(reducer, initialState)</code>.</p></li><li><p>Use state and <code>dispatch</code> in the component: Access the current state value through <code>state</code> and trigger the <code>reducer</code> with <code>dispatch</code>.</p></li></ol><h2><span id="deep-data-transfer-using-context">Deep Data Transfer Using Context</span></h2><p><strong>Usually, information is passed from parent to child components through props.</strong> However, if you need to deeply pass some prop in the component tree, or if many components in the tree need to use the same prop, passing props can become cumbersome. Context allows a parent component to provide some information to any lower-level component without the need for props to be passed layer by layer.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> createContext<span class="token punctuation">,</span> useContext<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token comment">// Create a Context</span><span class="token keyword">const</span> MyContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Create a component with Provider and Consumer</span><span class="token keyword">const</span> <span class="token function-variable function">MyProvider</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'Hello from Context'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>MyContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> setData <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>      <span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>MyContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Use useContext to get values from Context</span><span class="token keyword">const</span> <span class="token function-variable function">ChildComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> setData <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>MyContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">'Updated Context'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>Update Context<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Wrap components that need to share data with Provider in the application</span><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>MyProvider<span class="token operator">></span>      <span class="token operator">&lt;</span>ChildComponent <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>MyProvider<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="extending-state-with-reducer-and-context">Extending State with Reducer and Context</span></h2><p>Reducer helps consolidate state update logic in components, and Context helps pass information deeper into other components.</p><p>You can combine reducers and context to manage the state of complex applications.</p><p>Based on this idea, use a reducer to manage the state of a parent component with complex state. Other components at any depth in the component tree can read its state through context. You can also dispatch some actions to update the state.</p><p><code>Using Reducer and Context intelligently can help you manage state better and make your code more concise.</code></p><p>Compared to Vue.js’s reactive system based on Proxy, using proxies, and the use of provide and inject, Vue.js’s state management is done in a separate WeakMap. When the variable state changes, it can trigger effect side functions and update the value. React’s state management is bound to components, and when the state updates, the component also updates. However, when dealing with global state management, it needs to be defined in the parent component.</p><p>Understanding how to define React state based on specific situations allows for better state management.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;preface&quot;&gt;Preface&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;This article mainly introduces the concept of state in React.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Comparison between</summary>
      
    
    
    
    <category term="React" scheme="https://ikkkp.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://ikkkp.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React入门-第二篇</title>
    <link href="https://ikkkp.github.io/2024/01/20/react-2/"/>
    <id>https://ikkkp.github.io/2024/01/20/react-2/</id>
    <published>2024-01-20T09:45:56.000Z</published>
    <updated>2024-02-16T07:06:57.202Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>这一篇主要来聊一聊React的JSX如何被编译成VNode的。</p><h2><span id="vue的render函数">Vue的render函数</span></h2><p><strong>在此之前，我们都知道，Vue是使用Vue模板方法的方式进行组件的声明。</strong>我们先来回顾一下Vue是怎么处理的。</p><p>Vue模板经过Vue的编译器编译成render函数，最后render函数返回VNode，然后再通过patch函数将VNode渲染成真实DOM。</p><p>具体的renderer细节在以前的章节里面有提到过，这边就不再赘述了。</p><h2><span id="react的jsx">React的JSX</span></h2><p><code>react</code>通过将组件编写的JSX映射到屏幕，以及组件中的状态发生了变化之后 <code>React</code>会将这些「变化」更新到屏幕上</p><p>JSX通过<code>babel</code>最终转化成<code>React.createElement</code>这种形式,至于babel是具体怎么将JSX转化成<code>React.createElement</code>的，我们可以通过babel的在线编译器来查看。</p><pre class="line-numbers language-Html" data-language="Html"><code class="language-Html">&lt;div&gt;  &lt; img src&#x3D;&quot;avatar.png&quot; className&#x3D;&quot;profile&quot; &#x2F;&gt;  &lt;Hello &#x2F;&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>会被bebel转化成如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>  <span class="token string">"div"</span><span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">,</span>  React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"avatar.png"</span><span class="token punctuation">,</span>    <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">"profile"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>Hello<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>Babel</code>提供一个<code>REPL</code>在线编译器，可以在线将ES6代码转为ES5代码。转换后的代码，可以直接作为ES5代码插入网页运行</strong>,这边贴一个链接：<a href="https://babeljs.io/">https://babeljs.io/</a></p><p><img src="/img/react/react-1.png" alt="vue-react"></p><p>在转化过程中，babel在编译时会判断 JSX 中组件的首字母：</p><p>当首字母为小写时，其被认定为原生 DOM 标签，<code>createElement</code> 的第一个变量被编译为字符串</p><p>当首字母为大写时，其被认定为自定义组件，<code>createElement</code> 的第一个变量被编译为对象</p><p>最终都会通过<code>RenderDOM.render(...)</code>方法进行挂载，如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="react的jsx转换具体是怎么做的呢">React的JSX转换具体是怎么做的呢</span></h2><p>在react中，节点大致可以分成四个类别：</p><ul><li>原生标签节点</li><li>文本节点</li><li>函数组件</li><li>类组件</li></ul><p>如下所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ClassComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"pink"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"border"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>ClassComponent<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>color<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p <span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">FunctionComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"border"</span><span class="token operator">></span>      FunctionComponent      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p <span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> jsx <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"border"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>xx<span class="token operator">&lt;</span><span class="token operator">/</span>p <span class="token operator">></span>    <span class="token operator">&lt;</span> a href<span class="token operator">=</span><span class="token string">" "</span><span class="token operator">></span>xxx<span class="token operator">&lt;</span><span class="token operator">/</span> a<span class="token operator">></span>    <span class="token operator">&lt;</span>FunctionComponent name<span class="token operator">=</span><span class="token string">"函数组件"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ClassComponent name<span class="token operator">=</span><span class="token string">"类组件"</span> color<span class="token operator">=</span><span class="token string">"red"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这些类别最终都会被转化成React.createElement这种形式</strong></p><p><img src="/img/react/react-2.png" alt="vue-react"></p><p>React.createElement其被调用时会传⼊标签类型type，标签属性props及若干子元素children，作用是生成一个虚拟Dom对象，如下所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> config<span class="token punctuation">,</span> <span class="token operator">...</span>children</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">delete</span> config<span class="token punctuation">.</span>__self<span class="token punctuation">;</span>        <span class="token keyword">delete</span> config<span class="token punctuation">.</span>__source<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// ! 源码中做了详细处理，⽐如过滤掉key、ref等</span>    <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token operator">...</span>config<span class="token punctuation">,</span>        <span class="token literal-property property">children</span><span class="token operator">:</span> children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=></span>   <span class="token keyword">typeof</span> child <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">?</span> child <span class="token operator">:</span> <span class="token function">createTextNode</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>  <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        type<span class="token punctuation">,</span>        props    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">TEXT</span><span class="token punctuation">,</span>        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">nodeValue</span><span class="token operator">:</span> text        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    createElement<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>createElement会根据传入的节点信息进行一个判断：</p><ul><li>如果是原生标签节点， type 是字符串，如div、span</li><li>如果是文本节点， type就没有，这里是 TEXT</li><li>如果是函数组件，type 是函数名</li><li>如果是类组件，type 是类名</li><li>虚拟DOM会通过ReactDOM.render进行渲染成真实DOM，使用方法如下：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> container<span class="token punctuation">[</span><span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当首次调用时，容器节点里的所有 DOM 元素都会被替换，后续的调用则会使用 React 的 diff算法进行高效的更新</p><p>如果提供了可选的回调函数callback，该回调将在组件被渲染或更新之后被执行<br>render大致实现方法如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"vnode"</span><span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 虚拟DOM对象</span>    <span class="token comment">// vnode _> node</span>    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建真实DOM节点</span><span class="token keyword">function</span> <span class="token function">createNode</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> parentNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>type<span class="token punctuation">,</span> props<span class="token punctuation">&#125;</span> <span class="token operator">=</span> vnode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token constant">TEXT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node <span class="token operator">=</span> type<span class="token punctuation">.</span>isReactComponent            <span class="token operator">?</span> <span class="token function">updateClassComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> parentNode<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token function">updateFunctionComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">reconcileChildren</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">updateNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 遍历下子vnode，然后把子vnode->真实DOM节点，再插入父node中</span><span class="token keyword">function</span> <span class="token function">reconcileChildren</span><span class="token punctuation">(</span><span class="token parameter">children<span class="token punctuation">,</span> node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> child<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">render</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">render</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">updateNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> nextVal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>nextVal<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">k</span> <span class="token operator">=></span> k <span class="token operator">!==</span> <span class="token string">"children"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">k</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"on"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> eventName <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> nextVal<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            node<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nextVal<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 返回真实dom节点</span><span class="token comment">// 执行函数</span><span class="token keyword">function</span> <span class="token function">updateFunctionComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> parentNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>type<span class="token punctuation">,</span> props<span class="token punctuation">&#125;</span> <span class="token operator">=</span> vnode<span class="token punctuation">;</span>    <span class="token keyword">let</span> vvnode <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>vvnode<span class="token punctuation">,</span> parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 返回真实dom节点</span><span class="token comment">// 先实例化，再执行render函数</span><span class="token keyword">function</span> <span class="token function">updateClassComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> parentNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>type<span class="token punctuation">,</span> props<span class="token punctuation">&#125;</span> <span class="token operator">=</span> vnode<span class="token punctuation">;</span>    <span class="token keyword">let</span> cmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">type</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vvnode <span class="token operator">=</span> cmp<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>vvnode<span class="token punctuation">,</span> parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    render<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在react源码中，虚拟Dom转化成真实Dom整体流程如下图所示：</p><p><img src="/img/react/react-3.png" alt="vue-react"></p><p>其渲染流程如下所示：</p><ul><li><p>使用<code>React.createElement</code>或<code>JSX</code>编写<code>React</code>组件，实际上所有的 <code>JSX</code> 代码最后都会转换成<code>React.createElement(...) </code>，<code>Babel</code>帮助我们完成了这个转换的过程。</p></li><li><p><code>createElement</code>函数对key和ref等特殊的props进行处理，并获取defaultProps对默认props进行赋值，并且对传入的孩子节点进行处理，最终构造成一个虚拟DOM对象</p></li><li><p><code>ReactDOM.render</code>将生成好的虚拟DOM渲染到指定容器上，其中采用了批处理、事务等机制并且对特定浏览器进行了性能优化，最终转换为真实DOM</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;这一篇主要来聊一聊React的JSX如何被编译成VNode的。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;vue的render函数&quot;&gt;Vue的render函数&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;在此之前，我</summary>
      
    
    
    
    <category term="React" scheme="https://ikkkp.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://ikkkp.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Getting Started with React - Part 2</title>
    <link href="https://ikkkp.github.io/2024/01/20/en/react-2/"/>
    <id>https://ikkkp.github.io/2024/01/20/en/react-2/</id>
    <published>2024-01-20T09:45:56.000Z</published>
    <updated>2024-02-16T07:05:47.789Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="introduction">Introduction</span></h2><p>This article focuses on how React’s JSX is compiled into VNodes.</p><h2><span id="vues-render-function">Vue’s Render Function</span></h2><p><strong>Before diving into React’s JSX, let’s recall how Vue declares components using the Vue template method.</strong> Vue templates are compiled by the Vue compiler into render functions. The render function returns VNodes, and these VNodes are then rendered into real DOM through the patch function.</p><p>Details of the renderer have been discussed in previous chapters and will not be reiterated here.</p><h2><span id="reacts-jsx">React’s JSX</span></h2><p><code>React</code> maps JSX written in components to the screen, and when the state within components changes, <code>React</code> updates these “changes” on the screen.</p><p>JSX is ultimately transformed into a form like <code>React.createElement</code> by <code>babel</code>. As for how <code>babel</code> transforms JSX into <code>React.createElement</code>, we can use babel’s online compiler to check.</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar.png<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>profile<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Hello</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Will be transformed by babel into:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>  <span class="token string">"div"</span><span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">,</span>  React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"avatar.png"</span><span class="token punctuation">,</span>    <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">"profile"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>Hello<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>Babel</code> provides an online REPL compiler that can convert ES6 code to ES5 code online. The transformed code can be directly inserted into a webpage and run as ES5 code.</strong> Here’s a link: <a href="https://babeljs.io/">Babel Online Compiler</a></p><p><img src="/img/react/react-1.png" alt="vue-react"></p><p>During the transformation process, babel at compile time judges the first letter of the component in JSX:</p><p>When the first letter is lowercase, it is recognized as a native DOM tag, and the first variable of <code>createElement</code> is compiled into a string.</p><p>When the first letter is uppercase, it is recognized as a custom component, and the first variable of <code>createElement</code> is compiled into an object.</p><p>In the end, both will be mounted through the <code>ReactDOM.render(...)</code> method, as shown below:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="how-is-reacts-jsx-transformed">How is React’s JSX Transformed?</span></h2><p>In React, nodes can be roughly divided into four categories:</p><ul><li>Native tag nodes</li><li>Text nodes</li><li>Function components</li><li>Class components</li></ul><p>As shown below:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ClassComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"pink"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"border"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>ClassComponent<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>color<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">FunctionComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"border"</span><span class="token operator">></span>      FunctionComponent      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> jsx <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"border"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>xx<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">" "</span><span class="token operator">></span>xxx<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span>FunctionComponent name<span class="token operator">=</span><span class="token string">"Function Component"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ClassComponent name<span class="token operator">=</span><span class="token string">"Class Component"</span> color<span class="token operator">=</span><span class="token string">"red"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>These categories will ultimately be transformed into the form of <code>React.createElement</code>.</strong></p><p><img src="/img/react/react-2.png" alt="vue-react"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> config<span class="token punctuation">,</span> <span class="token operator">...</span>children</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">delete</span> config<span class="token punctuation">.</span>__self<span class="token punctuation">;</span>        <span class="token keyword">delete</span> config<span class="token punctuation">.</span>__source<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Detailed handling is done in the source code, such as filtering out key, ref, etc.</span>    <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token operator">...</span>config<span class="token punctuation">,</span>        <span class="token literal-property property">children</span><span class="token operator">:</span> children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=></span>            <span class="token keyword">typeof</span> child <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">?</span> child <span class="token operator">:</span> <span class="token function">createTextNode</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        type<span class="token punctuation">,</span>        props    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">TEXT</span><span class="token punctuation">,</span>        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">nodeValue</span><span class="token operator">:</span> text        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    createElement<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <code>createElement</code> function makes decisions based on the passed node information:</p><ul><li>If it’s a native tag node, the type is a string, such as div, span.</li><li>If it’s a text node, the type is not present, here it is TEXT.</li><li>If it’s a function component, the type is the function name.</li><li>If it’s a class component, the type is the class name.</li></ul><p>The virtual DOM is rendered into real DOM using <code>ReactDOM.render</code>, with the following usage:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> container<span class="token punctuation">[</span><span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>When called for the first time, all DOM elements within the container node are replaced. Subsequent calls use React’s diff algorithm for efficient updates.</p><p>If an optional callback function is provided, it will be executed after the component is rendered or updated.</p><p>The <code>render</code> function implementation is roughly as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"vnode"</span><span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Virtual DOM object</span>    <span class="token comment">// vnode -> node</span>    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Create a real DOM node</span><span class="token keyword">function</span> <span class="token function">createNode</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> parentNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> type<span class="token punctuation">,</span> props <span class="token punctuation">&#125;</span> <span class="token operator">=</span> vnode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token constant">TEXT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node <span class="token operator">=</span> type<span class="token punctuation">.</span>isReactComponent            <span class="token operator">?</span> <span class="token function">updateClassComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> parentNode<span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token function">updateFunctionComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">reconcileChildren</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">updateNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Traverse through child vnodes, convert them to real DOM nodes, and then insert into the parent node</span><span class="token keyword">function</span> <span class="token function">reconcileChildren</span><span class="token punctuation">(</span><span class="token parameter">children<span class="token punctuation">,</span> node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> child<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">render</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">render</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">updateNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> nextVal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>nextVal<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">k</span> <span class="token operator">=></span> k <span class="token operator">!==</span> <span class="token string">"children"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">k</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"on"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> eventName <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> nextVal<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                node<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nextVal<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Return a real DOM node</span><span class="token comment">// Execute the function</span><span class="token keyword">function</span> <span class="token function">updateFunctionComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> parentNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> type<span class="token punctuation">,</span> props <span class="token punctuation">&#125;</span> <span class="token operator">=</span> vnode<span class="token punctuation">;</span>    <span class="token keyword">let</span> vvnode <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>vvnode<span class="token punctuation">,</span> parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Return a real DOM node</span><span class="token comment">// Instantiate first, then execute the render function</span><span class="token keyword">function</span> <span class="token function">updateClassComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> parentNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> type<span class="token punctuation">,</span> props <span class="token punctuation">&#125;</span> <span class="token operator">=</span> vnode<span class="token punctuation">;</span>    <span class="token keyword">let</span> cmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">type</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vvnode <span class="token operator">=</span> cmp<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>vvnode<span class="token punctuation">,</span> parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    render<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In the React source code, the overall process of converting virtual DOM to real DOM is shown in the following diagram:</p><p><img src="/img/react/react-3.png" alt="vue-react"></p><p>The rendering process is illustrated as follows:</p><ul><li><p>Use <code>React.createElement</code> or write <code>React</code> components with JSX. In reality, all JSX code is eventually transformed into <code>React.createElement(...)</code> with the help of Babel.</p></li><li><p>The <code>createElement</code> function handles special props such as key and ref, assigns default props with defaultProps, and processes the passed children nodes, ultimately constructing a virtual DOM object.</p></li><li><p><code>ReactDOM.render</code> renders the generated virtual DOM onto the specified container. It employs mechanisms such as batch processing, transactions, and performance optimizations for specific browsers, ultimately transforming into real DOM.</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;introduction&quot;&gt;Introduction&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;This article focuses on how React’s JSX is compiled into VNodes.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;vu</summary>
      
    
    
    
    <category term="React" scheme="https://ikkkp.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://ikkkp.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React入门-第一篇</title>
    <link href="https://ikkkp.github.io/2024/01/20/react-1/"/>
    <id>https://ikkkp.github.io/2024/01/20/react-1/</id>
    <published>2024-01-20T09:10:25.000Z</published>
    <updated>2024-01-20T09:44:50.163Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>最近面了得物春季青训营，项目要求掌握React。之前写过一段时间Next.js，对jsx的理解还算是有些片面，作为Vuejs转React的一个开发者，打算先将Vuejs和React的功能特性做一个对比，然后再根据项目入手React。</p><h2><span id="vuejs和react的相同点">Vuejs和React的相同点</span></h2><p><img src="/img/react/vue-react.jpg" alt="vue-react"></p><p>Vue和React相同点非常多：</p><ul><li>都使用Virtural DOM</li><li>都使用组件化思想，流程基本一致</li><li>都是响应式，推崇单向数据流（Vue的v-model指令允许在表单元素上进行双向数据绑定。）</li><li>都有成熟的社区，都支持服务端渲染</li></ul><p><strong>Vue和React实现原理和流程基本一致，都是使用Virtual DOM + Diff算法。</strong></p><p>不管是Vue的<code>template模板 + options api写法</code>（即使用SFC体系），还是React的<code>Class或者Function</code>（js 的class写法也是function函数的一种）的jsx写法，底层最终都是为了生成render函数。</p><p><strong>render函数执行返回VNode（虚拟DOM树）。</strong> 当每一次UI更新时，总会根据render重新生成最新的VNode，然后跟以前缓存起来老的VNode进行比对，再使用Diff算法（框架核心）去真正更新真实DOM（虚拟DOM是JS对象结构，同样在JS引擎中，而真实DOM在浏览器渲染引擎中，所以操作虚拟DOM比操作真实DOM开销要小的多）。</p><p>Vue和React通用流程：</p><p><code>vue template/react jsx -&gt; render函数 -&gt; 生成VNode -&gt; 当有变化时，新老VNode diff -&gt; diff算法对比，并真正去更新真实DOM。</code></p><p>核心还是Virtual DOM，VNode的好处不用多说：</p><ul><li><p>减少直接操作DOM。框架给我们提供了屏蔽底层dom书写的方式，减少频繁的整更新dom，同时也使得数据驱动视图</p></li><li><p>为函数式UI编程提供可能（React核心思想）</p></li><li><p>可以跨平台，渲染到DOM（web）之外的平台。比如ReactNative，Weex</p></li></ul><p><img src="/img/react/react-vue.webp" alt="vue-react"></p><p>Vue说自己是框架，是因为官方提供了从声明式渲染到构建工具一整套东西。</p><p>React说自己是库，是因为官方只提供了React.js这个核心库，路由、状态管理这些都是社区第三方提供了，最终整合成了一套方案。</p><h2><span id="vue和react的区别">Vue和React的区别</span></h2><h3><span id="组件实现不同">组件实现不同</span></h3><h4><span id="vuejs实现">Vuejs实现</span></h4><p><strong>Vue源码实现是把options挂载到Vue核心类上，然后再new Vue({options})拿到实例（vue组件的script导出的是一个挂满options的纯对象而已）。</strong></p><p>所以options api中的this指向内部Vue实例，对用户是不透明的，所以需要文档去说明this.$slot、this.$xxx这些api。另外Vue插件都是基于Vue原型类基础之上建立的，这也是Vue插件使用Vue.install的原因，因为要确保第三方库的Vue和当前应用的Vue对象是同一个。</p><h4><span id="react实现">React实现</span></h4><p><strong>React内部实现比较简单，直接定义render函数以生成VNode</strong> ，而React内部使用了四大组件类包装VNode，不同类型的VNode使用相应的组件类处理，职责划分清晰明了（后面的Diff算法也非常清晰）。React类组件都是继承自React.Component类，其this指向用户自定义的类，对用户来说是透明的。</p><h3><span id="响应式原理不同">响应式原理不同</span></h3><h4><span id="vuejs实现">Vuejs实现</span></h4><ul><li>Vue依赖收集，自动优化，数据可变。</li><li>Vue递归监听data的所有属性,直接修改。</li><li>当数据改变时，自动找到引用组件重新渲染。</li></ul><h4><span id="react实现">React实现</span></h4><ul><li>React基于状态机，手动优化，数据不可变，需要setState驱动新的State替换老的State。</li><li>当数据改变时，以组件为根目录，默认全部重新渲染</li></ul><h3><span id="diff算法不同">diff算法不同</span></h3><p>Vue基于snabbdom库，它有较好的速度以及模块机制。Vue Diff使用双向链表，边对比，边更新DOM。</p><p>React主要使用diff队列保存需要更新哪些DOM，得到patch树，再统一操作批量更新DOM。</p><h3><span id="事件机制不同">事件机制不同</span></h3><h4><span id="vuejs实现">Vuejs实现</span></h4><ul><li>Vue原生事件使用标准Web事件</li><li>Vue组件自定义事件机制，是父子组件通信基础</li><li>Vue合理利用了snabbdom库的模块插件</li></ul><h4><span id="react实现">React实现</span></h4><ul><li>React原生事件被包装，所有事件都冒泡到顶层document监听，然后在这里合成事件下发。基于这套，可以跨端使用事件机制，而不是和Web DOM强绑定。</li><li>React组件上无事件，父子组件通信使用props</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;最近面了得物春季青训营，项目要求掌握React。之前写过一段时间Next.js，对jsx的理解还算是有些片面，作为Vuejs转React的一个开发者，打算先将Vuejs和React的功能特性做一个对比，然后再根</summary>
      
    
    
    
    <category term="React" scheme="https://ikkkp.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://ikkkp.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Getting Started with React - Part 1</title>
    <link href="https://ikkkp.github.io/2024/01/20/en/react-1/"/>
    <id>https://ikkkp.github.io/2024/01/20/en/react-1/</id>
    <published>2024-01-20T09:10:25.000Z</published>
    <updated>2024-01-22T13:58:28.006Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="introduction">Introduction</span></h2><p>Recently, I interviewed for the Spring Youth Training Camp at Dewu, where proficiency in React was required for the project. Having previously worked with Next.js for a while, my understanding of JSX was somewhat one-sided. As a developer transitioning from Vue.js to React, my plan is to first compare the features of Vue.js and React. Then, I’ll dive into React based on the project requirements.</p><h2><span id="similarities-between-vuejs-and-react">Similarities between Vue.js and React</span></h2><p><img src="/img/react/vue-react.jpg" alt="vue-react"></p><p>Vue and React share many similarities:</p><ul><li>Both use Virtual DOM.</li><li>Both follow a component-based approach with a similar flow.</li><li>Both are reactive and advocate for a unidirectional data flow (Vue’s v-model directive allows two-way data binding on form elements).</li><li>Both have mature communities and support server-side rendering.</li></ul><p><strong>Vue and React have similar implementation principles and processes, both using Virtual DOM + Diff algorithm.</strong></p><p>Whether it’s Vue’s <code>template + options API</code> (using the Single File Component system) or React’s <code>Class or Function</code> (with class syntax in JavaScript also being a form of a function), the underlying goal is to generate a render function.</p><p><strong>The render function produces a VNode (Virtual DOM tree).</strong> With each UI update, a new VNode is generated based on the render function. This new VNode is then compared with the cached old VNode using the Diff algorithm (the core of the framework), and the real DOM is updated accordingly (Virtual DOM is a JS object structure, while the real DOM is in the browser rendering engine, making operations on the Virtual DOM much less resource-intensive).</p><p>Common flow in Vue and React:</p><p><code>vue template/react JSX -&gt; render function -&gt; generate VNode -&gt; when there are changes, diff between old and new VNode -&gt; update the real DOM using the Diff algorithm.</code></p><p>The core is still Virtual DOM, and the advantages of VNode are numerous:</p><ul><li><p>Reduces direct manipulation of the DOM. The framework provides a way to shield the underlying DOM writing, reducing frequent updates to the DOM and making data drive the view.</p></li><li><p>Provides the possibility for functional UI programming (core idea in React).</p></li><li><p>Enables cross-platform rendering beyond the DOM (e.g., React Native, Weex).</p></li></ul><p><img src="/img/react/react-vue.webp" alt="vue-react"></p><p>Vue calls itself a framework because the official documentation provides a complete set of tools from declarative rendering to build tools.</p><p>React calls itself a library because the official package only includes the core React.js library. Routing, state management, and other features are provided by third-party libraries from the community, ultimately integrated into a solution.</p><h2><span id="differences-between-vue-and-react">Differences between Vue and React</span></h2><h3><span id="different-component-implementations">Different Component Implementations</span></h3><h4><span id="vuejs-implementation">Vue.js Implementation</span></h4><p><strong>Vue’s source code attaches options to the Vue core class and then uses <code>new Vue(&#123;options&#125;)</code> to get an instance</strong> (the script exported by Vue components is just an object filled with options). This makes the <code>this</code> in the options API refer to the internal Vue instance, which is opaque to the user. Therefore, documentation is needed to explain APIs like <code>this.$slot</code> and <code>this.$xxx</code>. Additionally, Vue plugins are built on top of the Vue prototype class, which is why Vue plugins use <code>Vue.install</code> to ensure that the Vue object of third-party libraries and the current application’s Vue object are the same.</p><h4><span id="react-implementation">React Implementation</span></h4><p><strong>React’s internal implementation is relatively simple; it directly defines a render function to generate a VNode.</strong> React internally uses four major component classes to wrap VNodes, and different types of VNodes are handled by the corresponding component class, with clear and distinct responsibilities (the subsequent Diff algorithm is also very clear). React class components all inherit from the <code>React.Component</code> class, and their <code>this</code> refers to the user-defined class, making it transparent to the user.</p><h3><span id="different-reactivity-principles">Different Reactivity Principles</span></h3><h4><span id="vuejs-implementation">Vue.js Implementation</span></h4><ul><li>Vue uses dependency collection, automatic optimization, and mutable data.</li><li>Vue recursively listens to all properties of data and directly modifies them.</li><li>When data changes, it automatically finds the referencing components to re-render.</li></ul><h4><span id="react-implementation">React Implementation</span></h4><ul><li>React is based on a state machine, manual optimization, immutable data, and requires <code>setState</code> to drive new state replacement for the old state.</li><li>When data changes, the entire component tree is considered as the root, and by default, all components are re-rendered.</li></ul><h3><span id="different-diff-algorithms">Different Diff Algorithms</span></h3><p>Vue is based on the snabbdom library, which has good speed and a modular mechanism. Vue Diff uses a doubly linked list, comparing and updating the DOM simultaneously.</p><p>React primarily uses a diff queue to save which DOM elements need updating, obtaining a patch tree, and then performing a batch update of the DOM.</p><h3><span id="different-event-mechanisms">Different Event Mechanisms</span></h3><h4><span id="vuejs-implementation">Vue.js Implementation</span></h4><ul><li>Vue uses standard web events for native events.</li><li>Vue has a custom event mechanism for components, forming the basis of parent-child communication.</li><li>Vue makes reasonable use of the snabbdom library’s module plugins.</li></ul><h4><span id="react-implementation">React Implementation</span></h4><ul><li>React’s native events are wrapped, and all events bubble up to the top-level document for listening. They are then synthesized here. Based on this system, the event mechanism can be used cross-platform, not tightly bound to the Web DOM.</li><li>React components have no events; parent-child communication is done using props.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;introduction&quot;&gt;Introduction&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Recently, I interviewed for the Spring Youth Training Camp at Dewu, where proficiency</summary>
      
    
    
    
    <category term="React" scheme="https://ikkkp.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://ikkkp.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Vuejs 组件事件与 emit 的实现</title>
    <link href="https://ikkkp.github.io/2023/12/08/vue-component-2/"/>
    <id>https://ikkkp.github.io/2023/12/08/vue-component-2/</id>
    <published>2023-12-08T08:08:07.000Z</published>
    <updated>2023-12-08T08:51:20.172Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>想把Vuejs 组件事件与 emit 的实现讲清楚，我先要把组件事件和emit的应用讲清楚，这样大家会更清楚的理解组件事件和emit的实现。</p><p>对于组件事件，我们其实之前就已经提到过了浏览器的事件机制：</p><h3><span id="浏览器事件回顾">浏览器事件回顾</span></h3><p>浏览器事件是指在 Web 页面中发生的各种交互和状态变化的信号。这些事件可以由用户的操作、浏览器的状态变化或其他一些因素触发。以下是一些常见的 DOM 事件和它们的简介：</p><h4><span id="鼠标事件">鼠标事件：</span></h4><ul><li><strong>click：</strong> 当鼠标点击一个元素时触发。对于触摸屏设备，也会在触摸屏上进行点击时触发。</li><li><strong>contextmenu：</strong> 当鼠标右键点击一个元素时触发。</li><li><strong>mouseover &#x2F; mouseout：</strong> 当鼠标指针移入或离开一个元素时触发。</li><li><strong>mousedown &#x2F; mouseup：</strong> 当在元素上按下或释放鼠标按钮时触发。</li><li><strong>mousemove：</strong> 当鼠标移动时触发。</li></ul><h4><span id="键盘事件">键盘事件：</span></h4><ul><li><strong>keydown 和 keyup：</strong> 当按下和松开一个按键时触发。</li></ul><h4><span id="表单form元素事件">表单（form）元素事件：</span></h4><ul><li><strong>submit：</strong> 当访问者提交了一个 <code>&lt;form&gt;</code> 时触发。</li><li><strong>focus：</strong> 当访问者聚焦于一个元素时触发，例如聚焦于一个 <code>&lt;input&gt;</code>。</li></ul><h4><span id="document-事件">Document 事件：</span></h4><ul><li><strong>DOMContentLoaded：</strong> 当 HTML 的加载和处理均完成，DOM 被完全构建完成时触发。</li></ul><h4><span id="css-事件">CSS 事件：</span></h4><ul><li><strong>transitionend：</strong> 当一个 CSS 动画完成时触发。</li></ul><p>这些事件可以通过 JavaScript 中的事件监听器来捕获和处理。例如，通过给元素添加事件监听器，可以在特定事件发生时执行相应的代码。事件是 Web 开发中交互和响应的基础。</p><p>那我们所说的组件事件和浏览器事件有什么区别呢？</p><p><strong>对于事件这一个定义，我们可以这样理解：事件是指在特定的时间点上发生的事情，在某个时间点产生了一个信号，而信号可以被接收处理，这就是事件。</strong></p><p>下面我们所说的组件事件，其实相对于浏览器事件来说更为宏观，它是指在Vue组件中，组件之间的通信方式，而这种通信方式是通过事件来实现的，这里的事件就是我们所说的组件事件。</p><p><strong>Vue 组件之间通过事件进行通信的主要机制是通过 emit 和 on 方法。当子组件需要向父组件通信时，它会触发一个事件，并通过 emit 方法将事件发送出去；而父组件则通过在模板中使用 v-on 指令监听这个事件，从而执行相应的逻辑。</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 子组件 ChildComponent.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendMessage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击通知父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 使用 emit 发送自定义事件</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'child-event'</span><span class="token punctuation">,</span> <span class="token string">'Hello from child!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 父组件 ParentComponent.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-component</span> <span class="token attr-name">@child-event</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleChildEvent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-component</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>从子组件接收的消息: &#123;&#123; messageFromChild &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> ChildComponent <span class="token keyword">from</span> <span class="token string">'./ChildComponent.vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    ChildComponent  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">messageFromChild</span><span class="token operator">:</span> <span class="token string">''</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">handleChildEvent</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 使用 v-on 监听子组件的事件</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>messageFromChild <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Vue 的事件机制是通过发布&#x2F;订阅模式实现的。$emit 用于发布（触发）事件，而 v-on 则用于订阅（监听）事件。这使得不同组件之间可以相互通信，实现了组件之间的解耦。</p><p><strong>首先，我们会注意到，子组件通过 this.$emit(‘child-event’, ‘Hello from child!’) 发送了一个自定义事件 child-event，而父组件则通过 @child-event&#x3D;”handleChildEvent” 监听了这个事件。</strong> 这里的 child-event 就是我们自定义的事件名，而 handleChildEvent 则是父组件中定义的一个方法，用于处理子组件发送过来的消息。</p><p>当使用一个自定义的MyComponent组件时，我们可以监听由 emit 函数发射的自定义事件</p><p>可以看到，自定义事件 change 被编译成名为 onChange 的属性，并存储在 props 数据对象中。这实际上是一种约定。作为框架设计者，也可以按照自己期望的方式来设计事件的编译结果。在具体的实现上，发射自定义事件的本质就是根据事件名称去props 数据对象中寻找对应的事件处理函数并执行，如下面的代码所示：</p><h2><span id="emit的实现">emit的实现</span></h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// MyComponent 组件定义</span><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'MyComponent'</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> emit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 发射 change 事件，并传递给事件处理函数两个参数</span>    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 组件的渲染逻辑</span>      <span class="token keyword">return</span> <span class="token comment">/* ... */</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这一段代码会被编译成一个节点 CompNode，它的类型为 MyComponent 组件，同时会将 emit 函数传递给组件的 setup 函数，如下所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义一个 Vue 组件节点 CompNode</span><span class="token keyword">const</span> CompNode <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 指定节点的类型为 MyComponent 组件</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> MyComponent<span class="token punctuation">,</span>  <span class="token comment">// 为组件传递的 props 对象</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在 MyComponent 组件中，会有一个 onChange 的事件处理函数，其值为 handler</span>    <span class="token literal-property property">onChange</span><span class="token operator">:</span> handler  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，自定义事件 change 被编译成名为 onChange 的属性，并存储在 props 数据对象中。这实际上是一种约定。作为框架设计者，也可以按照自己期望的方式来设计事件的编译结果。</p><p>在具体的实现上，发射自定义事件的本质就是根据事件名称去props 数据对象中寻找对应的事件处理函数并执行，如下面的代码所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 挂载组件</span><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 省略部分代码</span>  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    state<span class="token punctuation">,</span> <span class="token comment">// 状态</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token function">shallowReactive</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 响应式处理 props</span>    <span class="token literal-property property">isMounted</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token literal-property property">subTree</span><span class="token operator">:</span> <span class="token keyword">null</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 定义 emit 函数，它接收两个参数</span>  <span class="token comment">// event: 事件名称</span>  <span class="token comment">// payload: 传递给事件处理函数的参数</span>  <span class="token keyword">function</span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> <span class="token operator">...</span>payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 根据约定对事件名称进行处理，例如 change --> onChange</span>    <span class="token keyword">const</span> eventName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">on</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>event<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>event<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token comment">// 根据处理后的事件名称去 props 中寻找对应的事件处理函数</span>    <span class="token keyword">const</span> handler <span class="token operator">=</span> instance<span class="token punctuation">.</span>props<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 调用事件处理函数并传递参数</span>      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token operator">...</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'事件不存在'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 将 emit 函数添加到 setupContext 中</span>  <span class="token keyword">const</span> setupContext <span class="token operator">=</span> <span class="token punctuation">&#123;</span> attrs<span class="token punctuation">,</span> emit <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 省略部分代码</span><span class="token punctuation">&#125;</span><span class="token comment">// 解析 props 数据的函数，对事件类型的 props 做特殊处理</span><span class="token keyword">function</span> <span class="token function">resolveProps</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> propsData</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> attrs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> propsData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 以字符串 'on' 开头的 props 添加到 props 数据中，否则添加到 attrs 中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> options <span class="token operator">||</span> key<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'on'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      props<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> propsData<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      attrs<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> propsData<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>props<span class="token punctuation">,</span> attrs<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>emit</code> 的实现原理主要涉及两个方面：<code>setupContext</code> 的注入和事件名称的约定转换。</p><ol><li><p><strong>setupContext 的注入：</strong> 在 Vue 的组件中，<code>setup</code> 函数接收两个参数：<code>props</code> 和 <code>context</code>。<code>context</code> 中包含了一系列属性和方法，其中之一就是 <code>emit</code> 函数。Vue 3 的组件中，<code>setup</code> 函数返回的对象中，可以将 <code>emit</code> 函数添加到 <code>setupContext</code> 中，以便用户在组件内通过 <code>setupContext.emit</code> 访问。</p><p> 下面是一个简单的例子，展示了如何在 <code>setup</code> 函数中添加 <code>emit</code> 到 <code>setupContext</code>：</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 添加 emit 到 setupContext</span>  context<span class="token punctuation">.</span>emit <span class="token operator">=</span> emit<span class="token punctuation">;</span>  <span class="token comment">// 其他 setup 逻辑</span>  <span class="token comment">// ...</span>  <span class="token comment">// 返回 setup 返回的对象</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 这样，在组件内部，用户就可以通过 <code>setupContext.emit</code> 来调用 <code>emit</code> 函数了。</p></li><li><p><strong>事件名称的约定转换：</strong> 在 <code>emit</code> 函数内部，为了匹配组件模板中的事件处理函数，需要对事件名称进行约定转换。Vue 使用了一种约定，将事件名称转换为驼峰命名的形式。例如，<code>change</code> 事件会转换为 <code>onChange</code>。这样，用户在组件模板中监听事件时，可以使用驼峰命名的方式。</p><p> 下面是一个简单的例子，展示了事件名称的约定转换：</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> <span class="token operator">...</span>payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 根据约定对事件名称进行处理，例如 change --> onChange</span>  <span class="token keyword">const</span> eventName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">on</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>event<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>event<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token comment">// 根据处理后的事件名称去 props 中寻找对应的事件处理函数</span>  <span class="token keyword">const</span> handler <span class="token operator">=</span> instance<span class="token punctuation">.</span>props<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 调用事件处理函数并传递参数</span>    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token operator">...</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'事件不存在'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 这里的 <code>emit</code> 函数会将事件名称转换为以 “on” 开头并使用驼峰命名的形式，例如 <code>change</code> 转换为 <code>onChange</code>。然后，它会在 <code>instance.props</code> 中查找对应的事件处理函数并执行。</p></li></ol><p>需要注意的是，事件类型的 props 在 <code>instance.props</code> 中是找不到的，因此它们会存储在 <code>attrs</code> 中。为了解决这个问题，在解析 props 数据时，需要对事件类型的 props 做特殊处理，确保它们被正确添加到 <code>props</code> 中，而不是 <code>attrs</code>。这样，<code>emit</code> 函数就能够在 <code>instance.props</code> 中正确地找到对应的事件处理函数。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;想把Vuejs 组件事件与 emit 的实现讲清楚，我先要把组件事件和emit的应用讲清楚，这样大家会更清楚的理解组件事件和emit的实现。&lt;/p&gt;
&lt;p&gt;对于组件事件，我们其实之前就已经提到过了浏览器的事件机</summary>
      
    
    
    
    <category term="Vue" scheme="https://ikkkp.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://ikkkp.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Implementation of Vue.js Component Events and Emit</title>
    <link href="https://ikkkp.github.io/2023/12/08/en/vue-component-2/"/>
    <id>https://ikkkp.github.io/2023/12/08/en/vue-component-2/</id>
    <published>2023-12-08T08:08:07.000Z</published>
    <updated>2024-01-01T03:22:08.532Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="introduction">Introduction</span></h2><p>To explain the implementation of Vue.js component events and emit, it’s essential to first understand the application of component events and emit. This will provide a clearer understanding of how component events and emit are implemented.</p><p>For component events, we’ve previously discussed the browser’s event mechanism:</p><h3><span id="browser-event-review">Browser Event Review</span></h3><p>Browser events refer to various signals of interaction and state changes that occur on a web page. These events can be triggered by user actions, changes in the browser’s state, or other factors. Here are some common DOM events and their descriptions:</p><h4><span id="mouse-events">Mouse Events:</span></h4><ul><li><strong>click:</strong> Triggered when the mouse clicks on an element. For touch-screen devices, it’s triggered when there’s a tap on the screen.</li><li><strong>contextmenu:</strong> Triggered when the right mouse button clicks on an element.</li><li><strong>mouseover &#x2F; mouseout:</strong> Triggered when the mouse pointer enters or leaves an element.</li><li><strong>mousedown &#x2F; mouseup:</strong> Triggered when the mouse button is pressed or released over an element.</li><li><strong>mousemove:</strong> Triggered when the mouse is moved.</li></ul><h4><span id="keyboard-events">Keyboard Events:</span></h4><ul><li><strong>keydown and keyup:</strong> Triggered when a key is pressed down or released.</li></ul><h4><span id="form-element-events">Form Element Events:</span></h4><ul><li><strong>submit:</strong> Triggered when a visitor submits a <code>&lt;form&gt;</code>.</li><li><strong>focus:</strong> Triggered when a visitor focuses on an element, such as an <code>&lt;input&gt;</code>.</li></ul><h4><span id="document-events">Document Events:</span></h4><ul><li><strong>DOMContentLoaded:</strong> Triggered when HTML is fully loaded and processed, and the DOM is completely constructed.</li></ul><h4><span id="css-events">CSS Events:</span></h4><ul><li><strong>transitionend:</strong> Triggered when a CSS animation is completed.</li></ul><p>These events can be captured and processed using event listeners in JavaScript. By adding event listeners to elements, specific code can be executed when certain events occur. Events form the foundation of interaction and responsiveness in web development.</p><p>Now, how does component events differ from browser events?</p><p><strong>In the context of events, we can understand them as specific occurrences at a given point in time, signaling that something has happened. An event is a signal that can be received and processed, and that’s what events are.</strong></p><p>In the case of component events, it refers to the communication between Vue components, achieved through events. In this context, events serve as a means of communication between components, and this communication is implemented using events. Here, events specifically refer to what we call component events.</p><p><strong>The primary mechanism for communication between Vue components using events is through the use of the <code>emit</code> and <code>on</code> methods. When a child component needs to communicate with a parent component, it triggers an event and uses the <code>emit</code> method to send the event. The parent component, in turn, uses the <code>v-on</code> directive in the template to listen for this event and execute the corresponding logic.</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- Child Component ChildComponent.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendMessage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Notify Parent Component<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Use emit to send a custom event</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'child-event'</span><span class="token punctuation">,</span> <span class="token string">'Hello from child!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- Parent Component ParentComponent.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-component</span> <span class="token attr-name">@child-event</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleChildEvent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-component</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Message received from child: &#123;&#123; messageFromChild &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> ChildComponent <span class="token keyword">from</span> <span class="token string">'./ChildComponent.vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    ChildComponent  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">messageFromChild</span><span class="token operator">:</span> <span class="token string">''</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">handleChildEvent</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Listen to the child component's event using v-on</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>messageFromChild <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Vue’s event mechanism is built on the publish&#x2F;subscribe pattern. <code>$emit</code> is used to publish (trigger) an event, while <code>v-on</code> is used to subscribe (listen) to events. This enables decoupling between different components.</p><p><strong>Firstly, we notice that the child component uses <code>this.$emit(&#39;child-event&#39;, &#39;Hello from child!&#39;)</code> to send a custom event named ‘child-event’. The parent component, on the other hand, listens to this event using <code>@child-event=&quot;handleChildEvent&quot;</code>. Here, ‘child-event’ is the custom event name, and ‘handleChildEvent’ is a method defined in the parent component to handle the message sent by the child component.</strong></p><p>When using a custom <code>MyComponent</code> component, we can listen to the emitted custom event using the <code>v-on</code> directive:</p><p>You can see that the custom event ‘change’ is compiled into a property named ‘onChange’ and stored in the props data object. This is essentially a convention. As a framework designer, you can design the compilation result of events according to your expectations. In the actual implementation, emitting a custom event boils down to finding the corresponding event handling function in the props data object based on the event name, as shown in the following code:</p><h2><span id="implementation-of-emit">Implementation of emit</span></h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Definition of MyComponent component</span><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'MyComponent'</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> emit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Emit the 'change' event and pass two parameters to the event handler</span>    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Render logic of the component</span>      <span class="token keyword">return</span> <span class="token comment">/* ... */</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The above code will be compiled into a node <code>CompNode</code>, with the type being the <code>MyComponent</code> component. The <code>emit</code> function is passed to the <code>setup</code> function of the component, as shown below:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Definition of a Vue component node CompNode</span><span class="token keyword">const</span> CompNode <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Specify the type of the node as the MyComponent component</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> MyComponent<span class="token punctuation">,</span>  <span class="token comment">// Props object passed to the component</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// In the MyComponent component, there will be an onChange event handling function, whose value is handler</span>    <span class="token literal-property property">onChange</span><span class="token operator">:</span> handler  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>As you can see, the custom event ‘change’ is compiled into a property named ‘onChange’ and stored in the props data object. This is essentially a convention. As a framework designer, you can design the compilation result of events according to your expectations.</p><p>In the actual implementation, emitting a custom event essentially involves finding the corresponding event handling function in the props data object based on the event name, as shown in the following code:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Mounting the component</span><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Omitted code</span>  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    state<span class="token punctuation">,</span> <span class="token comment">// State</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token function">shallowReactive</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Reactive handling of props</span>    <span class="token literal-property property">isMounted</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token literal-property property">subTree</span><span class="token operator">:</span> <span class="token keyword">null</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// Define the emit function, which takes two parameters</span>  <span class="token comment">// event: Event name</span>  <span class="token comment">// payload: Parameters passed to the event handling function</span>  <span class="token keyword">function</span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> <span class="token operator">...</span>payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Process the event name according to the convention, e.g., change --> onChange</span>    <span class="token keyword">const</span> eventName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">on</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>event<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>event<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token comment">// Find the corresponding event handling function in props based on the processed event name</span>    <span class="token keyword">const</span> handler <span class="token operator">=</span> instance<span class="token punctuation">.</span>props<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Call the event handling function and pass the parameters</span>      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token operator">...</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Event does not exist'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Add the emit function to setupContext</span>  <span class="token keyword">const</span> setupContext <span class="token operator">=</span> <span class="token punctuation">&#123;</span> attrs<span class="token punctuation">,</span> emit <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// Omitted code</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to parse props data, with special handling for event-type props</span><span class="token keyword">function</span> <span class="token function">resolveProps</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> propsData</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> attrs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> propsData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Add props starting with 'on' as strings to props data, otherwise add to attrs</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> options <span class="token operator">||</span> key<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'on'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      props<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> propsData<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      attrs<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> propsData<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>props<span class="token punctuation">,</span> attrs<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The implementation principle of <code>emit</code> involves two aspects: the injection of <code>setupContext</code> and the convention-based transformation of event names.</p><ol><li><p><strong>Injection of <code>setupContext</code>:</strong> In Vue components, the <code>setup</code> function receives two parameters: <code>props</code> and <code>context</code>. <code>context</code> includes a series of properties and methods, one of which is the <code>emit</code> function. In Vue 3 components, the <code>setup</code> function returns an object, and you can add the <code>emit</code> function to <code>setupContext</code> so that users can access it within the component using <code>setupContext.emit</code>.</p><p> Here’s a simple example demonstrating how to add <code>emit</code> to <code>setupContext</code> in the <code>setup</code> function:</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Add emit to setupContext</span>  context<span class="token punctuation">.</span>emit <span class="token operator">=</span> emit<span class="token punctuation">;</span>  <span class="token comment">// Other setup logic</span>  <span class="token comment">// ...</span>  <span class="token comment">// Return the object returned by setup</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> This way, users can call the <code>emit</code> function within the component using <code>setupContext.emit</code>.</p></li><li><p><strong>Convention-based transformation of event names:</strong> Inside the <code>emit</code> function, to match event handling functions in the component template, event names need to be conventionally transformed. Vue uses a convention of converting event names to camelCase. For example, the <code>change</code> event becomes <code>onChange</code>. This allows users to listen to events in the component template using camelCase.</p><p> Here’s a simple example illustrating the convention-based transformation of event names:</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> <span class="token operator">...</span>payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Process the event name according to the convention, e.g., change --> onChange</span>  <span class="token keyword">const</span> eventName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">on</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>event<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>event<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token comment">// Find the corresponding event handling function in props based on the processed event name</span>  <span class="token keyword">const</span> handler <span class="token operator">=</span> instance<span class="token punctuation">.</span>props<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Call the event handling function and pass the parameters</span>    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token operator">...</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Event does not exist'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> In this example, the <code>emit</code> function transforms the event name into camelCase with “on” at the beginning. For instance, <code>change</code> becomes <code>onChange</code>. It then looks for the corresponding event handling function in <code>instance.props</code> and executes it.</p></li></ol><p>It’s important to note that event-type props are not found in <code>instance.props</code>, so they are stored in <code>attrs</code>. To address this, when parsing props data, event-type props are specially handled to ensure they are correctly added to <code>props</code> instead of <code>attrs</code>. This allows the <code>emit</code> function to correctly find event handling functions in <code>instance.props</code>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;introduction&quot;&gt;Introduction&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;To explain the implementation of Vue.js component events and emit, it’s essential to </summary>
      
    
    
    
    <category term="Vue" scheme="https://ikkkp.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://ikkkp.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vuejs 组件的实现原理</title>
    <link href="https://ikkkp.github.io/2023/12/08/vue-component-1/"/>
    <id>https://ikkkp.github.io/2023/12/08/vue-component-1/</id>
    <published>2023-12-08T07:45:05.000Z</published>
    <updated>2023-12-08T08:07:56.021Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>我们在前面讨论过了<a href="https://ikkkp.github.io/2023/11/05/vue-renderer-1/">vue渲染器</a>，<strong>渲染器主要负责将虚拟 DOM 渲染为真实 DOM</strong> ，我们只需要使用虚拟 DOM来描述最终呈现的内容即可。</p><p>但当我们编写比较复杂的页面时，用来描述页面结构的虚拟 DOM 的代码量会变得越来越多，或者说页面模板会变得越来越大。这时，我们就需要组件化的能力。</p><p>有了组件，我们就可以将一个大的页面拆分为多个部分，每一个部分都可以作为单独的组件，这些组件共同组成完整的页面。组件化的实现同样需要渲染器的支持</p><h2><span id="渲染组件">渲染组件</span></h2><p>从用户的角度来看，一个有状态组件就是一个选项对象，如下面的代码所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// MyComponent 是一个组件，它的值是一个选项对象</span><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'MyComponent'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span>  <span class="token punctuation">&#123;</span><span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，如果从渲染器的内部实现来看，一个组件则是一个特殊类型的虚拟 DOM 节点。例如，为了描述普通标签，我们用虚拟节点的vnode.type 属性来存储标签名称，如下面的代码所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token comment">// 该 vnode 用来描述普通标签</span><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'div'</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了描述片段，我们让虚拟节点的 vnode.type 属性的值为Fragment, 而为了描述文本，我们让虚拟节点的 vnode.type 属性的值为Text，</p><p>还记得我们之前在渲染器讨论过的<code>patch函数</code>吗？</p><p><strong>在patch函数中，Vue会根据新旧虚拟DOM节点的差异进行不同的处理逻辑。</strong> 如果是首次渲染，会执行首次渲染的逻辑；如果是更新渲染，会根据差异更新实际的DOM节点。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 02. 如果新旧节点类型不同，执行卸载操作</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">&amp;&amp;</span> n1<span class="token punctuation">.</span>type <span class="token operator">!==</span> n2<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">unmount</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>    n1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 07. 获取节点类型</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> type <span class="token punctuation">&#125;</span> <span class="token operator">=</span> n2<span class="token punctuation">;</span>  <span class="token comment">// 09. 判断节点类型</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 10. 处理普通元素</span>    <span class="token comment">// TODO: 处理普通元素的逻辑</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> Text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 11. 处理文本节点</span>    <span class="token comment">// TODO: 处理文本节点的逻辑</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> Fragment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 13. 处理片段</span>    <span class="token comment">// TODO: 处理片段的逻辑</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回新节点的实际DOM元素</span>  <span class="token keyword">return</span> n2<span class="token punctuation">.</span>el<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，渲染器会使用虚拟节点的 type 属性来区分其类型。对于不同类型的节点，需要采用不同的处理方法来完成挂载和更新。</p><p>实际上，对于组件来说也是一样的。<strong>为了使用虚拟节点来描述组件，我们可以用虚拟节点的 vnode.type 属性来存储组件的选项对象</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 02. 如果新旧节点类型不同，执行卸载操作</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">&amp;&amp;</span> n1<span class="token punctuation">.</span>type <span class="token operator">!==</span> n2<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">unmount</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>    n1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 07. 获取节点类型</span>  <span class="token keyword">const</span> type <span class="token operator">=</span> n2<span class="token punctuation">.</span>type<span class="token punctuation">;</span>  <span class="token comment">// 09. 判断节点类型</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 10. 处理普通元素</span>    <span class="token comment">// TODO: 处理普通元素的逻辑</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> Text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 11. 处理文本节点</span>    <span class="token comment">// TODO: 处理文本节点的逻辑</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> Fragment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 13. 处理片段</span>    <span class="token comment">// TODO: 处理片段的逻辑</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 16. vnode.type 的值是选项对象，作为组件来处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 17. 挂载组件</span>      <span class="token function">mountComponent</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 21. 更新组件</span>      <span class="token function">patchComponent</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回新节点的实际DOM元素</span>  <span class="token keyword">return</span> n2<span class="token punctuation">.</span>el<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面这段代码中，我们新增了一个 else if 分支，用来处理虚拟节点的 vnode.type 属性值为对象的情况，即将该虚拟节点作为组件的描述来看待，并调用 mountComponent 和 patchComponent 函数来完成组件的挂载和更新。</p><p>上面我们回顾了有关于组件的一些基本概念，组件的挂载和更新是如何实现的，其实我们更关注的还应该是<strong>用户应该如何编写组件？组件的选项对象必须包含哪些内容？以及组件拥有哪些能力？</strong></p><p>因此，一个组件必须包含一个渲染函数，即 render 函数，并且渲染函数的返回值应该是虚拟 DOM。换句话说，组件的渲染函数就是用来描述组件所渲染内容的接口，如下面的代码所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// MyComponent 组件定义</span><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 组件名称，可选</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'MyComponent'</span><span class="token punctuation">,</span>  <span class="token comment">// 组件的渲染函数，其返回值必须为虚拟 DOM,一个组件必须包含一个渲染函数，即 render 函数，并且渲染函数的返回值应该是虚拟 DOM</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 返回虚拟 DOM</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span>      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'text content'</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 用来描述组件的 vnode 对象，type 属性值为组件的选项对象</span><span class="token keyword">const</span> CompNode <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> MyComponent<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 调用渲染器来渲染组件</span>renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>CompNode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 渲染器中真正完成组件渲染任务的是 mountComponent 函数</span><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 通过 vnode 获取组件的选项对象，即 vnode.type</span>  <span class="token keyword">const</span> componentOptions <span class="token operator">=</span> vnode<span class="token punctuation">.</span>type<span class="token punctuation">;</span>  <span class="token comment">// 获取组件的渲染函数 render</span>  <span class="token keyword">const</span> render <span class="token operator">=</span> componentOptions<span class="token punctuation">.</span>render<span class="token punctuation">;</span>  <span class="token comment">// 执行渲染函数，获取组件要渲染的内容，即 render 函数返回的虚拟 DOM</span>  <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 最后调用 patch 函数来挂载组件所描述的内容，即 subTree</span>  <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="总结">总结</span></h2><p>我们现在来回顾一下组件的基础，我们显式声明了一个组件的对象实例，该组件的选项对象必须包含一个渲染函数，即 render 函数，并且渲染函数的返回值应该是虚拟 DOM，之后我们再调用render和patch进行组件的更新和替换。<strong>换句话说，组件的渲染函数就是用来描述组件所渲染内容的接口，而渲染器的作用就是将组件的渲染函数的返回值渲染为真实 DOM。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;我们在前面讨论过了&lt;a href=&quot;https://ikkkp.github.io/2023/11/05/vue-renderer-1/&quot;&gt;vue渲染器&lt;/a&gt;，&lt;strong&gt;渲染器主要负责将虚拟 DOM 渲</summary>
      
    
    
    
    <category term="Vue" scheme="https://ikkkp.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://ikkkp.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Implementation Principles of Vue.js Components</title>
    <link href="https://ikkkp.github.io/2023/12/08/en/vue-component-1/"/>
    <id>https://ikkkp.github.io/2023/12/08/en/vue-component-1/</id>
    <published>2023-12-08T07:45:05.000Z</published>
    <updated>2023-12-08T08:53:05.955Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="preface">Preface</span></h2><p>In a previous discussion, we explored the <a href="https://ikkkp.github.io/2023/11/05/vue-renderer-1/">Vue renderer</a>, where <strong>the renderer is primarily responsible for rendering the virtual DOM into the real DOM</strong>. We only need to use the virtual DOM to describe the final content to be rendered.</p><p>However, when creating more complex pages, the code for the virtual DOM used to describe the page structure becomes larger, or we can say that the page template becomes more extensive. In such cases, the ability to modularize components becomes essential.</p><p>With components, we can break down a large page into multiple parts, each part serving as an independent component. These components collectively form the complete page. The implementation of components also requires support from the renderer.</p><h2><span id="rendering-components">Rendering Components</span></h2><p>From the user’s perspective, a stateful component is simply an options object, as shown in the code below:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// MyComponent is a component, and its value is an options object</span><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'MyComponent'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>However, from the internal implementation of the renderer, a component is a special type of virtual DOM node. For example, to describe a regular tag, we use the vnode.type property of the virtual node to store the tag name, as shown in the code below:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// This vnode is used to describe a regular tag</span><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'div'</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To describe a fragment, we set the vnode.type property of the virtual node to ‘Fragment’, and to describe text, we set the vnode.type property to ‘Text’.</p><p>Do you recall the <code>patch function</code> we discussed earlier in the renderer?</p><p><strong>In the patch function, Vue processes different logic based on the differences between the new and old virtual DOM nodes.</strong> If it’s the initial rendering, it executes the logic for the initial rendering; if it’s an update rendering, it updates the actual DOM nodes based on the differences.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 02. If the types of new and old nodes are different, perform unmount operation</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">&amp;&amp;</span> n1<span class="token punctuation">.</span>type <span class="token operator">!==</span> n2<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">unmount</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>    n1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 07. Get the node type</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> type <span class="token punctuation">&#125;</span> <span class="token operator">=</span> n2<span class="token punctuation">;</span>  <span class="token comment">// 09. Check the node type</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 10. Process regular elements</span>    <span class="token comment">// TODO: Logic for regular elements</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> Text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 11. Process text nodes</span>    <span class="token comment">// TODO: Logic for text nodes</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> Fragment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 13. Process fragments</span>    <span class="token comment">// TODO: Logic for fragments</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Return the actual DOM element of the new node</span>  <span class="token keyword">return</span> n2<span class="token punctuation">.</span>el<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>As you can see, the renderer uses the vnode.type property of the virtual node to differentiate its type. Different types of nodes require different methods for mounting and updating.</p><p>In reality, this applies to components as well. <strong>To use virtual nodes to describe components, we can use the vnode.type property to store the component’s options object.</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 02. If the types of new and old nodes are different, perform unmount operation</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">&amp;&amp;</span> n1<span class="token punctuation">.</span>type <span class="token operator">!==</span> n2<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">unmount</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>    n1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 07. Get the node type</span>  <span class="token keyword">const</span> type <span class="token operator">=</span> n2<span class="token punctuation">.</span>type<span class="token punctuation">;</span>  <span class="token comment">// 09. Check the node type</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 10. Process regular elements</span>    <span class="token comment">// TODO: Logic for regular elements</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> Text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 11. Process text nodes</span>    <span class="token comment">// TODO: Logic for text nodes</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> Fragment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 13. Process fragments</span>    <span class="token comment">// TODO: Logic for fragments</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 16. The value of vnode.type is an options object, treated as a component</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 17. Mount the component</span>      <span class="token function">mountComponent</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 21. Update the component</span>      <span class="token function">patchComponent</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Return the actual DOM element of the new node</span>  <span class="token keyword">return</span> n2<span class="token punctuation">.</span>el<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In the above code, we added an else if branch to handle the case where the vnode.type property value is an object, treating it as a virtual node describing a component. We call the mountComponent and patchComponent functions to mount and update the component.</p><p>Now let’s focus on the basics of writing components—what the user should write when creating components, what the options object of a component must include, and what capabilities a component possesses.</p><p>Therefore, a component must include a rendering function, i.e., the render function, and the return value of the render function should be a virtual DOM. In other words, the render function of a component is an interface for describing the content that the component renders, as shown in the code below:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Definition of the MyComponent component</span><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Component name, optional</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'MyComponent'</span><span class="token punctuation">,</span>  <span class="token comment">// Rendering function of the component, its return value must be a virtual DOM</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Return a virtual DOM</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span>      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'text content'</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Vnode object describing the component, type property value is the options object of the component</span><span class="token keyword">const</span> CompNode <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> MyComponent<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Call the renderer to render the component</span>renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>CompNode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// The mountComponent function in the renderer is responsible for the actual rendering of the component</span><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Get the options object of the component, i.e., vnode.type</span>  <span class="token keyword">const</span> componentOptions <span class="token operator">=</span> vnode<span class="token punctuation">.</span>type<span class="token punctuation">;</span>  <span class="token comment">// Get the rendering function of the component, render</span>  <span class="token keyword">const</span> render <span class="token operator">=</span> componentOptions<span class="token punctuation">.</span>render<span class="token punctuation">;</span>  <span class="token comment">// Execute the rendering function, get the content the component should render, i.e., the virtual DOM returned by the render function</span>  <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Finally, call the patch function to mount the content described by the component, i.e., subTree</span>  <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="conclusion">Conclusion</span></h2><p>Let’s recap the basics of components. We explicitly declared an object instance for a component, and the options object of the component must include a rendering function, i.e., the render function. The return value of the render function should be a virtual DOM. We then call render and patch to update and replace components. **In other words, the render function of a component is an interface for describing</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;preface&quot;&gt;Preface&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;In a previous discussion, we explored the &lt;a href=&quot;https://ikkkp.github.io/2023/11/05/vue-rende</summary>
      
    
    
    
    <category term="Vue" scheme="https://ikkkp.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://ikkkp.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>浏览器默认行为</title>
    <link href="https://ikkkp.github.io/2023/12/06/Browser-Default-Behavior/"/>
    <id>https://ikkkp.github.io/2023/12/06/Browser-Default-Behavior/</id>
    <published>2023-12-06T11:28:33.000Z</published>
    <updated>2023-12-08T08:13:19.607Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>其实浏览器内置了很多的事件。</p><p>而许多事件会自动触发浏览器执行某些行为。</p><p>例如：</p><ul><li>点击一个链接 —— 触发导航（navigation）到该 URL。</li><li>点击表单的提交按钮 —— 触发提交到服务器的行为。</li><li>在文本上按下鼠标按钮并移动 —— 选中文本。</li></ul><p>如果我们使用 JavaScript 处理一个事件，那么我们通常不希望发生相应的浏览器行为。而是想要实现其他行为进行替代。</p><h2><span id="阻止浏览器行为">阻止浏览器行为</span></h2><p>有两种方式来告诉浏览器我们不希望它执行默认行为：</p><ul><li>主流的方式是使用 event 对象。有一个 event.preventDefault() 方法。</li><li>如果处理程序是使用 <code>on&lt;event&gt;</code>（而不是 addEventListener）分配的，那返回 false 也同样有效。</li></ul><p><strong>在下面这个示例中，点击链接不会触发导航（navigation），浏览器不会执行任何操作：</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token keyword">return</span> <span class="token boolean">false</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Click here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>or<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="/" onclick="return false">Click here</a><br>or<br><a href="/" onclick="event.preventDefault()">here</a></p><br><p>请注意的是，处理程序是使用 <code>on&lt;event&gt;</code>分配的，并进行return返回false并不是一个好的实践。</p><p>从处理程序返回 false 是一个例外<br>事件处理程序返回的值通常会被忽略。</p><p>唯一的例外是从使用 <code>on&lt;event&gt;</code> 分配的处理程序中返回的 return false。</p><p>在所有其他情况下，return 值都会被忽略。并且，返回 true 没有意义。</p><h2><span id="处理程序选项-passive">处理程序选项 “passive”</span></h2><p><strong>addEventListener 的可选项 passive: true 向浏览器发出信号，表明处理程序将不会调用 preventDefault()。</strong></p><p>为什么需要这样做？</p><p><strong>移动设备上会发生一些事件，例如 touchmove（当用户在屏幕上移动手指时），默认情况下会导致滚动，但是可以使用处理程序的 preventDefault() 来阻止滚动。</strong></p><p>因此，当浏览器检测到此类事件时，它必须首先处理所有处理程序，然后如果没有任何地方调用 <code>preventDefault</code>，则页面可以继续滚动。但这可能会导致 UI 中不必要的延迟和“抖动”。</p><p>passive: true 选项告诉浏览器，处理程序不会取消滚动。然后浏览器立即滚动页面以提供最大程度的流畅体验，并通过某种方式处理事件。</p><p>对于某些浏览器（Firefox，Chrome），默认情况下，touchstart 和 touchmove 事件的 passive 为 true。</p><h2><span id="eventdefaultprevented">event.defaultPrevented</span></h2><p>如果默认行为被阻止，那么 <code>event.defaultPrevented</code> 属性为 true，否则为 false。</p><p>这儿有一个有趣的用例。</p><p><strong>你还记得我们在 冒泡和捕获 一章中讨论过的 event.stopPropagation()，以及为什么停止冒泡是不好的吗？</strong></p><p>有时我们可以使用 event.defaultPrevented 来代替，来通知其他事件处理程序，该事件已经被处理。</p><p>我们来看一个实际的例子。</p><p>默认情况下，浏览器在 contextmenu 事件（单击鼠标右键）时，显示带有标准选项的上下文菜单。我们可以阻止它并显示我们自定义的菜单，就像这样：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Right-click shows browser context menu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">oncontextmenu</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert('Draw our menu'); return false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Right-click shows our context menu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><button>Right-click shows browser context menu</button><button oncontextmenu="alert('Draw our menu'); return false">  Right-click shows our context menu</button><br>现在，除了该上下文菜单外，我们还想实现文档范围的上下文菜单。<p>右键单击时，应该显示最近的上下文菜单：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Right-click here for the document context menu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>elem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Right-click here for the button context menu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  elem<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Button context menu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Document context menu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>Right-click here for the document context menu</p><button id="elem">Right-click here for the button context menu</button><script>  elem.oncontextmenu = function(event) {    event.preventDefault();    alert("Button context menu");  };  document.oncontextmenu = function(event) {    event.preventDefault();    alert("Document context menu");  };</script><br>问题是，当我们点击 elem 时，我们会得到两个菜单：按钮级和文档级（事件冒泡）的菜单。<p>如何修复呢？其中一个解决方案是：“当我们在按钮处理程序中处理鼠标右键单击事件时，我们阻止其冒泡”，使用 event.stopPropagation()：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Right-click for the document menu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>elem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Right-click for the button menu (fixed with event.stopPropagation)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  elem<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Button context menu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Document context menu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>Right-click for the document menu</p><button id="elem">Right-click for the button menu (fixed with event.stopPropagation)</button><script>  elem.oncontextmenu = function(event) {    event.preventDefault();    event.stopPropagation();    alert("Button context menu");  };  document.oncontextmenu = function(event) {    event.preventDefault();    alert("Document context menu");  };</script><br>现在按钮级菜单如期工作。但是代价太大，我们拒绝了任何外部代码对右键点击信息的访问，包括收集统计信息的计数器等。这是非常不明智的。<p>另一个替代方案是，检查 document 处理程序是否阻止了浏览器的默认行为？如果阻止了，那么该事件已经得到了处理，我们无需再对此事件做出反应。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Right-click for the document menu (added a check for event.defaultPrevented)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>elem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Right-click for the button menu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  elem<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Button context menu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>defaultPrevented<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Document context menu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>Right-click for the document menu (added a check for event.defaultPrevented)</p><button id="elem">Right-click for the button menu</button><script>  elem.oncontextmenu = function(event) {    event.preventDefault();    alert("Button context menu");  };  document.oncontextmenu = function(event) {    if (event.defaultPrevented) return;    event.preventDefault();    alert("Document context menu");  };</script><p>现在一切都可以正常工作了。如果我们有嵌套的元素，并且每个元素都有自己的上下文菜单，那么这也是可以运行的。只需确保检查每个 contextmenu 处理程序中的 event.defaultPrevented。</p><blockquote><p><strong>event.stopPropagation() 和 event.preventDefault()</strong><br>正如我们所看到的，event.stopPropagation() 和 event.preventDefault()（也被认为是 return false）是两个不同的东西。它们之间毫无关联。</p></blockquote><blockquote><p><strong>嵌套的上下文菜单结构</strong><br>还有其他实现嵌套上下文菜单的方式。其中之一是拥有一个具有 document.oncontextmenu 处理程序的全局对象，以及使我们能够在其中存储其他处理程序的方法。<br>该对象将捕获任何右键单击，浏览存储的处理程序并运行适当的处理程序。</p></blockquote><p>但是，每段需要上下文菜单的代码都应该了解该对象，并使用它的帮助，而不是使用自己的 contextmenu 处理程序。</p><h2><span id="总结">总结</span></h2><p>有很多默认的浏览器行为：</p><ul><li>mousedown —— 开始选择（移动鼠标进行选择）。</li><li>在 <code>&lt;input type=&quot;checkbox&quot;&gt;</code> 上的 click —— 选中&#x2F;取消选中的 input。</li><li>submit —— 点击<code>&lt;input type=&quot;submit&quot;&gt;</code>或者在表单字段中按下 Enter 键会触发该事件，之后浏览器将提交表单。</li><li>keydown —— 按下一个按键会导致将字符添加到字段，或者触发其他行为。</li><li>contextmenu —— 事件发生在鼠标右键单击时，触发的行为是显示浏览器上下文菜单。</li><li>……还有更多……</li></ul><p>如果我们只想通过 JavaScript 来处理事件，那么所有默认行为都是可以被阻止的。</p><p>想要阻止默认行为 —— 可以使用 <code>event.preventDefault() </code>或<code> return false</code>。第二个方法只适用于通过<code> on&lt;event&gt;</code> 分配的处理程序。</p><p><code>addEventListener </code>的 <code>passive: true</code> 选项告诉浏览器该行为不会被阻止。这对于某些移动端的事件（像 touchstart 和 touchmove）很有用，用以告诉浏览器在滚动之前不应等待所有处理程序完成。</p><p>如果默认行为被阻止，<code>event.defaultPrevented</code> 的值会变成 true，否则为 false。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;其实浏览器内置了很多的事件。&lt;/p&gt;
&lt;p&gt;而许多事件会自动触发浏览器执行某些行为。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点击一个链接 —— 触发导航（navigation）到该 URL。&lt;/li&gt;</summary>
      
    
    
    
    <category term="FE" scheme="https://ikkkp.github.io/categories/FE/"/>
    
    
    <category term="Vue,Browser,FE" scheme="https://ikkkp.github.io/tags/Vue-Browser-FE/"/>
    
  </entry>
  
  <entry>
    <title>Browser Default Behaviors</title>
    <link href="https://ikkkp.github.io/2023/12/06/en/Browser-Default-Behavior/"/>
    <id>https://ikkkp.github.io/2023/12/06/en/Browser-Default-Behavior/</id>
    <published>2023-12-06T11:28:33.000Z</published>
    <updated>2023-12-08T08:13:55.829Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="preface">Preface</span></h2><p>In fact, browsers come with many built-in events, and many events automatically trigger certain behaviors in the browser.</p><p>For example:</p><ul><li>Clicking a link triggers navigation to the URL.</li><li>Clicking the submit button in a form triggers submission to the server.</li><li>Pressing and dragging the mouse button on text selects the text.</li></ul><p>When handling an event with JavaScript, we usually don’t want the corresponding browser behavior to occur. Instead, we want to implement alternative behaviors.</p><h2><span id="preventing-browser-behavior">Preventing Browser Behavior</span></h2><p>There are two ways to tell the browser that we don’t want it to execute default behavior:</p><ul><li>The common way is to use the event object, which has a <code>event.preventDefault()</code> method.</li><li>If the handler is assigned using <code>on&lt;event&gt;</code> (rather than <code>addEventListener</code>), returning false is also effective.</li></ul><p><strong>In the example below, clicking the link will not trigger navigation, and the browser will not perform any action:</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token keyword">return</span> <span class="token boolean">false</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Click here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>or<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="/" onclick="return false">Click here</a><br>or<br><a href="/" onclick="event.preventDefault()">here</a></p><br><p>It’s important to note that using <code>on&lt;event&gt;</code> and returning false is not a good practice.</p><p>Returning false from the handler is an exception. The return value of event handlers is usually ignored. The only exception is returning false from a handler assigned using <code>on&lt;event&gt;</code>.</p><h2><span id="handler-option-passive">Handler Option “passive”</span></h2><p>The optional <code>passive: true</code> option in <code>addEventListener</code> signals to the browser that the handler will not call <code>preventDefault()</code>.</p><p>Why is this necessary?</p><p>On mobile devices, some events like <code>touchmove</code> (when the user moves their finger on the screen) can lead to scrolling by default, which can be prevented using <code>preventDefault()</code> in the handler.</p><p>So, when the browser detects such events, it must first process all handlers. If <code>preventDefault</code> is not called anywhere, the page can continue scrolling. However, this may cause unnecessary delays and “jitter” in the UI.</p><p>The <code>passive: true</code> option informs the browser that the handler will not cancel scrolling. The browser then immediately scrolls the page to provide a smoother experience and somehow processes the event.</p><p>For certain browsers (such as Firefox and Chrome), <code>touchstart</code> and <code>touchmove</code> events have passive set to true by default.</p><h2><span id="eventdefaultprevented"><code>event.defaultPrevented</code></span></h2><p>If the default behavior is prevented, the <code>event.defaultPrevented</code> property is true; otherwise, it is false.</p><p>Here’s an interesting use case.</p><p><strong>Do you remember our discussion on <code>event.stopPropagation()</code> in the Bubbling and Capturing chapter and why stopping propagation is not good?</strong></p><p>Sometimes, we can use <code>event.defaultPrevented</code> as an alternative to notify other event handlers that the event has been handled.</p><p>Let’s look at a practical example.</p><p>By default, the browser displays a context menu with standard options on the <code>contextmenu</code> event (right-click). We can prevent it and display our custom menu like this:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Right-click shows browser context menu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">oncontextmenu</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert('Draw our menu'); return false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Right-click shows our context menu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><button>Right-click shows browser context menu</button></p><button oncontextmenu="alert('Draw our menu'); return false">  Right-click shows our context menu</button><br><p>Now, in addition to this context menu, let’s implement a document-wide context menu.</p><p>When right-clicking, it should display the nearest context menu:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Right-click here for the document context menu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>elem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Right-click here for the button context menu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  elem<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Button context menu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Document context menu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>Right-click here for the document context menu</p><button id="elem">Right-click here for the button context menu</button><script>  elem.oncontextmenu = function(event) {    event.preventDefault();    alert("Button context menu");  };  document.oncontextmenu = function(event) {    event.preventDefault();    alert("Document context menu");  };</script><br><h2><span id="issue-and-solutions">Issue and Solutions</span></h2><p>The problem arises when clicking on <code>elem</code>, and we get two menus: the button-level menu and the document-level menu due to event bubbling.</p><p>One solution is to prevent the event from bubbling up when handling the right-click event in the button. We can achieve this using <code>event.stopPropagation()</code>:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Right-click for the document menu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>elem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Right-click for the button menu (fixed with event.stopPropagation)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  elem<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Button context menu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Document context menu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Now, the button-level menu works as expected. However, this comes at a cost — we deny any external code access to right-click information, including counters for collecting statistics. This is not advisable.</p><p>Another alternative is to check whether the document handler has prevented the browser’s default behavior. If it has, the event has already been handled, and we don’t need to react to it:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Right-click for the document menu (added a check for event.defaultPrevented)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>elem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Right-click for the button menu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  elem<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Button context menu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>defaultPrevented<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Document context menu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Now everything works as expected. If we have nested elements, each with its own context menu, this approach will work. Just make sure to check <code>event.defaultPrevented</code> in each <code>contextmenu</code> handler.</p><blockquote><p><strong>event.stopPropagation() and event.preventDefault()</strong><br>As we’ve seen, <code>event.stopPropagation()</code> and <code>event.preventDefault()</code> (also considered as <code>return false</code>) are two different things. They are unrelated to each other.</p></blockquote><blockquote><p><strong>Nested Context Menu Structure</strong><br>There are other ways to implement nested context menus. One approach is to have a global object with a <code>document.oncontextmenu</code> handler and a method to store other handlers. This object would capture any right-click, browse stored handlers, and run the appropriate one.</p></blockquote><p>However, every piece of code needing a context menu should be aware of this object and use its assistance rather than having its own <code>contextmenu</code> handler.</p><h2><span id="summary">Summary</span></h2><p>There are many default browser behaviors:</p><ul><li><code>mousedown</code> — Starts selection (dragging the mouse for selection).</li><li><code>click</code> on <code>&lt;input type=&quot;checkbox&quot;&gt;</code> — Selects&#x2F;deselects the input.</li><li><code>submit</code> — Clicking <code>&lt;input type=&quot;submit&quot;&gt;</code> or pressing Enter in form fields triggers this event, leading the browser to submit the form.</li><li><code>keydown</code> — Pressing a key adds a character to a field or triggers other actions.</li><li><code>contextmenu</code> — Event occurs on right-click, triggering the default behavior of showing the browser context menu.</li><li>…and many more…</li></ul><p>If we want to handle events using JavaScript only, all default behaviors can be prevented.</p><p>To prevent default behavior, you can use <code>event.preventDefault()</code> or <code>return false</code>. The second method is only applicable to handlers assigned through <code>on&lt;event&gt;</code>.</p><p>The <code>passive: true</code> option of <code>addEventListener</code> informs the browser that the behavior will not be prevented. This is useful for certain mobile events (like <code>touchstart</code> and <code>touchmove</code>) to let the browser scroll without waiting for all handlers to finish.</p><p>If the default behavior is prevented, the value of <code>event.defaultPrevented</code> becomes true; otherwise, it is false.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;preface&quot;&gt;Preface&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;In fact, browsers come with many built-in events, and many events automatically trigger certain</summary>
      
    
    
    
    <category term="FE" scheme="https://ikkkp.github.io/categories/FE/"/>
    
    
    <category term="Vue,Browser,FE" scheme="https://ikkkp.github.io/tags/Vue-Browser-FE/"/>
    
  </entry>
  
</feed>
